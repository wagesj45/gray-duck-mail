<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.EntityFrameworkCore.Relational</name>
    </assembly>
    <members>
        <member name="T:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator">
            <summary>
                <para>
                    Base class to be used by database providers when implementing an <see cref="T:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator" />
                </para>
                <para>
                    This implementation returns <see langword="false" /> for all 'IsHandledByConvention' methods and
                    <see langword="null" /> for all 'GenerateFluentApi' methods. Providers should override for the
                    annotations that they understand.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies)">
            <summary>
                Initializes a new instance of this class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.Dependencies">
            <summary>
                Parameter object containing dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.FilterIgnoredAnnotations(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Checks if the given <paramref name="annotation" /> is handled by convention when
                    applied to the given <paramref name="model" />.
                </para>
                <para>
                    The default implementation always returns <see langword="false" />.
                </para>
            </summary>
            <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns>
                <see langword="true" /> if the annotation is handled by convention;
                <see langword="false" /> if code must be generated.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Checks if the given <paramref name="annotation" /> is handled by convention when
                    applied to the given <paramref name="entityType" />.
                </para>
                <para>
                    The default implementation always returns <see langword="false" />.
                </para>
            </summary>
            <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Checks if the given <paramref name="annotation" /> is handled by convention when
                    applied to the given <paramref name="key" />.
                </para>
                <para>
                    The default implementation always returns <see langword="false" />.
                </para>
            </summary>
            <param name="key"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Checks if the given <paramref name="annotation" /> is handled by convention when
                    applied to the given <paramref name="property" />.
                </para>
                <para>
                    The default implementation always returns <see langword="false" />.
                </para>
            </summary>
            <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Checks if the given <paramref name="annotation" /> is handled by convention when
                    applied to the given <paramref name="foreignKey" />.
                </para>
                <para>
                    The default implementation always returns <see langword="false" />.
                </para>
            </summary>
            <param name="foreignKey"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.IsHandledByConvention(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Checks if the given <paramref name="annotation" /> is handled by convention when
                    applied to the given <paramref name="index" />.
                </para>
                <para>
                    The default implementation always returns <see langword="false" />.
                </para>
            </summary>
            <param name="index"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                    if no fluent API call exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="model"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                    if no fluent API call exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                    if no fluent API call exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="key"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                    if no fluent API call exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                    if no fluent API call exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="foreignKey"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                    if no fluent API call exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="navigation"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.INavigation" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                    if no fluent API call exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="navigation"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateFluentApi(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a fluent API call for the given <paramref name="annotation" />, or <see langword="null" />
                    if no fluent API call exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="index"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateDataAnnotation(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a data annotation attribute code fragment for the given <paramref name="annotation" />,
                    or <see langword="null" /> if no data annotation exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="entityType"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator.GenerateDataAnnotation(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation)">
            <summary>
                <para>
                    Returns a data annotation attribute code fragment for the given <paramref name="annotation" />,
                    or <see langword="null" /> if no data annotation exists for it.
                </para>
                <para>
                    The default implementation always returns <see langword="null" />.
                </para>
            </summary>
            <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />. </param>
            <param name="annotation"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />. </param>
            <returns> <see langword="null" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGenerator" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.AnnotationCodeGeneratorDependencies.RelationalTypeMappingSource">
            <summary>
                The type mapper.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment">
            <summary>
                Represents usage of an attribute.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment.#ctor(System.Type,System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment" /> class.
            </summary>
            <param name="type"> The attribute's CLR type. </param>
            <param name="arguments"> The attribute's arguments. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment.Type">
            <summary>
                Gets or sets the attribute's type.
            </summary>
            <value> The attribute's type. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.AttributeCodeFragment.Arguments">
            <summary>
                Gets the method call's arguments.
            </summary>
            <value> The method call's arguments. </value>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator">
            <summary>
                Implemented by database providers to control which <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation" />s need to
                have code generated (as opposed to being handled by convention) and then to generate
                the code if needed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.FilterIgnoredAnnotations(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                Filters out annotations in <paramref name="annotations" /> for which code should never be generated.
            </summary>
            <param name="annotations"> The annotations from which to filter the ignored ones. </param>
            <returns> The filtered annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
            <param name="model"> The model to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to remove the conventional ones. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
            <param name="entity"> The entity to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to remove the conventional ones. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
            <param name="property"> The property to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to remove the conventional ones. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
            <param name="key"> The key to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to remove the conventional ones. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
            <param name="foreignKey"> The foreign key to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to remove the conventional ones. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.RemoveAnnotationsHandledByConventions(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                Removes annotation whose configuration is already applied by convention, and do not need to be
                specified explicitly.
            </summary>
            <param name="index"> The index to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to remove the conventional ones. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
            <param name="model"> The model to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
            <param name="entityType"> The entity type to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
            <param name="property"> The property to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
            <param name="key"> The key to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
            <param name="foreignKey"> The foreign key to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
            <param name="navigation"> The navigation to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.ISkipNavigation,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
            <param name="navigation"> The skip navigation to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateFluentApiCalls(Microsoft.EntityFrameworkCore.Metadata.IIndex,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding fluent API calls, returns those fluent API calls
                and removes the annotations.
            </summary>
            <param name="index"> The index to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding data annotation attributes, returns those attribute code fragments
                and removes the annotations.
            </summary>
            <param name="entityType"> The entity type to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.IAnnotationCodeGenerator.GenerateDataAnnotationAttributes(Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Collections.Generic.IDictionary{System.String,Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                For the given annotations which have corresponding data annotation attributes, returns those attribute code fragments
                and removes the annotations.
            </summary>
            <param name="property"> The property to which the annotations are applied. </param>
            <param name="annotations"> The set of annotations from which to generate fluent API calls. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment">
            <summary>
                Represents a call to a method.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment.#ctor(System.String,System.Object[])">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" /> class.
            </summary>
            <param name="method"> The method's name. </param>
            <param name="arguments"> The method call's arguments. Can be <see cref="T:Microsoft.EntityFrameworkCore.Design.NestedClosureCodeFragment" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment.#ctor(System.String,System.Object[],Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment" /> class.
            </summary>
            <param name="method"> The method's name. </param>
            <param name="arguments"> The method call's arguments.  Can be <see cref="T:Microsoft.EntityFrameworkCore.Design.NestedClosureCodeFragment" />. </param>
            <param name="chainedCall"> The next method call to chain after this. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment.Method">
            <summary>
                Gets or sets the method's name.
            </summary>
            <value> The method's name. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment.Arguments">
            <summary>
                Gets the method call's arguments.
            </summary>
            <value> The method call's arguments. </value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment.ChainedCall">
            <summary>
                Gets the next method call to chain after this.
            </summary>
            <value> The next method call. </value>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment.Chain(System.String,System.Object[])">
            <summary>
                Creates a method chain from this method to another.
            </summary>
            <param name="method"> The next method's name. </param>
            <param name="arguments"> The next method call's arguments. </param>
            <returns> A new fragment representing the method chain. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment.Chain(Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment)">
            <summary>
                Creates a method chain from this method to another.
            </summary>
            <param name="call"> The next method. </param>
            <returns> A new fragment representing the method chain. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Design.NestedClosureCodeFragment">
            <summary>
                Represents a nested closure code fragment.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Design.NestedClosureCodeFragment.#ctor(System.String,Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Design.NestedClosureCodeFragment" /> class.
            </summary>
            <param name="parameter">The nested closure parameter's name.</param>
            <param name="methodCall">The method call used as the body of the nested closure.</param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.NestedClosureCodeFragment.Parameter">
            <summary>
                Gets the nested closure parameter's name.
            </summary>
            <value>The parameter name.</value>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Design.NestedClosureCodeFragment.MethodCall">
            <summary>
                Gets the method call used as the body of the nested closure.
            </summary>
            <value>The method call.</value>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.BatchEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> batch events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.BatchEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entries"> The entries being updated. </param>
            <param name="commandCount"> The command count. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.BatchEventData.Entries">
            <summary>
                The entries being updated.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.BatchEventData.CommandCount">
            <summary>
                The command count.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for events correlated with a <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Boolean,System.DateTimeOffset)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="connection"> The <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="executeMethod"> The <see cref="T:System.Data.Common.DbCommand" /> method. </param>
            <param name="commandId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbCommand" /> instance being used. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="async"> Indicates whether or not the command was executed asynchronously. </param>
            <param name="startTime"> The start time of this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData.Connection">
            <summary>
                The <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData.CommandId">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbCommand" /> instance being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData.ConnectionId">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData.ExecuteMethod">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod" /> method.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData.IsAsync">
            <summary>
                Indicates whether or not the operation is being executed asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData.StartTime">
            <summary>
                The start time of this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> command end events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Boolean,System.Boolean,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="connection"> The <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="command"> The <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="executeMethod"> The <see cref="T:System.Data.Common.DbCommand" /> method. </param>
            <param name="commandId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbCommand" /> instance being used. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="async"> Indicates whether or not the command was executed asynchronously. </param>
            <param name="logParameterValues"> Indicates whether or not the application allows logging of parameter values. </param>
            <param name="startTime"> The start time of this event. </param>
            <param name="duration"> The duration this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData.Duration">
            <summary>
                The duration this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandError" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Exception,System.Boolean,System.Boolean,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="connection"> The <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="command"> The <see cref="T:System.Data.Common.DbCommand" /> that was executing when it failed. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="executeMethod"> The <see cref="T:System.Data.Common.DbCommand" /> method that was used to execute the command. </param>
            <param name="commandId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbCommand" /> instance being used. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="exception"> The exception that was thrown when execution failed. </param>
            <param name="async"> Indicates whether or not the command was executed asynchronously. </param>
            <param name="logParameterValues"> Indicates whether or not the application allows logging of parameter values. </param>
            <param name="startTime"> The start time of this event. </param>
            <param name="duration"> The duration this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData.Exception">
            <summary>
                The exception that was thrown when execution failed.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> command events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Boolean,System.Boolean,System.DateTimeOffset)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="connection"> The <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="command"> The <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="executeMethod"> The <see cref="T:System.Data.Common.DbCommand" /> method. </param>
            <param name="commandId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbCommand" /> instance being used. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="async"> Indicates whether or not the command was executed asynchronously. </param>
            <param name="logParameterValues"> Indicates whether or not the application allows logging of parameter values. </param>
            <param name="startTime"> The start time of this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData.Command">
            <summary>
                The <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData.LogParameterValues">
            <summary>
                Indicates whether or not the application allows logging of parameter values.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuted" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Object,System.Boolean,System.Boolean,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="connection"> The <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="command"> The <see cref="T:System.Data.Common.DbCommand" /> that was executing when it failed. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="executeMethod"> The <see cref="T:System.Data.Common.DbCommand" /> method that was used to execute the command. </param>
            <param name="commandId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbCommand" /> instance being used. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="result"> The result of executing the operation. </param>
            <param name="async"> Indicates whether or not the command was executed asynchronously. </param>
            <param name="logParameterValues"> Indicates whether or not the application allows logging of parameter values. </param>
            <param name="startTime"> The start time of this event. </param>
            <param name="duration"> The duration this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData.Result">
            <summary>
                The result of executing the command.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> connection ending events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Boolean,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="connection"> The <see cref="T:System.Data.Common.DbConnection" />. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="async"> Indicates whether or not the operation is happening asynchronously. </param>
            <param name="startTime"> The start time of this event. </param>
            <param name="duration"> The duration this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData.Duration">
            <summary>
                The duration this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionError" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Exception,System.Boolean,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="connection"> The <see cref="T:System.Data.Common.DbConnection" />. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="connectionId">A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="exception"> The exception that was thrown when the connection failed. </param>
            <param name="async"> Indicates whether or not the operation is happening asynchronously. </param>
            <param name="startTime"> The start time of this event. </param>
            <param name="duration"> The duration this event.  </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData.Exception">
            <summary>
                The exception that was thrown when the connection failed.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload base class for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> connection events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Boolean,System.DateTimeOffset)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="connection"> The <see cref="T:System.Data.Common.DbConnection" />. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="async"> Indicates whether or not the operation is happening asynchronously. </param>
            <param name="startTime"> The start time of this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData.Connection">
            <summary>
                The <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData.ConnectionId">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData.IsAsync">
            <summary>
                Indicates whether or not the operation is happening asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData.StartTime">
            <summary>
                The start time of this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData">
            <summary>
                <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.DataReaderDisposing" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbCommand,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Int32,System.Int32,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Constructs a <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.DataReaderDisposing" />.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="command"> The <see cref="T:System.Data.Common.DbCommand" /> that created the reader. </param>
            <param name="dataReader"> The <see cref="T:System.Data.Common.DbDataReader" /> that is being disposed. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId">A correlation ID that identifies the <see cref="T:System.Data.Common.DbCommand" /> instance being used. </param>
            <param name="connectionId">A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="recordsAffected">Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. </param>
            <param name="readCount">Gets the number of read operations performed by this reader. </param>
            <param name="startTime">The start time of this event. </param>
            <param name="duration">The duration this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData.Command">
            <summary>
                The <see cref="T:System.Data.Common.DbCommand" /> that created the reader.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData.DataReader">
            <summary>
                The <see cref="T:System.Data.Common.DbDataReader" /> that is being disposed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData.CommandId">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbCommand" /> instance being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData.ConnectionId">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData.RecordsAffected">
            <summary>
                Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData.ReadCount">
            <summary>
                Gets the number of read operations performed by this reader.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData.StartTime">
            <summary>
                The start time of this event.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData.Duration">
            <summary>
                The duration this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor">
            <summary>
                <para>
                    Abstract base class for <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor" /> for use when implementing a subset
                    of the interface methods.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbCommand})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.CreateCommand" />.
            </summary>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.CommandCreated(Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData,System.Data.Common.DbCommand)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbConnection.CreateCommand" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed creation of a command in
                    <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbCommand})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbCommand})" />.
                </para>
            </summary>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbConnection.CreateCommand" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Data.Common.DbDataReader)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Object)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Int32)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ReaderExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ScalarExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Object,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.NonQueryExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Int32,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.CommandFailed(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData)">
            <summary>
                Called when execution of a command has failed with an exception.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.CommandFailedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData,System.Threading.CancellationToken)">
            <summary>
                Called when execution of a command has failed with an exception.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor.DataReaderDisposing(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called when execution of a <see cref="T:System.Data.Common.DbDataReader" /> is about to be disposed.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and reader. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod">
            <summary>
                Enum used by <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData" />, an subclasses to indicate the
                method on <see cref="T:System.Data.Common.DbCommand" /> being used to execute the command.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod.ExecuteNonQuery">
            <summary>
                The <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> or
                <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" /> method.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod.ExecuteScalar">
            <summary>
                The <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> or
                <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" /> method.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod.ExecuteReader">
            <summary>
                The <see cref="M:System.Data.Common.DbCommand.ExecuteReader" /> or
                <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" /> method.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor">
            <summary>
                <para>
                    Abstract base class for <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor" /> for use when implementing a subset
                    of the interface methods.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionOpening(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.Open" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionOpeningAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.OpenAsync" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionOpened(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)">
            <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.Open" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionOpenedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData,System.Threading.CancellationToken)">
            <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.OpenAsync" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionClosing(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.Close" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionClosingAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.CloseAsync" /> in an async context.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionClosed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)">
            <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.Close" /> in an async context.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionClosedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)">
            <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.CloseAsync" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionFailed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData)">
            <summary>
                Called when opening of a connection has failed with an exception.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor.ConnectionFailedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData,System.Threading.CancellationToken)">
            <summary>
                Called when opening of a connection has failed with an exception.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor">
            <summary>
                <para>
                    Abstract base class for <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor" /> for use when implementing a subset
                    of the interface methods.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionStarted(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData,System.Data.Common.DbTransaction)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed creation in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})" />.
                </para>
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionStartingAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call
                <see cref="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionStartedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after EF calls
                    <see cref="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)" />
                    .
                </para>
                <para>
                    This method is still called if an interceptor suppressed creation in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})" />.
                </para>
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                The result of the call to
                <see cref="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionUsed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Data.Common.DbTransaction)">
            <summary>
                <para>
                    Called immediately after <see cref="M:RelationalDatabaseFacadeExtensions.UseTransaction" /> is called.
                </para>
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                The <see cref="T:System.Data.Common.DbTransaction" /> that was passed to <see cref="M:RelationalDatabaseFacadeExtensions.UseTransaction" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The value that will be used as the effective value passed to <see cref="M:RelationalDatabaseFacadeExtensions.UseTransaction" />
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionUsedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after <see cref="M:RelationalDatabaseFacadeExtensions.UseTransactionAsync" /> is called.
                </para>
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                The <see cref="T:System.Data.Common.DbTransaction" /> that was passed to <see cref="M:RelationalDatabaseFacadeExtensions.UseTransactionAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" />  containing the value that will be used as the effective value passed
                to <see cref="M:RelationalDatabaseFacadeExtensions.UseTransactionAsync" />
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionCommitting(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbTransaction.Commit" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionCommitted(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData)">
            <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbTransaction.Commit" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionCommittingAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call
                <see cref="M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionCommittedAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionRollingBack(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbTransaction.Rollback" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionRolledBack(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData)">
            <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbTransaction.Rollback" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionRollingBackAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call
                <see cref="M:System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionRolledBackAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.CreatingSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.CreatedSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.CreatingSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.CreatedSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.RollingBackToSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.RolledBackToSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.RollingBackToSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.RolledBackToSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.ReleasingSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.ReleasedSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.ReleasingSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.ReleasedSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionFailed(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData)">
            <summary>
                Called when use of a <see cref="T:System.Data.Common.DbTransaction" /> has failed with an exception.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor.TransactionFailedAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData,System.Threading.CancellationToken)">
            <summary>
                Called when use of a <see cref="T:System.Data.Common.DbTransaction" /> has failed with an exception.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.EntityTypeSchemaEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload base class for events that
                reference an entity type and a schema
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.EntityTypeSchemaEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityType"> The entity type. </param>
            <param name="schema"> The schema. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.EntityTypeSchemaEventData.EntityType">
            <summary>
                The entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.EntityTypeSchemaEventData.Schema">
            <summary>
                The schema.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor">
            <summary>
                <para>
                    Allows interception of commands sent to a relational database.
                </para>
                <para>
                    Command interceptors can be used to view, change, or suppress execution of the <see cref="T:System.Data.Common.DbCommand" />, and
                    to modify the result before it is returned to EF.
                </para>
                <para>
                    Consider inheriting from <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbCommandInterceptor" /> if not implementing all methods.
                </para>
                <para>
                    Use <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.AddInterceptors(Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])" />
                    to register application interceptors.
                </para>
                <para>
                    Extensions can also register interceptors in the internal service provider.
                    If both injected and application interceptors are found, then the injected interceptors are run in the
                    order that they are resolved from the service provider, and then the application interceptors are run last.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbCommand})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.CreateCommand" />.
            </summary>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreated(Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData,System.Data.Common.DbCommand)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbConnection.CreateCommand" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed creation of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbCommand})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbCommand})" />.
                </para>
            </summary>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbConnection.CreateCommand" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Data.Common.DbDataReader)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader})" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteReader" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Object)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object})" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecuted(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Int32)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecuting(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32})" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Data.Common.DbDataReader,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ReaderExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbDataReader},System.Threading.CancellationToken)" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteReaderAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Object,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.ScalarExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Object},System.Threading.CancellationToken)" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecutedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData,System.Int32,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed execution of a command in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.NonQueryExecutingAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Int32},System.Threading.CancellationToken)" />.
                </para>
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandFailed(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData)">
            <summary>
                Called when execution of a command has failed with an exception.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.CommandFailedAsync(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData,System.Threading.CancellationToken)">
            <summary>
                Called when execution of a command has failed with an exception.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and execution. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor.DataReaderDisposing(System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called when execution of a <see cref="T:System.Data.Common.DbDataReader" /> is about to be disposed.
            </summary>
            <param name="command"> The command. </param>
            <param name="eventData"> Contextual information about the command and reader. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor">
            <summary>
                <para>
                    Allows interception of operations on <see cref="T:System.Data.Common.DbConnection" />.
                </para>
                <para>
                    Connection interceptors can be used to view, change, or suppress the operation on <see cref="T:System.Data.Common.DbConnection" />, and
                    to modify the result before it is returned to EF.
                </para>
                <para>
                    Consider inheriting from <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbConnectionInterceptor" /> if not implementing all methods.
                </para>
                <para>
                    Use <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.AddInterceptors(Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])" />
                    to register application interceptors.
                </para>
                <para>
                    Extensions can also register interceptors in the internal service provider.
                    If both injected and application interceptors are found, then the injected interceptors are run in the
                    order that they are resolved from the service provider, and then the application interceptors are run last.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionOpening(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.Open" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionOpeningAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.OpenAsync" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionOpened(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)">
            <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.Open" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionOpenedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData,System.Threading.CancellationToken)">
            <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.OpenAsync" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionClosing(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.CloseAsync" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionClosingAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.Close" /> in an async context.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionClosed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)">
            <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.Close" /> in an async context.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionClosedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData)">
            <summary>
                Called just after EF has called <see cref="M:System.Data.Common.DbConnection.CloseAsync" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionFailed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData)">
            <summary>
                Called when closing of a connection has failed with an exception.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor.ConnectionFailedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData,System.Threading.CancellationToken)">
            <summary>
                Called when closing of a connection has failed with an exception.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about the connection. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor">
            <summary>
                <para>
                    Allows interception of operations related to a <see cref="T:System.Data.Common.DbTransaction" />.
                </para>
                <para>
                    Transaction interceptors can be used to view, change, or suppress operations on <see cref="T:System.Data.Common.DbTransaction" />, and
                    to modify the result before it is returned to EF.
                </para>
                <para>
                    Consider inheriting from <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DbTransactionInterceptor" /> if not implementing all methods.
                </para>
                <para>
                    Use <see cref="M:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder.AddInterceptors(Microsoft.EntityFrameworkCore.Diagnostics.IInterceptor[])" />
                    to register application interceptors.
                </para>
                <para>
                    Extensions can also register interceptors in the internal service provider.
                    If both injected and application interceptors are found, then the injected interceptors are run in the
                    order that they are resolved from the service provider, and then the application interceptors are run last.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarted(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData,System.Data.Common.DbTransaction)">
            <summary>
                <para>
                    Called immediately after EF calls <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)" />.
                </para>
                <para>
                    This method is still called if an interceptor suppressed creation in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})" />.
                </para>
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                The result of the call to <see cref="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStartingAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction},System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call
                <see cref="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)" />.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.SuppressWithResult(`0)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.HasResult" /> is true, then EF will suppress the operation it
                was about to perform and use <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult`1.Result" /> instead.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStartedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after EF calls
                    <see cref="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)" />
                    .
                </para>
                <para>
                    This method is still called if an interceptor suppressed creation in <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})" />.
                    In this case, <paramref name="result" /> is the result returned by <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionStarting(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult{System.Data.Common.DbTransaction})" />.
                </para>
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                The result of the call to
                <see cref="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> providing the result that EF will use.
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionUsed(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Data.Common.DbTransaction)">
            <summary>
                <para>
                    Called immediately after <see cref="M:RelationalDatabaseFacadeExtensions.UseTransaction" /> is called.
                </para>
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                The <see cref="T:System.Data.Common.DbTransaction" /> that was passed to <see cref="M:RelationalDatabaseFacadeExtensions.UseTransaction" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                The value that will be used as the effective value passed to <see cref="M:RelationalDatabaseFacadeExtensions.UseTransaction" />
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionUsedAsync(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Called immediately after <see cref="M:RelationalDatabaseFacadeExtensions.UseTransactionAsync" /> is called.
                </para>
            </summary>
            <param name="connection"> The connection. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                The <see cref="T:System.Data.Common.DbTransaction" /> that was passed to <see cref="M:RelationalDatabaseFacadeExtensions.UseTransactionAsync" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" />  containing the value that will be used as the effective value passed
                to <see cref="M:RelationalDatabaseFacadeExtensions.UseTransactionAsync" />
                A normal implementation of this method for any interceptor that is not attempting to change the result
                is to return the <paramref name="result" /> value passed in, often using <see cref="M:System.Threading.Tasks.Task.FromResult``1(``0)" />
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionCommitting(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbTransaction.Commit" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionCommitted(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData)">
            <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbTransaction.Commit" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionCommittingAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call
                <see cref="M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionCommittedAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionRollingBack(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to call <see cref="M:System.Data.Common.DbTransaction.Rollback" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionRolledBack(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData)">
            <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbTransaction.Rollback" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionRollingBackAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to call
                <see cref="M:System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionRolledBackAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.CreatingSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to create a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.CreatedSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData)">
            <summary>
                Called immediately after EF creates a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.CreatingSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to create a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.CreatedSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF calls <see cref="M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)" />.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.RollingBackToSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to roll back to a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.RolledBackToSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData)">
            <summary>
                Called immediately after EF rolls back to a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.RollingBackToSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to roll back to a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.RolledBackToSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF rolls back to a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.ReleasingSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult)">
            <summary>
                Called just before EF intends to release a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.ReleasedSavepoint(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData)">
            <summary>
                Called immediately after EF releases a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.ReleasingSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult,System.Threading.CancellationToken)">
            <summary>
                Called just before EF intends to release a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="result">
                Represents the current result if one exists.
                This value will have <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> set to <see langword="true" /> if some previous
                interceptor suppressed execution by calling <see cref="M:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.Suppress" />.
                This value is typically used as the return value for the implementation of this method.
            </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns>
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is false, the EF will continue as normal.
                If <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.InterceptionResult.IsSuppressed" /> is true, then EF will suppress the operation
                it was about to perform.
                A normal implementation of this method for any interceptor that is not attempting to suppress
                the operation is to return the <paramref name="result" /> value passed in.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.ReleasedSavepointAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData,System.Threading.CancellationToken)">
            <summary>
                Called immediately after EF releases a transaction savepoint.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionFailed(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData)">
            <summary>
                Called when use of a <see cref="T:System.Data.Common.DbTransaction" /> has failed with an exception.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor.TransactionFailedAsync(System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData,System.Threading.CancellationToken)">
            <summary>
                Called when use of a <see cref="T:System.Data.Common.DbTransaction" /> has failed with an exception.
            </summary>
            <param name="transaction"> The transaction. </param>
            <param name="eventData"> Contextual information about connection and transaction. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.IndexEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for
                the events involving an invalid index.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IndexEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Collections.Generic.List{System.String})">
            <summary>
                Constructs the event payload for events involving an invalid index.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityType"> The entity type on which the index is defined. </param>
            <param name="indexName"> The name of the index. </param>
            <param name="indexPropertyNames"> The names of the properties which define the index. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexEventData.EntityType">
            <summary>
                The entity type on which the index is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexEventData.Name">
            <summary>
                The name of the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexEventData.PropertyNames">
            <summary>
                The list of properties which define the index.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for the
                <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.IndexPropertiesMappedToNonOverlappingTables" /> event.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Collections.Generic.List{System.String},System.String,System.Collections.Generic.List{System.ValueTuple{System.String,System.String}},System.String,System.Collections.Generic.List{System.ValueTuple{System.String,System.String}})">
            <summary>
                Constructs the event payload for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.IndexPropertiesMappedToNonOverlappingTables" /> event.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityType"> The entity type on which the index is defined. </param>
            <param name="indexName"> The name of the index. </param>
            <param name="indexPropertyNames"> The names of the properties which define the index. </param>
            <param name="property1Name"> The name of the first property name which causes this event. </param>
            <param name="tablesMappedToProperty1"> The tables mapped to the first property. </param>
            <param name="property2Name"> The name of the second property name which causes this event. </param>
            <param name="tablesMappedToProperty2"> The tables mapped to the second property. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData.EntityType">
            <summary>
                The entity type on which the index is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData.Name">
            <summary>
                The name of the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData.PropertyNames">
            <summary>
                The list of properties which define the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData.Property1Name">
            <summary>
                The name of the first property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData.TablesMappedToProperty1">
            <summary>
                The tables mapped to the first property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData.Property2Name">
            <summary>
                The name of the second property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData.TablesMappedToProperty2">
            <summary>
                The tables mapped to the second property.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertyEventData">
            <summary>
                A <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload class for
                the events involving an invalid property name on an index.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertyEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Collections.Generic.List{System.String},System.String)">
            <summary>
                Constructs the event payload for indexes with a invalid property.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entityType"> The entity type on which the index is defined. </param>
            <param name="indexName"> The name of the index. </param>
            <param name="indexPropertyNames"> The names of the properties which define the index. </param>
            <param name="invalidPropertyName"> The property name which is invalid. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertyEventData.EntityType">
            <summary>
                The entity type on which the index is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertyEventData.Name">
            <summary>
                The name of the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertyEventData.PropertyNames">
            <summary>
                The list of properties which define the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertyEventData.PropertyName">
            <summary>
                The name of the specific property.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbCommandInterceptorAggregator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbCommandInterceptorAggregator.CreateChain(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Diagnostics.IDbCommandInterceptor})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbConnectionInterceptorAggregator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbConnectionInterceptorAggregator.CreateChain(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Diagnostics.IDbConnectionInterceptor})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbTransactionInterceptorAggregator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.DbTransactionInterceptorAggregator.CreateChain(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Diagnostics.IDbTransactionInterceptor})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogAmbientTransaction(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                An ambient transaction has been detected. The current provider does not support ambient transactions. See http://go.microsoft.com/fwlink/?LinkId=800142
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogAmbientTransactionEnlisted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Enlisted in an ambient transaction with isolation level '{isolationLevel}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogApplyingMigration(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Applying migration '{migration}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogBatchExecutorFailedToReleaseSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                An error occurred while the batch executor was releasing a transaction savepoint.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogBatchExecutorFailedToRollbackToSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                An error occurred while the batch executor was rolling back the transaction to a savepoint, after an exception occured.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogBatchReadyForExecution(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Executing {batchCommandsCount} update commands as a batch.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogBatchSmallerThanMinBatchSize(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Executing update commands individually as the number of batchable commands ({batchableCommandsCount}) is smaller than the minimum batch size ({minBatchSize}).
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogBeganTransaction(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Began transaction with isolation level '{isolationLevel}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogBeginningTransaction(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Beginning transaction with isolation level '{isolationLevel}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogBoolWithDefaultWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The 'bool' property '{property}' on entity type '{entityType}' is configured with a database-generated default. This default will always be used for inserts when the property has the value 'false', since this is the CLR default for the 'bool' type. Consider using the nullable 'bool?' type instead so that the default will only be used for inserts when the property value is 'null'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogClosedConnection(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Closed connection to database '{database}' on server '{server}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogClosingConnection(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Closing connection to database '{database}' on server '{server}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogCommandCreated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Created DbCommand for '{executionType}' ({elapsed}ms).
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogCommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Creating DbCommand for '{executionType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogCommandFailed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Failed executing DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogCommittedTransaction(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Committed transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogCommittingTransaction(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Committing transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogConnectionError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                An error occurred using the connection to database '{database}' on server '{server}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogConnectionErrorAsDebug(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                An error occurred using the connection to database '{database}' on server '{server}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogCreatedTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Created transaction savepoint.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogCreatingTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Creating transaction savepoint.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogDisposingDataReader(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                A data reader was disposed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogDisposingTransaction(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Disposing transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogExecutedCommand(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Executed DbCommand ({elapsed}ms) [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogExecutingCommand(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Executing DbCommand [Parameters=[{parameters}], CommandType='{commandType}', CommandTimeout='{commandTimeout}']{newLine}{commandText}
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogExplicitTransactionEnlisted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Enlisted in an explicit transaction with isolation level '{isolationLevel}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogForeignKeyPropertiesMappedToUnrelatedTables(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The foreign key {foreignKeyProperties} on the entity type '{entityType}' targeting '{principalEntityType}' cannot be represented in the database. Either the properties {foreignKeyProperties} aren't mapped to table '{table}' or the principal properties {principalProperties} aren't mapped to table '{principalTable}'. All foreign key properties must map to the table that the dependent type is mapped to and all principal properties must map to a single table that the principal type is mapped to.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogGeneratingDown(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Generating down script for migration '{migration}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogGeneratingUp(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Generating up script for migration '{migration}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogKeyHasDefaultValue(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Property '{property}' on entity type '{entityType}' is part of a primary or alternate key but has a constant default value set. Constant default values are not useful for primary or alternate keys since these properties must always have non-null unique values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogMigrating(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Migrating using database '{database}' on server '{dataSource}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogMigrationAttributeMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                A [Migration] attribute isn't specified on the '{class}' class.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogMultipleCollectionIncludeWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Compiling a query which loads related collections for more than one collection navigation either via 'Include' or through projection but no 'QuerySplittingBehavior' has been configured. By default Entity Framework will use 'QuerySplittingBehavior.SingleQuery' which can potentially result in slow query performance. See https://go.microsoft.com/fwlink/?linkid=2134277 for more information. To identify the query that's triggering this warning call 'ConfigureWarnings(w =&gt; w.Throw(RelationalEventId.MultipleCollectionIncludeWarning))'
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogNamedIndexAllPropertiesNotToMappedToAnyTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The index named '{indexName}' on the entity type '{entityType}' specifies properties {indexProperties}. None of these properties are mapped to a column in any table. This index will not be created in the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogNamedIndexPropertiesBothMappedAndNotMappedToTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The index named '{indexName}' on the entity type '{entityType}' specifies properties {indexProperties}. Some properties are mapped to a column in a table, but the property '{propertyName}' is not. All of the properties should be mapped for the index to be created in the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogNamedIndexPropertiesMappedToNonOverlappingTables(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The index named '{indexName}' on the entity type '{entityType}' specifies properties {indexProperties}. The property '{propertyName1}' is mapped to table(s) {tables1}, whereas the property '{propertyName2}' is mapped to table(s) {tables2}. All index properties must map to at least one common table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogNoMigrationsApplied(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                No migrations were applied. The database is already up to date.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogNoMigrationsFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                No migrations were found in assembly '{migrationsAssembly}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogOpenedConnection(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Opened connection to database '{database}' on server '{server}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogOpeningConnection(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Opening connection to database '{database}' on server '{server}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogPossibleUnintendedUseOfEquals(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Possible unintended use of method Equals(object) for arguments '{left}' and '{right}' of different types in query. This comparison will always return 'false'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogQueryPossibleExceptionWithAggregateOperatorWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Possible unintended use of a potentially throwing aggregate method (Min, Max, Average) in a subquery. Client evaluation will be used and operator will throw if no data exists. Changing the subquery result type to a nullable type will allow full translation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogReleasedTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Released transaction savepoint.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogReleasingTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Releasing transaction savepoint.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogRevertingMigration(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Reverting migration '{migration}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogRolledBackToTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Rolled back to transaction savepoint.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogRolledBackTransaction(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Rolled back transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogRollingBackToTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Rolling back to transaction savepoint.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogRollingBackTransaction(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Rolling back transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogTransactionError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                An error occurred using a transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogUnnamedIndexAllPropertiesNotToMappedToAnyTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The unnamed index on the entity type '{entityType}' specifies properties {indexProperties}. None of these properties are mapped to a column in any table. This index will not be created in the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogUnnamedIndexPropertiesBothMappedAndNotMappedToTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The unnamed index on the entity type '{entityType}' specifies properties {indexProperties}. Some properties are mapped to a column in a table, but the property '{propertyName}' is not. All of the properties should be mapped for the index to be created in the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogUnnamedIndexPropertiesMappedToNonOverlappingTables(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                The unnamed index on the entity type '{entityType}' specifies properties {indexProperties}. The property '{propertyName1}' is mapped to table(s) {tableList1}, whereas the property '{propertyName2}' is mapped to table(s) {tableList2}. All index properties must map to at least one common table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.Internal.RelationalResources.LogUsingTransaction(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger)">
            <summary>
                Using an existing transaction with isolation level '{isolationLevel}'.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationAssemblyEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> migrations assembly events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.MigrationAssemblyEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="migrator"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrator" /> in use. </param>
            <param name="migrationsAssembly"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" /> in use. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MigrationAssemblyEventData.MigrationsAssembly">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" /> in use.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> events of a specific migration.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.MigrationEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="migrator">
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrator" /> in use.
            </param>
            <param name="migration">
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.MigrationEventData.Migration" /> being processed.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MigrationEventData.Migration">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.MigrationEventData.Migration" /> being processed.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationScriptingEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> migration scripting events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.MigrationScriptingEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration,System.String,System.String,System.Boolean)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="migrator">
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrator" /> in use.
            </param>
            <param name="migration">
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Migration" /> being processed.
            </param>
            <param name="fromMigration">
                The migration that scripting is starting from.
            </param>
            <param name="toMigration">
                The migration that scripting is going to.
            </param>
            <param name="idempotent">
                Indicates whether or not the script is idempotent.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MigrationScriptingEventData.FromMigration">
            <summary>
                The migration that scripting is starting from.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MigrationScriptingEventData.ToMigration">
            <summary>
                The migration that scripting is going to.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MigrationScriptingEventData.IsIdempotent">
            <summary>
                Indicates whether or not the script is idempotent.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationTypeEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> migration events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.MigrationTypeEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Reflection.TypeInfo)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="migrationType"> The migration type. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MigrationTypeEventData.MigrationType">
            <summary>
                The migration type.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.MigratorConnectionEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> migration connection events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.MigratorConnectionEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Migrations.IMigrator,System.Data.Common.DbConnection,System.Guid)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="migrator">
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrator" /> in use.
            </param>
            <param name="connection">
                The <see cref="T:System.Data.Common.DbConnection" />.
            </param>
            <param name="connectionId">
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MigratorConnectionEventData.Connection">
            <summary>
                The <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MigratorConnectionEventData.ConnectionId">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.MigratorEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> migration events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.MigratorEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Migrations.IMigrator)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="migrator">
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrator" /> in use.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MigratorEventData.Migrator">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrator" /> in use.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.MinBatchSizeEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> min batch size events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.MinBatchSizeEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32,System.Int32)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="entries"> The entries being updated. </param>
            <param name="commandCount"> The command count. </param>
            <param name="minBatchSize"> The minimum batch size. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.MinBatchSizeEventData.MinBatchSize">
            <summary>
                The minimum batch size.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId">
            <summary>
                <para>
                    Event IDs for relational events that correspond to messages logged to an <see cref="T:Microsoft.Extensions.Logging.ILogger" />
                    and events sent to a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
                <para>
                    These IDs are also used with <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.WarningsConfigurationBuilder" /> to configure the
                    behavior of warnings.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionOpening">
            <summary>
                <para>
                    A database connection is opening.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionOpened">
            <summary>
                <para>
                    A database connection has been opened.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionClosing">
            <summary>
                <para>
                    A database connection is closing.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionClosed">
            <summary>
                <para>
                    A database connection has been closed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEndEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionError">
            <summary>
                <para>
                    A error occurred while opening or using a database connection.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionErrorEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandCreating">
            <summary>
                <para>
                    A <see cref="T:System.Data.Common.DbCommand" /> is being created.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandCorrelatedEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandCreated">
            <summary>
                <para>
                    A <see cref="T:System.Data.Common.DbCommand" /> has been created.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandEndEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuting">
            <summary>
                <para>
                    A database command is executing.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuted">
            <summary>
                <para>
                    A database command has been executed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandExecutedEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandError">
            <summary>
                <para>
                    An error occurred while a database command was executing.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.CommandErrorEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionStarted">
            <summary>
                <para>
                    A database transaction has been started.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionStarting">
            <summary>
                <para>
                    A database transaction is starting.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionUsed">
            <summary>
                <para>
                    Entity Framework started using an already existing database transaction.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionCommitting">
            <summary>
                <para>
                    A database transaction is being committed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionCommitted">
            <summary>
                <para>
                    A database transaction has been committed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionRollingBack">
            <summary>
                <para>
                    A database transaction is being rolled back.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionRolledBack">
            <summary>
                <para>
                    A database transaction has been rolled back.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CreatingTransactionSavepoint">
            <summary>
                <para>
                    A database transaction savepoint is being created.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CreatedTransactionSavepoint">
            <summary>
                <para>
                    A database transaction savepoint has been created.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.RollingBackToTransactionSavepoint">
            <summary>
                <para>
                    A database transaction is being rolled back to a savepoint.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.RolledBackToTransactionSavepoint">
            <summary>
                <para>
                    A database transaction has been rolled back to a savepoint.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ReleasingTransactionSavepoint">
            <summary>
                <para>
                    A database transaction savepoint is being released.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ReleasedTransactionSavepoint">
            <summary>
                <para>
                    A database transaction savepoint has been released.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionDisposed">
            <summary>
                <para>
                    A database transaction has been disposed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionError">
            <summary>
                <para>
                    An error has occurred while using. committing, or rolling back a database transaction.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.AmbientTransactionWarning">
            <summary>
                <para>
                    An application may have expected an ambient transaction to be used when it was actually ignored.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ConnectionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.AmbientTransactionEnlisted">
            <summary>
                <para>
                    Entity Framework enlisted the connection in an ambient transaction.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ExplicitTransactionEnlisted">
            <summary>
                <para>
                    The connection was explicitly enlisted in a transaction.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.DataReaderDisposing">
            <summary>
                <para>
                    A database data reader has been disposed.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.DataReaderDisposingEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrateUsingConnection">
            <summary>
                <para>
                    Migrations is using a database connection.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.MigratorConnectionEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationReverting">
            <summary>
                <para>
                    A migration is being reverted.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationApplying">
            <summary>
                <para>
                    A migration is being applied.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationGeneratingDownScript">
            <summary>
                <para>
                    Migrations is generating a "down" script.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationScriptingEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationGeneratingUpScript">
            <summary>
                <para>
                    Migrations is generating an "up" script.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationScriptingEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationsNotApplied">
            <summary>
                <para>
                    Migrations weren't applied.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.MigratorEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationsNotFound">
            <summary>
                <para>
                    Migrations weren't found.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationAssemblyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationAttributeMissingWarning">
            <summary>
                <para>
                    A MigrationAttribute isn't specified on the class.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.MigrationTypeEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.QueryPossibleUnintendedUseOfEqualsWarning">
            <summary>
                <para>
                    A query is using equals comparisons in a possibly unintended way.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoSqlExpressionsEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.QueryPossibleExceptionWithAggregateOperatorWarning">
            <summary>
                <para>
                    A query is using a possibly throwing aggregate operation in a sub-query.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MultipleCollectionIncludeWarning">
            <summary>
                <para>
                    A query is loading multiple related collections without configuring a <see cref="T:Microsoft.EntityFrameworkCore.QuerySplittingBehavior" />.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Query" /> category.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ModelValidationKeyDefaultValueWarning">
            <summary>
                <para>
                    A single database default column value has been set on a key column.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BoolWithDefaultWarning">
            <summary>
                <para>
                    A bool property is configured with a store-generated default.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.PropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.AllIndexPropertiesNotToMappedToAnyTable">
            <summary>
                <para>
                    An index specifies properties all of which are not mapped to a column in any table.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IndexEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.IndexPropertiesBothMappedAndNotMappedToTable">
            <summary>
                <para>
                    An index specifies properties some of which are mapped and some of which are not mapped to a column in a table.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.IndexPropertiesMappedToNonOverlappingTables">
            <summary>
                <para>
                    An index specifies properties which map to columns on non-overlapping tables.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.IndexWithPropertiesEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ForeignKeyPropertiesMappedToUnrelatedTables">
            <summary>
                <para>
                    A foreign key specifies properties which don't map to the related tables.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.ForeignKeyEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BatchReadyForExecution">
            <summary>
                <para>
                    Update commands were batched and are now ready for execution
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.MinBatchSize(System.Int32)" />.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.BatchEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BatchSmallerThanMinBatchSize">
            <summary>
                <para>
                    Update commands were not batched because there were fewer than
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.MinBatchSize(System.Int32)" />.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
                </para>
                <para>
                    This event uses the <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.MinBatchSizeEventData" /> payload when used with a <see cref="T:System.Diagnostics.DiagnosticSource" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BatchExecutorFailedToRollbackToSavepoint">
            <summary>
                <para>
                    An error occurred while the batch executor was rolling back the transaction to a savepoint, after an exception occured.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BatchExecutorFailedToReleaseSavepoint">
            <summary>
                <para>
                    An error occurred while the batch executor was releasing a transaction savepoint.
                </para>
                <para>
                    This event is in the <see cref="T:Microsoft.EntityFrameworkCore.DbLoggerCategory.Update" /> category.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions">
            <summary>
                <para>
                    This class contains static methods used by EF Core internals and relational database providers to
                    write information to an <see cref="T:Microsoft.Extensions.Logging.ILogger" /> and a <see cref="T:System.Diagnostics.DiagnosticListener" /> for
                    well-known events.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandCreating(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandCreating" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="commandMethod"> The type of method that will be called on this command. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="startTime"> The time that execution began. </param>
            <returns> An intercepted result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandCreated(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandCreated" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="commandMethod"> The type of method that will be called on this command. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="duration"> The duration of the command creation. </param>
            <returns> An intercepted result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandReaderExecuting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="startTime"> The time that execution began. </param>
            <returns> An intercepted result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandScalarExecuting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="startTime"> The time that execution began. </param>
            <returns> An intercepted result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandNonQueryExecuting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="startTime"> The time that execution began. </param>
            <returns> An intercepted result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandReaderExecutingAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> An intercepted result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandScalarExecutingAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> An intercepted result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandNonQueryExecutingAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> An intercepted result. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandReaderExecuted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Data.Common.DbDataReader,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="methodResult"> The return value from the underlying method execution. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="duration"> The duration of the command execution, not including consuming results. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandScalarExecuted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Object,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="methodResult"> The return value from the underlying method execution. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="duration"> The duration of the command execution, not including consuming results. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandNonQueryExecuted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Int32,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="methodResult"> The return value from the underlying method execution. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="duration"> The duration of the command execution, not including consuming results. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandReaderExecutedAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Data.Common.DbDataReader,System.DateTimeOffset,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="methodResult"> The return value from the underlying method execution. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="duration"> The duration of the command execution, not including consuming results. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandScalarExecutedAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Object,System.DateTimeOffset,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="methodResult"> The return value from the underlying method execution. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="duration"> The duration of the command execution, not including consuming results. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandNonQueryExecutedAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Int32,System.DateTimeOffset,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandExecuted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="methodResult"> The return value from the underlying method execution. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="duration"> The duration of the command execution, not including consuming results. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Exception,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandError" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="executeMethod"> Represents the method that will be called to execute the command. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="exception"> The exception that caused this failure. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="duration"> The amount of time that passed until the exception was raised. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CommandErrorAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod,System.Guid,System.Guid,System.Exception,System.DateTimeOffset,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CommandError" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, to null if not known. </param>
            <param name="executeMethod"> Represents the method that will be called to execute the command. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="connectionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbConnection" /> being used. </param>
            <param name="exception"> The exception that caused this failure. </param>
            <param name="startTime"> The time that execution began. </param>
            <param name="duration"> The amount of time that passed until the exception was raised. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionOpening(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionOpening" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionOpeningAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionOpening" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionOpened(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionOpened" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The amount of time before the connection was opened. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionOpenedAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionOpened" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The amount of time before the connection was opened. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionClosing(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionClosing" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionClosingAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionClosing" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionClosed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionClosed" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The amount of time before the connection was closed. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionClosedAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionClosed" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The amount of time before the connection was closed. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Exception,System.DateTimeOffset,System.TimeSpan,System.Boolean)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionError" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="exception"> The exception representing the error. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The elapsed time before the operation failed. </param>
            <param name="logErrorAsDebug"> A flag indicating the exception is being handled and so it should be logged at Debug level. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ConnectionErrorAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Exception,System.DateTimeOffset,System.TimeSpan,System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ConnectionError" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="exception"> The exception representing the error. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The elapsed time before the operation failed. </param>
            <param name="logErrorAsDebug"> A flag indicating the exception is being handled and so it should be logged at Debug level. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionStarting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.IsolationLevel,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionStarting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="isolationLevel"> The transaction isolation level. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionStartingAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.IsolationLevel,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionStarting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="isolationLevel"> The transaction isolation level. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionStarted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionStarted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The amount of time before the connection was opened. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionStartedAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionStarted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The amount of time before the connection was opened. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionUsed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionUsed" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionUsedAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionUsed" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionCommitting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionCommitting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionCommittingAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionCommitting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionCommitted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionCommitted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The elapsed time from when the operation was started. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionCommittedAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionCommitted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The elapsed time from when the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionRolledBack(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionRolledBack" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The elapsed time from when the operation was started. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionRolledBackAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionRolledBack" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The elapsed time from when the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionRollingBack(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionRollingBack" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionRollingBackAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionRollingBack" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CreatingTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CreatingTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CreatingTransactionSavepointAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CreatingTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CreatedTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CreatedTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.CreatedTransactionSavepointAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CreatedTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.RollingBackToTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.RollingBackToTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.RollingBackToTransactionSavepointAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.RollingBackToTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.RolledBackToTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.RolledBackToTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.RolledBackToTransactionSavepointAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.CreatedTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ReleasingTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.RollingBackToTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ReleasingTransactionSavepointAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ReleasingTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ReleasedTransactionSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ReleasedTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ReleasedTransactionSavepointAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ReleasedTransactionSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionDisposed(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionDisposed" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="startTime"> The time that the operation was started. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionError(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.String,System.Exception,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionError" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="action"> The action being taken. </param>
            <param name="exception"> The exception that represents the error. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The elapsed time from when the operation was started. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.TransactionErrorAsync(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,System.String,System.Exception,System.DateTimeOffset,System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.TransactionError" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
            <param name="transactionId"> The correlation ID associated with the <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="action"> The action being taken. </param>
            <param name="exception"> The exception that represents the error. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The elapsed time from when the operation was started. </param>
            <param name="cancellationToken"> The cancellation token. </param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> representing the async operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.AmbientTransactionWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.DateTimeOffset)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.AmbientTransactionWarning" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="startTime"> The time that the operation was started. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.AmbientTransactionEnlisted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Transactions.Transaction)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.AmbientTransactionEnlisted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ExplicitTransactionEnlisted(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Transactions.Transaction)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ExplicitTransactionEnlisted" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="transaction"> The transaction. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.DataReaderDisposing(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Guid,System.Int32,System.Int32,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.DataReaderDisposing" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="connection"> The connection. </param>
            <param name="command"> The database command object. </param>
            <param name="dataReader"> The data reader. </param>
            <param name="commandId"> The correlation ID associated with the given <see cref="T:System.Data.Common.DbCommand" />. </param>
            <param name="recordsAffected"> The number of records in the database that were affected. </param>
            <param name="readCount"> The number of records that were read. </param>
            <param name="startTime"> The time that the operation was started. </param>
            <param name="duration"> The elapsed time from when the operation was started. </param>
            <returns> The result of execution, which may have been modified by an interceptor. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.MigrateUsingConnection(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrateUsingConnection" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="migrator"> The migrator. </param>
            <param name="connection"> The connection. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.MigrationReverting(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationReverting" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="migrator"> The migrator. </param>
            <param name="migration"> The migration. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.MigrationApplying(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationApplying" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="migrator"> The migrator. </param>
            <param name="migration"> The migration. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.MigrationGeneratingDownScript(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration,System.String,System.String,System.Boolean)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationGeneratingDownScript" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="migrator"> The migrator. </param>
            <param name="migration"> The migration. </param>
            <param name="fromMigration"> The starting migration name. </param>
            <param name="toMigration"> The ending migration name. </param>
            <param name="idempotent"> Indicates whether or not an idempotent script is being generated. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.MigrationGeneratingUpScript(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.Migration,System.String,System.String,System.Boolean)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationGeneratingUpScript" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="migrator"> The migrator. </param>
            <param name="migration"> The migration. </param>
            <param name="fromMigration"> The starting migration name. </param>
            <param name="toMigration"> The ending migration name. </param>
            <param name="idempotent"> Indicates whether or not an idempotent script is being generated. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.MigrationsNotApplied(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationsNotApplied" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="migrator"> The migrator. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.MigrationsNotFound(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Migrations.IMigrator,Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationsNotFound" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="migrator"> The migrator. </param>
            <param name="migrationsAssembly"> The assembly in which migrations are stored. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.MigrationAttributeMissingWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},System.Reflection.TypeInfo)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MigrationAttributeMissingWarning" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="migrationType"> Info for the migration type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.QueryPossibleUnintendedUseOfEqualsWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.QueryPossibleUnintendedUseOfEqualsWarning" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="left"> The left SQL expression of the Equals. </param>
            <param name="right"> The right SQL expression of the Equals. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.QueryPossibleExceptionWithAggregateOperatorWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.QueryPossibleExceptionWithAggregateOperatorWarning" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.MultipleCollectionIncludeWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.MultipleCollectionIncludeWarning" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ModelValidationKeyDefaultValueWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.ModelValidationKeyDefaultValueWarning" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="property"> The property. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.BoolWithDefaultWarning(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BoolWithDefaultWarning" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="property"> The property. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.BatchReadyForExecution(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BatchReadyForExecution" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="entries"> The entries for entities in the batch. </param>
            <param name="commandCount"> The number of commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.BatchSmallerThanMinBatchSize(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Int32,System.Int32)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BatchSmallerThanMinBatchSize" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="entries"> The entries for entities in the batch. </param>
            <param name="commandCount"> The number of commands. </param>
            <param name="minBatchSize"> The minimum batch size. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.AllIndexPropertiesNotToMappedToAnyTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Logs the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.AllIndexPropertiesNotToMappedToAnyTable" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="entityType"> The entity type on which the index is defined. </param>
            <param name="index"> The index on the entity type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.IndexPropertiesBothMappedAndNotMappedToTable(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IIndex,System.String)">
            <summary>
                Logs the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.IndexPropertiesBothMappedAndNotMappedToTable" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="entityType"> The entity type on which the index is defined. </param>
            <param name="index"> The index on the entity type. </param>
            <param name="unmappedPropertyName"> The name of the property which is not mapped. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.IndexPropertiesMappedToNonOverlappingTables(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IIndex,System.String,System.Collections.Generic.List{System.ValueTuple{System.String,System.String}},System.String,System.Collections.Generic.List{System.ValueTuple{System.String,System.String}})">
            <summary>
                Logs the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.IndexPropertiesMappedToNonOverlappingTables" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="entityType"> The entity type on which the index is defined. </param>
            <param name="index"> The index on the entity type. </param>
            <param name="property1Name"> The first property name which is invalid. </param>
            <param name="tablesMappedToProperty1"> The tables mapped to the first property. </param>
            <param name="property2Name"> The second property name which is invalid. </param>
            <param name="tablesMappedToProperty2"> The tables mapped to the second property. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.ForeignKeyPropertiesMappedToUnrelatedTables(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation},Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                Logs the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.IndexPropertiesMappedToNonOverlappingTables" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="foreignKey"> The foreign key. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.BatchExecutorFailedToRollbackToSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Type,System.Exception)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BatchExecutorFailedToRollbackToSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="contextType"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type being used. </param>
            <param name="exception"> The exception that caused this failure. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggerExtensions.BatchExecutorFailedToReleaseSavepoint(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},System.Type,System.Exception)">
            <summary>
                Logs for the <see cref="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId.BatchExecutorFailedToReleaseSavepoint" /> event.
            </summary>
            <param name="diagnostics"> The diagnostics logger to use. </param>
            <param name="contextType"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> type being used. </param>
            <param name="exception"> The exception that caused this failure. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions">
            <summary>
                <para>
                    Contains placeholders for caching of <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase" />.
                </para>
                <para>
                    This class is public so that it can be inherited by database providers
                    to add caching for their events. It should not be used for any other purpose.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogTransactionError">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogBoolWithDefaultWarning">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogOpeningConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogOpenedConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogClosingConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogClosedConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogConnectionError">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogBeginningTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogBeganTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogUsingTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogCommittingTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogRollingBackTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogCommittedTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogRolledBackTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogCreatingTransactionSavepoint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogRollingBackToTransactionSavepoint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogCreatedTransactionSavepoint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogRolledBackToTransactionSavepoint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogReleasingTransactionSavepoint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogReleasedTransactionSavepoint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogDisposingTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogDisposingDataReader">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogAmbientTransaction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogPossibleUnintendedUseOfEquals">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogQueryPossibleExceptionWithAggregateOperatorWarning">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogGeneratingDown">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogGeneratingUp">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogApplyingMigration">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogRevertingMigration">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogMigrating">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogNoMigrationsApplied">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogNoMigrationsFound">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogKeyHasDefaultValue">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogCommandCreating">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogCommandCreated">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogExecutingCommand">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogExecutedCommand">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogCommandFailed">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogConnectionErrorAsDebug">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogAmbientTransactionEnlisted">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogExplicitTransactionEnlisted">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogBatchSmallerThanMinBatchSize">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogBatchReadyForExecution">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogMigrationAttributeMissingWarning">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogNamedIndexAllPropertiesNotToMappedToAnyTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogUnnamedIndexAllPropertiesNotToMappedToAnyTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogNamedIndexPropertiesBothMappedAndNotMappedToTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogUnnamedIndexPropertiesBothMappedAndNotMappedToTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogNamedIndexPropertiesMappedToNonOverlappingTables">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogUnnamedIndexPropertiesMappedToNonOverlappingTables">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogForeignKeyPropertiesMappedToUnrelatedTables">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogMultipleCollectionIncludeWarning">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogBatchExecutorFailedToRollbackToSavepoint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Diagnostics.RelationalLoggingDefinitions.LogBatchExecutorFailedToReleaseSavepoint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.SequenceEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload base class for events that
                reference a sequence.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.SequenceEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Metadata.ISequence)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="sequence"> The sequence. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.SequenceEventData.Sequence">
            <summary>
                The sequence.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload base class for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> transaction end events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Boolean,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="transaction"> The <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, or <see langword="null" /> if not known. </param>
            <param name="transactionId"> A correlation ID that identifies the Entity Framework transaction being used. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="async"> Indicates whether or not the transaction is being used asynchronously. </param>
            <param name="startTime"> The start time of this event. </param>
            <param name="duration"> The duration this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEndEventData.Duration">
            <summary>
                The duration of this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> transaction enlisted events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Transactions.Transaction,System.Data.Common.DbConnection,System.Guid)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="transaction"> The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData.Transaction" />. </param>
            <param name="connection"> The <see cref="T:System.Data.Common.DbConnection" />. </param>
            <param name="connectionId">
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData.Transaction">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData.Transaction" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData.Connection">
            <summary>
                The <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEnlistedEventData.ConnectionId">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload base class for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> transaction error events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Boolean,System.String,System.Exception,System.DateTimeOffset,System.TimeSpan)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="transaction"> The <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently being used, or <see langword="null" /> if not known. </param>
            <param name="transactionId"> A correlation ID that identifies the Entity Framework transaction being used. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="async"> Indicates whether or not the transaction is being used asynchronously. </param>
            <param name="action"> One of "Commit" or "Rollback". </param>
            <param name="exception"> The exception that was thrown when the transaction failed. </param>
            <param name="startTime"> The start time of this event. </param>
            <param name="duration"> The duration this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData.Action">
            <summary>
                One of "Commit" or "Rollback".
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionErrorEventData.Exception">
            <summary>
                The exception that was thrown when the transaction failed.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload base class for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> transaction events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},System.Data.Common.DbTransaction,Microsoft.EntityFrameworkCore.DbContext,System.Guid,System.Guid,System.Boolean,System.DateTimeOffset)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="transaction"> The <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently in use, or null if not known. </param>
            <param name="transactionId"> A correlation ID that identifies the Entity Framework transaction being used. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="async"> Indicates whether or not the transaction is being used asynchronously. </param>
            <param name="startTime"> The start time of this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData.Transaction">
            <summary>
                The <see cref="T:System.Data.Common.DbTransaction" />, or null if it has not yet been created.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData.TransactionId">
            <summary>
                A correlation ID that identifies the Entity Framework transaction being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData.ConnectionId">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData.IsAsync">
            <summary>
                Indicates whether or not the transaction is being used asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionEventData.StartTime">
            <summary>
                The start time of this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload base class for
                <see cref="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalEventId" /> transaction events.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.DbContext,System.Data.IsolationLevel,System.Guid,System.Guid,System.Boolean,System.DateTimeOffset)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="context"> The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently in use, or <see langword="null" /> if not known. </param>
            <param name="isolationLevel"> The transaction isolation level. </param>
            <param name="transactionId"> A correlation ID that identifies the Entity Framework transaction being used. </param>
            <param name="connectionId"> A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used. </param>
            <param name="async"> Indicates whether or not the transaction is being used asynchronously. </param>
            <param name="startTime"> The start time of this event. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData.IsolationLevel">
            <summary>
                The transaction isolation level.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData.TransactionId">
            <summary>
                A correlation ID that identifies the Entity Framework transaction being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData.ConnectionId">
            <summary>
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbConnection" /> instance being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData.IsAsync">
            <summary>
                Indicates whether or not the transaction is being used asynchronously.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TransactionStartingEventData.StartTime">
            <summary>
                The start time of this event.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.TwoSqlExpressionsEventData">
            <summary>
                The <see cref="T:System.Diagnostics.DiagnosticSource" /> event payload base class for events that
                references two <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.TwoSqlExpressionsEventData.#ctor(Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,System.Func{Microsoft.EntityFrameworkCore.Diagnostics.EventDefinitionBase,Microsoft.EntityFrameworkCore.Diagnostics.EventData,System.String},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Constructs the event payload.
            </summary>
            <param name="eventDefinition"> The event definition. </param>
            <param name="messageGenerator"> A delegate that generates a log message for this event. </param>
            <param name="left"> The left SqlExpression. </param>
            <param name="right"> The right SqlExpression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TwoSqlExpressionsEventData.Left">
            <summary>
                The left SqlExpression.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.TwoSqlExpressionsEventData.Right">
            <summary>
                The right SqlExpression.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings">
            <summary>
                <para>
            	    String resources used in EF exceptions, etc.
                </para>
                <para>
            	    These strings are exposed publicly for use by database providers and extensions.
                    It is unusual for application code to need these strings.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.BadSequenceString">
            <summary>
                Unable to deserialize sequence from model metadata. See inner exception for details.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.BadSequenceType">
            <summary>
                Invalid type for sequence. Valid types are 'Int64' (the default), 'Int32', 'Int16', 'Byte' and 'Decimal'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.CannotChangeWhenOpen">
            <summary>
                The 'DbConnection' is currently in use. The connection can only be changed when the existing connection is not being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ClientGroupByNotSupported">
            <summary>
                Unable to translate the given 'GroupBy' pattern. Call 'AsEnumerable' before 'GroupBy' to evaluate it client-side.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ComputedColumnSqlUnspecified(System.Object,System.Object)">
            <summary>
                The column '{column}' on table '{table}' has unspecified computed column SQL. Specify the SQL before using Entity Framework to create the database schema.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ConflictingAmbientTransaction">
            <summary>
                An ambient transaction has been detected. The ambient transaction needs to be completed before beginning a transaction on this connection.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ConflictingColumnServerGeneration(System.Object,System.Object,System.Object)">
            <summary>
                {conflictingConfiguration} cannot be set for '{property}' at the same time as {existingConfiguration}. Remove one of these values.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ConflictingEnlistedTransaction">
            <summary>
                The connection is currently enlisted in a transaction. The enlisted transaction needs to be completed before starting a transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ConflictingOriginalRowValues(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                An instance of entity type '{firstEntityType}' and an instance of entity type '{secondEntityType}' are mapped to the same row, but have different original property values for the properties {firstProperty} and {secondProperty} mapped to '{column}'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ConflictingOriginalRowValuesSensitive(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The instance of entity type '{firstEntityType}' and the instance of entity type '{secondEntityType}' are mapped to the same row with the key value '{keyValue}', but have different original property values {firstConflictingValues} and {secondConflictingValues} for the column '{column}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ConflictingRowUpdateTypes(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                An instance of entity type '{firstEntityType}' is marked as '{firstState}', but an instance of entity type '{secondEntityType}' is marked as '{secondState}' and both are mapped to the same row. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the key values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ConflictingRowUpdateTypesSensitive(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The instance of entity type '{firstEntityType}' with the key value '{firstKeyValue}' is marked as '{firstState}', but the instance of entity type '{secondEntityType}' with the key value '{secondKeyValue}' is marked as '{secondState}' and both are mapped to the same row.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ConflictingRowValues(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                An instance of entity type '{firstEntityType}' and an instance of entity type '{secondEntityType}' are mapped to the same row, but have different property values for the properties {firstProperty} and {secondProperty} mapped to '{column}'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ConflictingRowValuesSensitive(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The instance of entity type '{firstEntityType}' and the instance of entity type '{secondEntityType}' are mapped to the same row with the key value '{keyValue}', but have different property values '{firstConflictingValue}' and '{secondConflictingValue}' for the column '{column}'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DatabaseModelMissing">
            <summary>
                The database model hasn't been initialized. The model needs to be finalized before the database model can be accessed.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DataOperationNoProperty(System.Object,System.Object)">
            <summary>
                There is no property mapped to the column '{table}.{column}' used in a data operation. Either add a property mapped to this column or specify the column types in the data operation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DataOperationNoTable(System.Object)">
            <summary>
                There is no entity type mapped to the table '{table}' used in a data operation. Either add the corresponding entity type to the model or specify the column types in the data operation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionExpressionIsNotMethodCall(System.Object)">
            <summary>
                The provided DbFunction expression '{expression}' is invalid. The expression should be a lambda expression containing a single method call to the target static method. Default values can be provided as arguments if required. E.g. () =&gt; SomeClass.SomeMethod(null, 0)
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionGenericMethodNotSupported(System.Object)">
            <summary>
                The DbFunction '{function}' is generic. Mapping generic methods as a DbFunction is not supported.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionInvalidInstanceType(System.Object,System.Object)">
            <summary>
                The DbFunction '{function}' defined on type '{type}' must be either a static method or an instance method defined on a DbContext subclass. Instance methods on other types are not supported.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionInvalidIQueryableOwnedReturnType(System.Object,System.Object)">
            <summary>
                The DbFunction '{function}' has an invalid return type '{type}'. Owned entity types cannot be used as the return type of a DbFunction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionInvalidIQueryableReturnType(System.Object,System.Object)">
            <summary>
                The DbFunction '{function}' has an invalid return type '{type}'. Non-scalar functions must return 'IQueryable' of a valid entity type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionInvalidParameterName(System.Object,System.Object)">
            <summary>
                The DbFunction '{function}' does not have a parameter named '{parameter}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionInvalidParameterType(System.Object,System.Object,System.Object)">
            <summary>
                The parameter '{parameter}' for the DbFunction '{function}' has an invalid type '{type}'. Ensure the parameter type can be mapped by the current provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionInvalidReturnEntityType(System.Object,System.Object,System.Object)">
            <summary>
                The DbFunction '{function}' returns '{type}', but '{elementType}' is not a mapped entity type. Ensure that '{elementType}' is included in the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionInvalidReturnType(System.Object,System.Object)">
            <summary>
                The DbFunction '{function}' has an invalid return type '{type}'. Ensure that the return type can be mapped by the current provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DbFunctionNonScalarCustomTranslation(System.Object)">
            <summary>
                Cannot set custom translation on the DbFunction '{function}' since it is not a scalar function.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DefaultValueSqlUnspecified(System.Object,System.Object)">
            <summary>
                The column '{column}' on table '{table}' has unspecified default value SQL. Specify the SQL before using Entity Framework to create the database schema.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DefaultValueUnspecified(System.Object,System.Object)">
            <summary>
                The column '{column}' on table '{table}' has an unspecified default value. Specify a value before using Entity Framework to create the database schema.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DeleteDataOperationNoModel(System.Object)">
            <summary>
                The data deletion operation on '{table}' is not associated with a model. Either add a model to the migration or specify the column types in all data operations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DeleteDataOperationTypesCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The number of key column types ({typesCount}) doesn't match the number of key columns ({columnsCount}) for the data deletion operation on '{table}'. Provide the same number of key column types and key columns.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DeleteDataOperationValuesCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The number of key values ({valuesCount}) doesn't match the number of key columns ({columnsCount}) for the data deletion operation on '{table}'. Provide the same number of key values and key columns.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DerivedTypeTable(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' cannot be mapped to a table because it is derived from '{baseType}'. Only base entity types can be mapped to a table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateCheckConstraint(System.Object,System.Object)">
            <summary>
                The check constraint '{checkConstraint}' cannot be added to the entity type '{entityType}' because another check constraint with the same name already exists.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameCollationMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different collations ('{collation1}' and '{collation2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameCommentMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different comments ('{comment1}' and '{comment2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameComputedSqlMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different computed values ('{value1}' and '{value2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameConcurrencyTokenMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different concurrency token configuration.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameDataTypeMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different data types ('{dataType1}' and '{dataType2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameDefaultSqlMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different default values ('{value1}' and '{value2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameFixedLengthMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different fixed length configuration.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameIsStoredMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured to use different stored computed column settings ('{value1}' and '{value2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameMaxLengthMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different max lengths ('{maxLength1}' and '{maxLength2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameNullabilityMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different nullability.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNamePrecisionMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different precision ('{precision1}' and '{precision2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameScaleMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different scale ('{scale1}' and '{scale2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateColumnNameUnicodenessMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType1}.{property1}' and '{entityType2}.{property2}' are both mapped to column '{columnName}' in '{table}' but are configured with different unicode configuration
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateForeignKeyColumnMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The foreign keys {foreignKeyProperties1} on '{entityType1}' and {foreignKeyProperties2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but use different columns ({columnNames1} and {columnNames2}).
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateForeignKeyDeleteBehaviorMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The foreign keys {foreignKeyProperties1} on '{entityType1}' and {foreignKeyProperties2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but with different delete behavior ('{deleteBehavior1}' and '{deleteBehavior2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateForeignKeyPrincipalColumnMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The foreign keys {foreignKeyProperties1} on '{entityType1}' and {foreignKeyProperties2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but referencing different principal columns ({principalColumnNames1} and {principalColumnNames2}).
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateForeignKeyPrincipalTableMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The foreign keys {foreignKeyProperties1} on '{entityType1}' and {foreignKeyProperties2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but referencing different principal tables ('{principalTable1}' and '{principalTable2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateForeignKeyTableMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The foreign keys {foreignKeyProperties1} on '{entityType1}' and {foreignKeyProperties2} on '{entityType2}' are both mapped to '{foreignKeyName}' but are declared on different tables ('{table1}' and '{table2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateForeignKeyUniquenessMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The foreign keys {foreignKeyProperties1} on '{entityType1}' and {foreignKeyProperties2} on '{entityType2}' are both mapped to '{table}.{foreignKeyName}' but with different uniqueness.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateIndexColumnMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The indexes {indexProperties1} on '{entityType1}' and {indexProperties2} on '{entityType2}' are both mapped to '{table}.{indexName}' but with different columns ({columnNames1} and {columnNames2}).
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateIndexTableMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The indexes {indexProperties1} on '{entityType1}' and {indexProperties2} on '{entityType2}' are both mapped to '{indexName}' but are declared on different tables ('{table1}' and '{table2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateIndexUniquenessMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The indexes {indexProperties1} on '{entityType1}' and {indexProperties2} on '{entityType2}' are both mapped to '{table}.{indexName}' but with different uniqueness.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateKeyColumnMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The keys {keyProperties1} on '{entityType1}' and {keyProperties2} on '{entityType2}' are both mapped to '{table}.{keyName}' but with different columns ({columnNames1} and {columnNames2}).
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.DuplicateKeyTableMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The keys {keyProperties1} on '{entityType1}' and {keyProperties2} on '{entityType2}' are both mapped to '{keyName}' but on different tables ('{table1}' and '{table2}').
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.EitherOfTwoValuesMustBeNull(System.Object,System.Object)">
            <summary>
                Either {param1} or {param2} must be null.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ErrorMaterializingProperty(System.Object,System.Object)">
            <summary>
                An error occurred while reading a database value for property '{entityType}.{property}'. See the inner exception for more information.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ErrorMaterializingPropertyNullReference(System.Object,System.Object,System.Object)">
            <summary>
                An error occurred while reading a database value for property '{entityType}.{property}'. The expected type was '{expectedType}' but the actual value was null.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ErrorMaterializingValue">
            <summary>
                An error occurred while reading a database value. See the inner exception for more information.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ErrorMaterializingValueInvalidCast(System.Object,System.Object)">
            <summary>
                An error occurred while reading a database value. The expected type was '{expectedType}' but the actual value was of type '{actualType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ErrorMaterializingValueNullReference(System.Object)">
            <summary>
                An error occurred while reading a database value. The expected type was '{expectedType}' but the actual value was null.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.FromSqlMissingColumn(System.Object)">
            <summary>
                The required column '{column}' was not present in the results of a 'FromSql' operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.FromSqlNonComposable">
            <summary>
                'FromSqlRaw' or 'FromSqlInterpolated' was called with non-composable SQL and with a query composing over it. Consider calling 'AsEnumerable' after the method to perform the composition on the client side.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.FunctionOverrideMismatch(System.Object,System.Object)">
            <summary>
                The property '{propertySpecification}' has specific configuration for the function '{function}', however it isn't mapped to a column on that function return. Remove the specific configuration or map an entity type that contains this property to '{function}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.IncompatibleTableCommentMismatch(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and the comment '{comment}' does not match the comment '{otherComment}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.IncompatibleTableDerivedRelationship(System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}', there is a relationship between their primary keys in which '{entityType}' is the dependent and '{entityType}' has a base entity type mapped to a different table. Either map '{otherEntityType}' to a different table or invert the relationship between '{entityType}' and '{otherEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.IncompatibleTableExcludedMismatch(System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and it excluded from migration on one entity type, but not the other. Exclude the table from migrations on all entity types mapped to the table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.IncompatibleTableKeyNameMismatch(System.Object,System.Object,System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and the name '{keyName}' of the primary key {primaryKey} does not match the name '{otherName}' of the primary key {otherPrimaryKey}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.IncompatibleTableNoRelationship(System.Object,System.Object,System.Object)">
            <summary>
                Cannot use table '{table}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and potentially other entity types, but there is no linking relationship. Add a foreign key to '{entityType}' on the primary key properties and pointing to the primary key on another entity typed mapped to '{table}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.IncompatibleViewDerivedRelationship(System.Object,System.Object,System.Object)">
            <summary>
                Cannot use view '{view}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}', there is a relationship between their primary keys in which '{entityType}' is the dependent and '{entityType}' has a base entity type mapped to a different view. Either map '{otherEntityType}' to a different view or invert the relationship between '{entityType}' and '{otherEntityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.IncompatibleViewNoRelationship(System.Object,System.Object,System.Object)">
            <summary>
                Cannot use view '{view}' for entity type '{entityType}' since it is being used for entity type '{otherEntityType}' and there is no relationship between their primary keys.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.IncorrectDefaultValueType(System.Object,System.Object,System.Object,System.Object,System.Object)">
            <summary>
                Cannot set default value '{value}' of type '{valueType}' on property '{property}' of type '{propertyType}' in entity type '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InsertDataOperationNoModel(System.Object)">
            <summary>
                The data insertion operation on '{table}' is not associated with a model. Either add a model to the migration or specify the column types in all data operations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InsertDataOperationTypesCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The number of column types ({typesCount}) doesn't match the number of columns ({columnsCount}) for the data insertion operation on '{table}'. Provide the same number of column types and columns.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InsertDataOperationValuesCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The number of values ({valuesCount}) doesn't match the number of columns ({columnsCount}) for the data insertion operation on '{table}'. Provide the same number of values and columns.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InsufficientInformationToIdentifyOuterElementOfCollectionJoin">
            <summary>
                Unable to translate collection subquery in projection since the parent query doesn't project key columns of all of it's tables which are required to generate results on client side. This can happen when trying to correlate on keyless entity or when using 'Distinct' or 'GroupBy' operations without projecting all of the key columns.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InvalidCommandTimeout">
            <summary>
                The specified CommandTimeout value is not valid. It must be a positive number.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InvalidDerivedTypeInEntityProjection(System.Object,System.Object)">
            <summary>
                The specified entity type '{derivedType}' is not derived from '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InvalidKeySelectorForGroupBy(System.Object,System.Object)">
            <summary>
                The grouping key '{keySelector}' is of type '{keyType}' which is not valid key. 
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InvalidMappedFunctionDerivedType(System.Object,System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' is mapped to the DbFunction named '{functionName}' and it's derived from '{baseEntityType}'. Derived entity types cannot be mapped to a function.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InvalidMappedFunctionUnmatchedReturn(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' is mapped to the DbFunction named '{functionName}' with return type '{returnType}'. Ensure that mapped function returns `IQueryable&lt;{clrType}&gt;`.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InvalidMappedFunctionWithParameters(System.Object,System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' is mapped to the DbFunction named '{functionName}' with parameters {parameters}. Ensure that mapped function doesn't have any parameters.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InvalidMappedSqlQueryDerivedType(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' is mapped to a SQL query and it's derived from '{baseEntityType}'. Derived entity types cannot be mapped to a different SQL query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InvalidMaxBatchSize">
            <summary>
                The specified MaxBatchSize value is not valid. It must be a positive number.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.InvalidMinBatchSize">
            <summary>
                The specified MinBatchSize value is not valid. It must be a positive number.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.LastUsedWithoutOrderBy(System.Object)">
            <summary>
                Queries performing '{method}' operation must have a deterministic sort order. Rewrite the query to apply an 'OrderBy' clause on the sequence before calling '{method}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.MappedFunctionNotFound(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' is mapped to the DbFunction named '{functionName}', but no DbFunction with that name was found in the model. Ensure that the entity type mapping is configured using the model name of a function in the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.MethodOnNonTPHRootNotSupported(System.Object,System.Object)">
            <summary>
                Using '{methodName}' on DbSet of '{entityType}' is not supported since '{entityType}' is part of hierarchy and does not contain a discriminator property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.MigrationNotFound(System.Object)">
            <summary>
                The migration '{migrationName}' was not found.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.MissingConcurrencyColumn(System.Object,System.Object,System.Object)">
            <summary>
                Entity type '{entityType}' doesn't contain a property mapped to the store-generated concurrency token column '{missingColumn}' that is used by another entity type sharing the table '{table}'. Add a store-generated property mapped to the same column to '{entityType}'. It can be in shadow state.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.MissingIdentifyingProjectionInDistinctGroupBySubquery(System.Object)">
            <summary>
                Unable to translate collection subquery in projection since it uses 'Distinct' or 'Group By' operations and doesn't project key columns of all of it's tables which are required to generate results on client side. Missing column: {column}. Either add column(s) to the projection or rewrite query to not use 'GroupBy'/'Distinct' operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.MissingOrderingInSelectExpression">
            <summary>
                Reverse could not be translated to the server because there is no ordering on the server side.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.MissingParameterValue(System.Object)">
            <summary>
                No value provided for required parameter '{parameter}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ModificationCommandInvalidEntityState(System.Object)">
            <summary>
                Cannot save changes for an entity in state '{entityState}'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.MultipleProvidersConfigured">
            <summary>
                Multiple relational database provider configurations found. A context can only be configured to use a single database provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NamedConnectionStringNotFound(System.Object)">
            <summary>
                A named connection string was used, but the name '{name}' was not found in the application's configuration. Note that named connection strings are only supported when using 'IConfiguration' and a service provider, such as in a typical ASP.NET Core application. See https://go.microsoft.com/fwlink/?linkid=850912 for more information.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NestedAmbientTransactionError">
            <summary>
                Root ambient transaction was completed before the nested transaction. The more nested transactions should be completed first.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NoActiveTransaction">
            <summary>
                The connection does not have any active transactions.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NoConnectionOrConnectionString">
            <summary>
                A relational store has been configured without specifying either the DbConnection or connection string to use.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NoDbCommand">
            <summary>
                Cannot create a 'DbCommand' for a non-relational query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NoneRelationalTypeMappingOnARelationalTypeMappingSource">
            <summary>
                FindMapping on a 'RelationalTypeMappingSource' with a non-relational 'TypeMappingInfo'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NonScalarFunctionCannotBeNullable(System.Object)">
            <summary>
                Cannot set 'IsNullable' on DbFunction '{functionName}' since the function does not represent a scalar function.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NonScalarFunctionParameterCannotPropagatesNullability(System.Object,System.Object)">
            <summary>
                Cannot set 'PropagatesNullability' on parameter '{parameterName}' of DbFunction '{functionName}' since function does not represent a scalar function.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NonTPHTableClash(System.Object,System.Object,System.Object)">
            <summary>
                Both '{entityType}' and '{otherEntityType}' are mapped to the table '{table}'. All the entity types in a hierarchy that don't have a discriminator must be mapped to different tables. See https://go.microsoft.com/fwlink/?linkid=2130430 for more information.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NonTPHViewClash(System.Object,System.Object,System.Object)">
            <summary>
                Both '{entityType}' and '{otherEntityType}' are mapped to the view '{view}'. All the entity types in a hierarchy that don't have a discriminator must be mapped to different views. See https://go.microsoft.com/fwlink/?linkid=2130430 for more information.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NoProviderConfigured">
            <summary>
                No relational database providers are configured. Configure a database provider using 'OnConfiguring' or by creating an ImmutableDbContextOptions with a database provider configured and passing it to the context.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.NullTypeMappingInSqlTree(System.Object)">
            <summary>
                Expression '{sqlExpression}' in SQL tree does not have type mapping assigned.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ParameterNotObjectArray(System.Object)">
            <summary>
                Cannot use the value provided for parameter '{parameter}' because it isn't assignable to type object[].
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.PendingAmbientTransaction">
            <summary>
                This connection was used with an ambient transaction. The original ambient transaction needs to be completed before this connection can be used outside of it.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ProjectionMappingCountMismatch">
            <summary>
                Unable to translate set operation when both sides don't assign values to same properties in the nominal type. Please make sure that the properties are inclued on both sides, consider assigning default value if the property doesn't require a specific value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.PropertyNotMappedToTable(System.Object,System.Object,System.Object)">
            <summary>
                The property '{property}' on entity type '{entityType}' is not mapped to the table '{table}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ReadonlyEntitySaved(System.Object)">
            <summary>
                The entity type '{entityType}' is not mapped to a table, therefore the entities cannot be persisted to the database. Use 'ToTable' in 'OnModelCreating' to map it.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.RelationalNotInUse">
            <summary>
                Relational-specific methods can only be used when the context is using a relational database provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.SelectExpressionNonTPHWithCustomTable(System.Object)">
            <summary>
                Cannot create 'SelectExpression' with custom 'TableExpressionBase' since result type '{entityType}' is part of hierarchy and does not contain a discriminator property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.SetOperationsNotAllowedAfterClientEvaluation">
            <summary>
                Unable to  translate set operation after client projection has been applied. Consider moving the set operation before the last 'Select' call.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.SetOperationsOnDifferentStoreTypes">
            <summary>
                Unable to translate set operation when matching columns on both sides have different store types.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.SplitQueryString">
            <summary>
                This LINQ query is being executed in split-query mode. The SQL shown is for the first query to be executed. Additional queries may also be executed depending on the results of the first query.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.SqlQueryOverrideMismatch(System.Object,System.Object)">
            <summary>
                The property '{propertySpecification}' has specific configuration for the SQL query '{query}', however it isn't mapped to a column on that query. Remove the specific configuration or map an entity type that contains this property to '{query}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TableNotMappedEntityType(System.Object,System.Object)">
            <summary>
                The entity type '{entityType}' is not mapped to the store object '{table}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TableOverrideMismatch(System.Object,System.Object)">
            <summary>
                The property '{propertySpecification}' has specific configuration for the table '{table}', however it isn't mapped to a column on that table. Remove the specific configuration or map an entity type that contains this property to '{table}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TableValuedFunctionNonTPH(System.Object,System.Object)">
            <summary>
                The element type of result of '{dbFunction}' is mapped to '{entityType}'. This is not supported since '{entityType}' is part of hierarchy and does not contain a discriminator property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TimeoutTooBig(System.Object)">
            <summary>
                Timeout must be less than or equal to Int32.MaxValue (2147483647) seconds.  Provided: {seconds} seconds.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TimeoutTooSmall(System.Object)">
            <summary>
                Timeout must be greater than or equal to zero.  Provided: {seconds} seconds.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TooFewReaderFields(System.Object,System.Object)">
            <summary>
                The underlying reader doesn't have as many fields as expected. Expected: {expected}, actual: {actual}.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TPHTableMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType}' is mapped to the table '{table}' while '{otherEntityType}' is mapped to the table '{otherTable}'. Map all the entity types in the hierarchy to the same table or remove the discriminator and map all of them to different tables. See https://go.microsoft.com/fwlink/?linkid=2130430 for more information.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TPHViewMismatch(System.Object,System.Object,System.Object,System.Object)">
            <summary>
                '{entityType}' is mapped to the view '{view}' while '{otherEntityType}' is mapped to the view '{otherView}'. Map all the entity types in the hierarchy to the same view or remove the discriminator and map all of them to different views. See https://go.microsoft.com/fwlink/?linkid=2130430 for more information.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TransactionAlreadyStarted">
            <summary>
                The connection is already in a transaction and cannot participate in another transaction.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.TransactionAssociatedWithDifferentConnection">
            <summary>
                The specified transaction is not associated with the current connection. Only transactions associated with the current connection may be used.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UnableToBindMemberToEntityProjection(System.Object,System.Object,System.Object)">
            <summary>
                Unable to bind '{memberType}' '{member}' to entity projection of '{entityType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UnableToSplitCollectionProjectionInSplitQuery(System.Object,System.Object,System.Object)">
            <summary>
                The query has been configured to use '{splitQueryEnumValue}' and contains a collection in the 'Select' call, which could not be split into separate query. Please remove '{splitQueryMethodName}' if applied or add '{singleQueryMethodName}' to the query.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UnhandledExpressionInVisitor(System.Object,System.Object,System.Object)">
            <summary>
                Unhandled expression '{expression}' of type '{expressionType}' encountered in '{visitor}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UnknownOperation(System.Object,System.Object)">
            <summary>
                The current migration SQL generator '{sqlGeneratorType}' is unable to generate SQL for operations of type '{operationType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UnsupportedDataOperationStoreType(System.Object,System.Object)">
            <summary>
                The store type '{type}' used for the column '{column}' in a migration data operation is not supported by the current provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UnsupportedOperatorForSqlExpression(System.Object,System.Object)">
            <summary>
                Unsupported operator '{nodeType}' specified for expression of type '{expressionType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UnsupportedPropertyType(System.Object,System.Object,System.Object)">
            <summary>
                No mapping to a relational type can be found for property '{entity}.{property}' with the CLR type '{clrType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UnsupportedStoreType(System.Object)">
            <summary>
                The store type '{type}' is not supported by the current provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UnsupportedType(System.Object)">
            <summary>
                No mapping to a relational type can be found for the CLR type '{clrType}'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UpdateConcurrencyException(System.Object,System.Object)">
            <summary>
                Database operation expected to affect {expectedRows} row(s) but actually affected {actualRows} row(s). Data may have been modified or deleted since entities were loaded. See http://go.microsoft.com/fwlink/?LinkId=527962 for information on understanding and handling optimistic concurrency exceptions.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UpdateDataOperationKeyTypesCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The number of key column types ({typesCount}) doesn't match the number of key columns ({columnsCount}) for the data modification operation on '{table}'. Provide the same number of key column types and key columns.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UpdateDataOperationKeyValuesCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The number of key values ({valuesCount}) doesn't match the number of key columns ({columnsCount}) for the data modification operation on '{table}'. Provide the same number of key values and key columns.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UpdateDataOperationNoModel(System.Object)">
            <summary>
                The data modification operation on '{table}' is not associated with a model. Either add a model to the migration or specify the column types in all data operations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UpdateDataOperationRowCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The number of value rows ({valuesCount}) doesn't match the number of key rows ({keyCount}) for the data modification operation on '{table}'. Provide the same number of value rows and key rows.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UpdateDataOperationTypesCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The number of column types ({typesCount}) doesn't match the number of columns ({columnsCount}) for the data modification operation on '{table}'. Provide the same number of column types and columns.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UpdateDataOperationValuesCountMismatch(System.Object,System.Object,System.Object)">
            <summary>
                The number of values ({valuesCount}) doesn't match the number of columns ({columnsCount}) for the data modification operation on '{table}'. Provide the same number of values and columns.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.UpdateStoreException">
            <summary>
                An error occurred while updating the entries. See the inner exception for details.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.ViewOverrideMismatch(System.Object,System.Object)">
            <summary>
                The property '{propertySpecification}' has specific configuration for the view '{table}', however it isn't mapped to a column on that view. Remove the specific configuration or map an entity type that contains this property to '{table}'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Diagnostics.RelationalStrings.VisitChildrenMustBeOverridden">
            <summary>
                'VisitChildren' must be overridden in the class deriving from 'SqlExpression'.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.MethodInfoExtensions.DisplayName(System.Reflection.MethodInfo)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.TupleExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.TupleExtensions.FormatTables(System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.String}})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.TupleExtensions.FormatTable(System.ValueTuple{System.String,System.String})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IDbContextTransactionManager,Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Infrastructure.IConcurrencyDetector,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies.TransactionManager">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies.DatabaseCreator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies.ExecutionStrategyFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies.DatabaseProviders">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies.CommandLogger">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies.ConcurrencyDetector">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies.RelationalConnection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Internal.RelationalDatabaseFacadeDependencies.RawSqlCommandBuilder">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Internal.SemanticVersionComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Internal.SemanticVersionComparer.Compare(System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions">
            <summary>
                Extension methods for the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> returned from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />
                that can be used only with relational database providers.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.Migrate(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                <para>
                    Applies any pending migrations for the context to the database. Will create the database
                    if it does not already exist.
                </para>
                <para>
                    Note that this API is mutually exclusive with <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" />. EnsureCreated does not use migrations
                    to create the database and therefore the database that is created cannot be later updated using migrations.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Gets all the migrations that are defined in the configured migrations assembly.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
            <returns>The list of migrations.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Gets all migrations that have been applied to the target database.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
            <returns> The list of migrations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetAppliedMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)">
            <summary>
                Asynchronously gets all migrations that have been applied to the target database.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrations(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Gets all migrations that are defined in the assembly but haven't been applied to the target database.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
            <returns> The list of migrations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetPendingMigrationsAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)">
            <summary>
                Asynchronously gets all migrations that are defined in the assembly but haven't been applied to the target database.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.MigrateAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Asynchronously applies any pending migrations for the context to the database. Will create the database
                    if it does not already exist.
                </para>
                <para>
                    Note that this API is mutually exclusive with <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" />.
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.EnsureCreated" /> does not use migrations to create the database and therefore the database
                    that is created cannot be later updated using migrations.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns> A task that represents the asynchronous migration operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlRaw(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
                <para>
                    Executes the given SQL against the database and returns the number of rows affected.
                </para>
                <para>
                    Note that this method does not start a transaction. To use this method with
                    a transaction, first call <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)" /> or <see cref="M:UseTransaction" />.
                </para>
                <para>
                    Note that the current <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" /> is not used by this method
                    since the SQL may not be idempotent and does not run in a transaction. An <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />
                    can be used explicitly, making sure to also use a transaction if the SQL is not
                    idempotent.
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter:
                </para>
                <code>context.Database.ExecuteSqlRaw("SELECT * FROM [dbo].[SearchBlogs]({0})", userSuppliedSearchTerm)</code>
                <para>
                    However, <b>never</b> pass a concatenated or interpolated string (<c>$""</c>) with non-validated user-provided values
                    into this method. Doing so may expose your application to SQL injection attacks. To use the interpolated string syntax,
                    consider using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlInterpolated(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString)" /> to create parameters.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="sql"> The SQL to execute. </param>
            <param name="parameters"> Parameters to use with the SQL. </param>
            <returns> The number of rows affected. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlInterpolated(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString)">
            <summary>
                <para>
                    Executes the given SQL against the database and returns the number of rows affected.
                </para>
                <para>
                    Note that this method does not start a transaction. To use this method with
                    a transaction, first call <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)" /> or <see cref="M:UseTransaction" />.
                </para>
                <para>
                    Note that the current <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" /> is not used by this method
                    since the SQL may not be idempotent and does not run in a transaction. An <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />
                    can be used explicitly, making sure to also use a transaction if the SQL is not
                    idempotent.
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter:
                </para>
                <code>
                    var userSuppliedSearchTerm = ".NET";
                    context.Database.ExecuteSqlInterpolated($"SELECT * FROM [dbo].[SearchBlogs]({userSuppliedSearchTerm})")
                </code>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="sql"> The interpolated string representing a SQL query with parameters. </param>
            <returns> The number of rows affected. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlRaw(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                <para>
                    Executes the given SQL against the database and returns the number of rows affected.
                </para>
                <para>
                    Note that this method does not start a transaction. To use this method with
                    a transaction, first call <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)" /> or <see cref="M:UseTransaction" />.
                </para>
                <para>
                    Note that the current <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" /> is not used by this method
                    since the SQL may not be idempotent and does not run in a transaction. An <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />
                    can be used explicitly, making sure to also use a transaction if the SQL is not
                    idempotent.
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter:
                </para>
                <code>context.Database.ExecuteSqlRawAsync("SELECT * FROM [dbo].[SearchBlogs]({0})", userSuppliedSearchTerm)</code>
                <para>
                    However, <b>never</b> pass a concatenated or interpolated string (<c>$""</c>) with non-validated user-provided values
                    into this method. Doing so may expose your application to SQL injection attacks. To use the interpolated string syntax,
                    consider using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlInterpolated(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString)" /> to create parameters.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="sql"> The SQL to execute. </param>
            <param name="parameters"> Parameters to use with the SQL. </param>
            <returns> The number of rows affected. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlInterpolatedAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Executes the given SQL against the database and returns the number of rows affected.
                </para>
                <para>
                    Note that this method does not start a transaction. To use this method with
                    a transaction, first call <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)" /> or <see cref="M:UseTransaction" />.
                </para>
                <para>
                    Note that the current <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" /> is not used by this method
                    since the SQL may not be idempotent and does not run in a transaction. An <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />
                    can be used explicitly, making sure to also use a transaction if the SQL is not
                    idempotent.
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter:
                </para>
                <code>
                    var userSuppliedSearchTerm = ".NET";
                    context.Database.ExecuteSqlInterpolatedAsync($"SELECT * FROM [dbo].[SearchBlogs]({userSuppliedSearchTerm})")
                </code>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="sql"> The interpolated string representing a SQL query with parameters. </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns>
                A task that represents the asynchronous operation. The task result is the number of rows affected.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlRawAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Threading.CancellationToken)">
            <summary>
                <para>
                    Executes the given SQL against the database and returns the number of rows affected.
                </para>
                <para>
                    Note that this method does not start a transaction. To use this method with
                    a transaction, first call <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)" /> or <see cref="M:UseTransaction" />.
                </para>
                <para>
                    Note that the current <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" /> is not used by this method
                    since the SQL may not be idempotent and does not run in a transaction. An <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />
                    can be used explicitly, making sure to also use a transaction if the SQL is not
                    idempotent.
                </para>
                <para>
                    <b>Never</b> pass a concatenated or interpolated string (<c>$""</c>) with non-validated user-provided values
                    into this method. Doing so may expose your application to SQL injection attacks.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="sql"> The SQL to execute. </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns>
                A task that represents the asynchronous operation. The task result is the number of rows affected.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlRawAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Object[])">
            <summary>
                <para>
                    Executes the given SQL against the database and returns the number of rows affected.
                </para>
                <para>
                    Note that this method does not start a transaction. To use this method with
                    a transaction, first call <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)" /> or <see cref="M:UseTransaction" />.
                </para>
                <para>
                    Note that the current <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" /> is not used by this method
                    since the SQL may not be idempotent and does not run in a transaction. An <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" />
                    can be used explicitly, making sure to also use a transaction if the SQL is not
                    idempotent.
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter:
                </para>
                <code>context.Database.ExecuteSqlRawAsync("SELECT * FROM [dbo].[SearchBlogs]({0})", userSuppliedSearchTerm)</code>
                <para>
                    However, <b>never</b> pass a concatenated or interpolated string (<c>$""</c>) with non-validated user-provided values
                    into this method. Doing so may expose your application to SQL injection attacks. To use the interpolated string syntax,
                    consider using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlInterpolated(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString)" /> to create parameters.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="sql"> The SQL to execute. </param>
            <param name="parameters"> Parameters to use with the SQL. </param>
            <returns>
                A task that represents the asynchronous operation. The task result is the number of rows affected.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlRawAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
                <para>
                    Executes the given SQL against the database and returns the number of rows affected.
                </para>
                <para>
                    Note that this method does not start a transaction. To use this method with
                    a transaction, first call <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)" /> or <see cref="M:UseTransaction" />.
                </para>
                <para>
                    Note that the current <see cref="T:Microsoft.EntityFrameworkCore.Storage.ExecutionStrategy" /> is not used by this method
                    since the SQL may not be idempotent and does not run in a transaction. An ExecutionStrategy
                    can be used explicitly, making sure to also use a transaction if the SQL is not
                    idempotent.
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter:
                </para>
                <code>context.Database.ExecuteSqlRawAsync("SELECT * FROM [dbo].[SearchBlogs]({0})", userSuppliedSearchTerm)</code>
                <para>
                    However, <b>never</b> pass a concatenated or interpolated string (<c>$""</c>) with non-validated user-provided values
                    into this method. Doing so may expose your application to SQL injection attacks. To use the interpolated string syntax,
                    consider using <see cref="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.ExecuteSqlInterpolated(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.FormattableString)" /> to create parameters.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="sql"> The SQL to execute. </param>
            <param name="parameters"> Parameters to use with the SQL. </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns>
                A task that represents the asynchronous operation. The task result is the number of rows affected.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Gets the underlying ADO.NET <see cref="T:System.Data.Common.DbConnection" /> for this <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <returns> The <see cref="T:System.Data.Common.DbConnection" /> </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetDbConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbConnection)">
            <summary>
                <para>
                    Sets the underlying ADO.NET <see cref="T:System.Data.Common.DbConnection" /> for this <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
                <para>
                    The connection can only be set when the existing connection, if any, is not open.
                </para>
                <para>
                    Note that the given connection must be disposed by application code since it was not created by Entity Framework.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="connection"> The connection. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Gets the underlying connection string configured for this <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <returns> The connection string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetConnectionString(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.String)">
            <summary>
                <para>
                    Sets the underlying connection string configured for this <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
                <para>
                    It may not be possible to change the connection string if existing connection, if any, is open.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="connectionString"> The connection string. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Opens the underlying <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.OpenConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Threading.CancellationToken)">
            <summary>
                Opens the underlying <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.CloseConnection(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Closes the underlying <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.CloseConnectionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Closes the underlying <see cref="T:System.Data.Common.DbConnection" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel)">
            <summary>
                Starts a new transaction with a given <see cref="T:System.Data.IsolationLevel" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="isolationLevel"> The <see cref="T:System.Data.IsolationLevel" /> to use. </param>
            <returns> A <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> that represents the started transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.BeginTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
                Asynchronously starts a new transaction with a given <see cref="T:System.Data.IsolationLevel" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="isolationLevel"> The <see cref="T:System.Data.IsolationLevel" /> to use. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous transaction initialization. The task result contains a <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />
                that represents the started transaction.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction)">
            <summary>
                Sets the <see cref="T:System.Data.Common.DbTransaction" /> to be used by database operations on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="transaction"> The <see cref="T:System.Data.Common.DbTransaction" /> to use. </param>
            <returns> A <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> that encapsulates the given transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransaction(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction,System.Guid)">
            <summary>
                Sets the <see cref="T:System.Data.Common.DbTransaction" /> to be used by database operations on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="transaction"> The <see cref="T:System.Data.Common.DbTransaction" /> to use. </param>
            <param name="transactionId"> The unique identifier for the transaction. </param>
            <returns> A <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> that encapsulates the given transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
                Sets the <see cref="T:System.Data.Common.DbTransaction" /> to be used by database operations on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="transaction"> The <see cref="T:System.Data.Common.DbTransaction" /> to use. </param>
            <param name="cancellationToken">A token to observe while waiting for the task to complete.</param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> containing the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> for the given transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.UseTransactionAsync(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Data.Common.DbTransaction,System.Guid,System.Threading.CancellationToken)">
            <summary>
                Sets the <see cref="T:System.Data.Common.DbTransaction" /> to be used by database operations on the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="transaction"> The <see cref="T:System.Data.Common.DbTransaction" /> to use. </param>
            <param name="transactionId"> The unique identifier for the transaction. </param>
            <param name="cancellationToken">A token to observe while waiting for the task to complete.</param>
            <returns> A <see cref="T:System.Threading.Tasks.Task" /> containing the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" /> for the given transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.Nullable{System.Int32})">
            <summary>
                <para>
                    Sets the timeout (in seconds) to use for commands executed with this <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
                <para>
                    Note that the command timeout is distinct from the connection timeout, which is commonly
                    set on the database connection string.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="timeout"> The timeout to use, in seconds. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.SetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade,System.TimeSpan)">
            <summary>
                <para>
                    Sets the timeout to use for commands executed with this <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
                <para>
                    Note that the command timeout is distinct from the connection timeout, which is commonly
                    set on the database connection string.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <param name="timeout"> The timeout to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GetCommandTimeout(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                <para>
                    Returns the timeout (in seconds) set for commands executed with this <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />.
                </para>
                <para>
                    Note that the command timeout is distinct from the connection timeout, which is commonly
                    set on the database connection string.
                </para>
            </summary>
            <param name="databaseFacade"> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> for the context. </param>
            <returns> The timeout, in seconds, or null if no timeout has been set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.GenerateCreateScript(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                Generates a script to create all tables for the current model.
            </summary>
            <returns>
                A SQL script.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDatabaseFacadeExtensions.IsRelational(Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade)">
            <summary>
                <para>
                    Returns <see langword="true" /> if the database provider currently in use is a relational database.
                </para>
            </summary>
            <param name="databaseFacade"> The facade from <see cref="P:Microsoft.EntityFrameworkCore.DbContext.Database" />. </param>
            <returns>
                <see langword="true" /> if a relational database provider is being used;
                <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalDbFunctionsExtensions">
            <summary>
                Provides CLR methods that get translated to database functions when used in LINQ to Entities queries.
                The methods on this class are accessed via <see cref="P:Microsoft.EntityFrameworkCore.EF.Functions" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalDbFunctionsExtensions.Collate``1(Microsoft.EntityFrameworkCore.DbFunctions,``0,System.String)">
            <summary>
                <para>
                    Explicitly specifies a collation to be used in a LINQ query. Can be used to generate fragments such as
                    <c>WHERE customer.name COLLATE 'de_DE' = 'John Doe'</c>.
                </para>
                <para>
                    The available collations and their names vary across databases, consult your database's documentation for more
                    information.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the operand on which the collation is being specified. </typeparam>
            <param name="_"> The DbFunctions instance. </param>
            <param name="operand"> The operand to which to apply the collation. </param>
            <param name="collation"> The name of the collation. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions">
            <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="buildAction"> An action that performs configuration of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="buildAction"> An action that performs configuration of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0}})">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="buildAction"> An action that performs configuration of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <param name="buildAction"> An action that performs configuration of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder})">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <param name="buildAction"> An action that performs configuration of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder{``0}})">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <param name="buildAction"> An action that performs configuration of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Boolean)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="excludedFromMigrations"> A value indicating whether the table should be managed by migrations. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Boolean)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="excludedFromMigrations"> A value indicating whether the table should be managed by migrations. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <param name="excludedFromMigrations"> A value indicating whether the table should be managed by migrations. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String,System.Boolean)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <param name="excludedFromMigrations"> A value indicating whether the table should be managed by migrations. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToTable(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetTable(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the table name can be set for this entity type
                using the specified configuration source.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures the schema of the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="schema"> The schema of the table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the schema of the table name can be set for this entity type
                using the specified configuration source.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="schema"> The schema of the table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ExcludeTableFromMigrations(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Mark the table that this entity type is mapped to as excluded from migrations.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="excludedFromMigrations"> A value indicating whether the table should be managed by migrations. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanExcludeTableFromMigrations(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the table that this entity type is mapped to can be excluded from migrations
                using the specified configuration source.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="excludedFromMigrations"> A value indicating whether the table should be managed by migrations. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)">
            <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the view. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)">
            <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the view. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)">
            <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the view. </param>
            <param name="schema"> The schema of the view. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)">
            <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the view. </param>
            <param name="schema"> The schema of the view. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the view. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToView(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Configures the view that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the view. </param>
            <param name="schema"> The schema of the view. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetView(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the view name can be set for this entity type
                using the specified configuration source.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the view. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToViewSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures the schema of the view that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="schema"> The schema of the view. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetViewSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the schema of the view can be set for this entity type
                using the specified configuration source.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="schema"> The schema of the view. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSqlQuery``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)">
            <summary>
                Configures a SQL string used to provide data for the entity type.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="query"> The SQL query that will provide the underlying data for the entity type. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToSqlQuery(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures a SQL string used to provide data for the entity type.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The SQL query that will provide the underlying data for the entity type. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the query SQL string can be set for this entity type
                using the specified configuration source.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The SQL query that will provide the underlying data for the entity type. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)">
            <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the function. </param>
            <returns> The function configuration builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})">
            <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the function. </param>
            <param name="configureFunction"> The function configuration action. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)">
            <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the function. </param>
            <returns> The function configuration builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})">
            <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the function. </param>
            <param name="configureFunction"> The function configuration action. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String)">
            <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
            <param name="ownedNavigationBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the function. </param>
            <returns> The function configuration builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})">
            <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
            <param name="ownedNavigationBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the function. </param>
            <param name="configureFunction"> The function configuration action. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String)">
            <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the function. </param>
            <returns> The function configuration builder. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder})">
            <summary>
                Configures the function that the entity type maps to when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type that this relationship targets. </typeparam>
            <param name="referenceOwnershipBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the function. </param>
            <param name="configureFunction"> The function configuration action. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.ToFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures the table that the entity type maps to when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the view or table name can be set for this entity type
                using the specified configuration source.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the view or table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String,System.String)">
            <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The entity type builder. </param>
            <param name="name"> The name of the check constraint. </param>
            <param name="sql"> The logical constraint sql used in the check constraint. </param>
            <returns> A builder to further configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String,System.String)">
            <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The entity type builder. </param>
            <param name="name"> The name of the check constraint. </param>
            <param name="sql"> The logical constraint sql used in the check constraint. </param>
            <returns> A builder to further configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
            <param name="entityTypeBuilder"> The entity type builder. </param>
            <param name="name"> The name of the check constraint. </param>
            <param name="sql"> The logical constraint sql used in the check constraint. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the check constraint was configured,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the check constraint can be configured.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="name"> The name of the check constraint. </param>
            <param name="sql"> The logical constraint sql used in the check constraint. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasComment(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder,System.String)">
            <summary>
                Configures a comment to be applied to the table
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="comment"> The comment for the table. </param>
            <returns> A builder to further configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasComment``1(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.String)">
            <summary>
                Configures a comment to be applied to the table
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="entityTypeBuilder"> The entity type builder. </param>
            <param name="comment"> The comment for the table. </param>
            <returns> A builder to further configure the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.HasComment(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Configures a comment to be applied to the table
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="comment"> The comment for the table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeBuilderExtensions.CanSetComment(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether a comment can be set for this entity type
                using the specified configuration source.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type being configured. </param>
            <param name="comment"> The comment for the table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> for relational database metadata.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the name of the table to which the entity type is mapped
                or <see langword="null" /> if not mapped to a table.
            </summary>
            <param name="entityType"> The entity type to get the table name for. </param>
            <returns> The name of the table to which the entity type is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultTableName(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean)">
            <summary>
                Returns the default table name that would be used for this entity type.
            </summary>
            <param name="entityType"> The entity type to get the table name for. </param>
            <param name="truncate"> A value indicating whether the name should be truncated to the max identifier length. </param>
            <returns> The default name of the table to which the entity type would be mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetTableName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets the name of the table to which the entity type is mapped.
            </summary>
            <param name="entityType"> The entity type to set the table name for. </param>
            <param name="name"> The name to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetTableName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets the name of the table to which the entity type is mapped.
            </summary>
            <param name="entityType"> The entity type to set the table name for. </param>
            <param name="name"> The name to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured table name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the table name.
            </summary>
            <param name="entityType"> The entity type to find configuration source for. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the table name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchema(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the database schema that contains the mapped table.
            </summary>
            <param name="entityType"> The entity type to get the schema for. </param>
            <returns> The database schema that contains the mapped table. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSchema(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the default database schema that would be used for this entity type.
            </summary>
            <param name="entityType"> The entity type to get the schema for. </param>
            <returns> The default database schema to which the entity type would be mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets the database schema that contains the mapped table.
            </summary>
            <param name="entityType"> The entity type to set the schema for. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets the database schema that contains the mapped table.
            </summary>
            <param name="entityType"> The entity type to set the schema for. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the database schema.
            </summary>
            <param name="entityType"> The entity type to find configuration source for. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the database schema. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedTableName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the name of the table to which the entity type is mapped prepended by the schema
                or <see langword="null" /> if not mapped to a table.
            </summary>
            <param name="entityType"> The entity type to get the table name for. </param>
            <returns> The name of the table to which the entity type is mapped prepended by the schema. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSchemaQualifiedViewName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the name of the view to which the entity type is mapped prepended by the schema
                or <see langword="null" /> if not mapped to a view.
            </summary>
            <param name="entityType"> The entity type to get the table name for. </param>
            <returns> The name of the table to which the entity type is mapped prepended by the schema. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the default mappings that the entity type would use.
            </summary>
            <param name="entityType"> The entity type to get the table mappings for. </param>
            <returns> The tables to which the entity type is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetTableMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the tables to which the entity type is mapped.
            </summary>
            <param name="entityType"> The entity type to get the table mappings for. </param>
            <returns> The tables to which the entity type is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the name of the view to which the entity type is mapped or <see langword="null" /> if not mapped to a view.
            </summary>
            <param name="entityType"> The entity type to get the view name for. </param>
            <returns> The name of the view to which the entity type is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the default view name that would be used for this entity type.
            </summary>
            <param name="entityType"> The entity type to get the table name for. </param>
            <returns> The default name of the table to which the entity type would be mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets the name of the view to which the entity type is mapped.
            </summary>
            <param name="entityType"> The entity type to set the view name for. </param>
            <param name="name"> The name to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets the name of the view to which the entity type is mapped.
            </summary>
            <param name="entityType"> The entity type to set the view name for. </param>
            <param name="name"> The name to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the view name.
            </summary>
            <param name="entityType"> The entity type to find configuration source for. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the view name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewSchema(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the database schema that contains the mapped view.
            </summary>
            <param name="entityType"> The entity type to get the view schema for. </param>
            <returns> The database schema that contains the mapped view. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultViewSchema(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the default database schema that would be used for this entity view.
            </summary>
            <param name="entityType"> The entity type to get the view schema for. </param>
            <returns> The default database schema to which the entity type would be mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets the database schema that contains the mapped view.
            </summary>
            <param name="entityType"> The entity type to set the view schema for. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetViewSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets the database schema that contains the mapped view.
            </summary>
            <param name="entityType"> The entity type to set the view schema for. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured schema. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the view schema.
            </summary>
            <param name="entityType"> The entity type to find configuration source for. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the view schema. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetViewMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the views to which the entity type is mapped.
            </summary>
            <param name="entityType"> The entity type to get the view mappings for. </param>
            <returns> The views to which the entity type is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetDefaultSqlQueryName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the default SQL query name that would be used for this entity type when mapped using
                <see cref="M:RelationalEntityTypeBuilderExtensions.ToSqlQuery" />.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> Gets the default SQL query name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the SQL string used to provide data for the entity type or <see langword="null" /> if not mapped to a SQL string.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The SQL string used to provide data for the entity type. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets the SQL string used to provide data for the entity type.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="name"> The SQL string to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetSqlQuery(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets the SQL string used to provide data for the entity type.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="name"> The SQL string to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQueryConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the query SQL string.
            </summary>
            <param name="entityType"> The entity type to find configuration source for. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the query SQL string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetSqlQueryMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the SQL string mappings.
            </summary>
            <param name="entityType"> The entity type to get the function mappings for. </param>
            <returns> The functions to which the entity type is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionName(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the name of the function to which the entity type is mapped or <see langword="null" /> if not mapped to a function.
            </summary>
            <param name="entityType"> The entity type to get the function name for. </param>
            <returns> The name of the function to which the entity type is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetFunctionName(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Sets the name of the function to which the entity type is mapped.
            </summary>
            <param name="entityType"> The entity type to set the function name for. </param>
            <param name="name"> The name to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetFunctionName(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Sets the name of the function to which the entity type is mapped.
            </summary>
            <param name="entityType"> The entity type to set the function name for. </param>
            <param name="name"> The name to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the function name.
            </summary>
            <param name="entityType"> The entity type to find configuration source for. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the function name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetFunctionMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the functions to which the entity type is mapped.
            </summary>
            <param name="entityType"> The entity type to get the function mappings for. </param>
            <returns> The functions to which the entity type is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" /> with the given name.
            </summary>
            <param name="entityType"> The entity type to find the check constraint for. </param>
            <param name="name"> The check constraint name. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" /> or <see langword="null" /> if no check constraint with the
                given name in the given entity type was found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint" /> with the given name.
            </summary>
            <param name="entityType"> The entity type to find the check constraint for. </param>
            <param name="name"> The check constraint name. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint" /> or <see langword="null" /> if no check constraint with the
                given name in the given entity type was found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" /> with the given name.
            </summary>
            <param name="entityType"> The entity type to find the check constraint for. </param>
            <param name="name"> The check constraint name. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" /> or <see langword="null" /> if no check constraint with the
                given name in the given entity type was found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.AddCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.String)">
            <summary>
                Creates a new check constraint with the given name on entity type. Throws an exception
                if a check constraint with the same name exists on the same entity type.
            </summary>
            <param name="entityType"> The entity type to add the check constraint to. </param>
            <param name="name"> The check constraint name. </param>
            <param name="sql"> The logical constraint sql used in the check constraint. </param>
            <returns> The new check constraint. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.AddCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.String,System.Boolean)">
            <summary>
                Creates a new check constraint with the given name on entity type. Throws an exception
                if a check constraint with the same name exists on the same entity type.
            </summary>
            <param name="entityType"> The entity type to add the check constraint to. </param>
            <param name="name"> The check constraint name. </param>
            <param name="sql"> The logical constraint sql used in the check constraint. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The new check constraint. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.RemoveCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" /> with the given name.
            </summary>
            <param name="entityType"> The entity type to remove the check constraint from. </param>
            <param name="name"> The check constraint name to be removed. </param>
            <returns> The removed <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.RemoveCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String)">
            <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" /> with the given name.
            </summary>
            <param name="entityType"> The entity type to remove the check constraint from. </param>
            <param name="name"> The check constraint name. </param>
            <returns> The removed <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" /> contained in the entity type.
            </summary>
            <param name="entityType"> The entity type to get the check constraints for. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                Returns all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint" /> contained in the entity type.
            </summary>
            <param name="entityType"> The entity type to get the check constraints for. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Returns all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" /> contained in the entity type.
            </summary>
            <param name="entityType"> The entity type to get the check constraints for. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetComment(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Returns the comment for the table this entity is mapped to.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The comment for the table this entity is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetComment(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                Configures a comment to be applied to the table this entity is mapped to.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="comment"> The comment for the table this entity is mapped to. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetComment(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.String,System.Boolean)">
            <summary>
                Configures a comment to be applied to the table this entity is mapped to.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="comment"> The comment for the table. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured comment. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetCommentConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the table comment.
            </summary>
            <param name="entityType"> The entity type to find configuration source for. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the table comment. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier)">
            <summary>
                Gets the foreign keys for the given entity type that point to other entity types
                sharing the same table-like store object.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="storeObject"> The identifier of the store object. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets the foreign keys for the given entity type that point to other entity types
                sharing the same table-like store object.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="storeObject"> The identifier of the store object. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.FindRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets the foreign keys for the given entity type that point to other entity types
                sharing the same table-like store object.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="storeObject"> The identifier of the store object. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets a value indicating whether the associated table is ignored by Migrations.
            </summary>
            <param name="entityType">The entity type.</param>
            <returns>A value indicating whether the associated table is ignored by Migrations.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetIsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.Nullable{System.Boolean})">
            <summary>
                Sets a value indicating whether the associated table is ignored by Migrations.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="excluded"> A value indicating whether the associated table is ignored by Migrations. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.SetIsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a value indicating whether the associated table is ignored by Migrations.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="excluded"> A value indicating whether the associated table is ignored by Migrations. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.GetIsTableExcludedFromMigrationsConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for <see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />.
            </summary>
            <param name="entityType"> The entity type to find configuration source for. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for <see cref="M:Microsoft.EntityFrameworkCore.RelationalEntityTypeExtensions.IsTableExcludedFromMigrations(Microsoft.EntityFrameworkCore.Metadata.IEntityType)" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions">
            <summary>
                Relational database specific extension methods for relationship builders.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder,System.String)">
            <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
            <param name="referenceCollectionBuilder"> The builder being used to configure the relationship. </param>
            <param name="name"> The name of the foreign key constraint. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions.HasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceCollectionBuilder{``0,``1},System.String)">
            <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
            <param name="referenceCollectionBuilder"> The builder being used to configure the relationship. </param>
            <param name="name"> The name of the foreign key constraint. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
            <typeparam name="TEntity"> The principal entity type in this relationship. </typeparam>
            <typeparam name="TRelatedEntity"> The dependent entity type in this relationship. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder,System.String)">
            <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
            <param name="referenceReferenceBuilder"> The builder being used to configure the relationship. </param>
            <param name="name"> The name of the foreign key constraint. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions.HasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.ReferenceReferenceBuilder{``0,``1},System.String)">
            <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
            <param name="referenceReferenceBuilder"> The builder being used to configure the relationship. </param>
            <param name="name"> The name of the foreign key constraint. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
            <typeparam name="TEntity"> The entity type on one end of the relationship. </typeparam>
            <typeparam name="TRelatedEntity"> The entity type on the other end of the relationship. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder,System.String)">
            <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
            <param name="ownershipBuilder"> The builder being used to configure the relationship. </param>
            <param name="name"> The name of the foreign key constraint. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions.HasConstraintName``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnershipBuilder{``0,``1},System.String)">
            <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
            <param name="ownershipBuilder"> The builder being used to configure the relationship. </param>
            <param name="name"> The name of the foreign key constraint. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
            <typeparam name="TEntity"> The entity type on one end of the relationship. </typeparam>
            <typeparam name="TDependentEntity"> The entity type on the other end of the relationship. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions.HasConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder,System.String,System.Boolean)">
            <summary>
                Configures the foreign key constraint name for this relationship when targeting a relational database.
            </summary>
            <param name="relationship"> The builder being used to configure the relationship. </param>
            <param name="name"> The name of the foreign key constraint. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyBuilderExtensions.CanSetConstraintName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionForeignKeyBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the foreign key constraint name can be set for this relationship
                from the current configuration source
            </summary>
            <param name="relationship"> The builder being used to configure the relationship. </param>
            <param name="name"> The name of the foreign key constraint. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the configuration can be applied. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" /> for relational database metadata.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.GetConstraintName(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                Returns the foreign key constraint name.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <returns> The foreign key constraint name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.GetConstraintName(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the foreign key constraint name.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <param name="principalStoreObject"> The identifier of the principal store object. </param>
            <returns> The foreign key constraint name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.GetDefaultName(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                Returns the default constraint name that would be used for this foreign key.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <returns> The default constraint name that would be used for this foreign key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.GetDefaultName(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the default constraint name that would be used for this foreign key.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <param name="principalStoreObject"> The identifier of the principal store object. </param>
            <returns> The default constraint name that would be used for this foreign key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.SetConstraintName(Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey,System.String)">
            <summary>
                Sets the foreign key constraint name.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.SetConstraintName(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,System.String,System.Boolean)">
            <summary>
                Sets the foreign key constraint name.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.GetConstraintNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the constraint name.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the constraint name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.GetMappedConstraints(Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                Gets the foreign key constraints to which the foreign key is mapped.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <returns> The foreign key constraints to which the foreign key is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.FindSharedObjectRootForeignKey(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKey" /> that is mapped to the same constraint in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The foreign key if found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.FindSharedObjectRootForeignKey(Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableForeignKey" /> that is mapped to the same constraint in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The foreign key if found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalForeignKeyExtensions.FindSharedObjectRootForeignKey(Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionForeignKey" /> that is mapped to the same constraint in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The foreign key if found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions">
            <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasDatabaseName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)">
            <summary>
                Configures the name of the index in the database when targeting a relational database.
            </summary>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="name"> The name of the index. </param>
            <returns> A builder to further configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)">
            <summary>
                Configures the name of the index in the database when targeting a relational database.
            </summary>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="name"> The name of the index. </param>
            <returns> A builder to further configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasDatabaseName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.String)">
            <summary>
                Configures the name of the index in the database when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="name"> The name of the index. </param>
            <returns> A builder to further configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.String)">
            <summary>
                Configures the name of the index in the database when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="name"> The name of the index. </param>
            <returns> A builder to further configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasDatabaseName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.String,System.Boolean)">
            <summary>
                Configures the name of the index in the database when targeting a relational database.
            </summary>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="name"> The name of the index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.String,System.Boolean)">
            <summary>
                Configures the name of the index in the database when targeting a relational database.
            </summary>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="name"> The name of the index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.CanSetDatabaseName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given name can be set for the index.
            </summary>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="name"> The name of the index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given name can be set for the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.CanSetName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given name can be set for the index.
            </summary>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="name"> The name of the index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given name can be set for the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder,System.String)">
            <summary>
                Configures the filter expression for the index.
            </summary>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="sql"> The filter expression for the index. </param>
            <returns>A builder to further configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter``1(Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder{``0},System.String)">
            <summary>
                Configures the filter expression for the index.
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="sql"> The filter expression for the index. </param>
            <returns>A builder to further configure the index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.HasFilter(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.String,System.Boolean)">
            <summary>
                Configures the filter expression for the index.
            </summary>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="sql"> The filter expression for the index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexBuilderExtensions.CanSetFilter(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionIndexBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given expression can be set as the filter for the index.
            </summary>
            <param name="indexBuilder"> The builder for the index being configured. </param>
            <param name="sql"> The filter expression for the index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given name can be set for the index. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalIndexExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" /> for relational database metadata.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetDatabaseName(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns the name of the index in the database.
            </summary>
            <param name="index"> The index. </param>
            <returns> The name of the index in the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetName(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns the name of the index in the database.
            </summary>
            <param name="index"> The index. </param>
            <returns> The name of the index in the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetDatabaseName(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the name of the index in the database.
            </summary>
            <param name="index"> The index. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <returns> The name of the index in the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetDefaultDatabaseName(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns the default name that would be used for this index.
            </summary>
            <param name="index"> The index. </param>
            <returns> The default name that would be used for this index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetDefaultName(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns the default name that would be used for this index.
            </summary>
            <param name="index"> The index. </param>
            <returns> The default name that would be used for this index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetDefaultDatabaseName(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the default name that would be used for this index.
            </summary>
            <param name="index"> The index. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <returns> The default name that would be used for this index. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.SetDatabaseName(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.String)">
            <summary>
                Sets the name of the index in the database.
            </summary>
            <param name="index"> The index. </param>
            <param name="name"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.SetName(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.String)">
            <summary>
                Sets the name of the index in the database.
            </summary>
            <param name="index"> The index. </param>
            <param name="name"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.SetDatabaseName(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.String,System.Boolean)">
            <summary>
                Sets the name of the index in the database.
            </summary>
            <param name="index"> The index. </param>
            <param name="name"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.SetName(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.String,System.Boolean)">
            <summary>
                Sets the name of the index in the database.
            </summary>
            <param name="index"> The index. </param>
            <param name="name"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetDatabaseNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the name of the index in the database.
            </summary>
            <param name="index"> The index. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the name of the index in the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the name of the index in the database.
            </summary>
            <param name="index"> The index. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the name of the index in the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetFilter(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Returns the index filter expression.
            </summary>
            <param name="index"> The index. </param>
            <returns> The index filter expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetFilter(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the index filter expression.
            </summary>
            <param name="index"> The index. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The index filter expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.SetFilter(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,System.String)">
            <summary>
                Sets the index filter expression.
            </summary>
            <param name="index"> The index. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.SetFilter(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,System.String,System.Boolean)">
            <summary>
                Sets the index filter expression.
            </summary>
            <param name="index"> The index. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetFilterConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the index filter expression.
            </summary>
            <param name="index"> The index. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the index filter expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.GetMappedTableIndexes(Microsoft.EntityFrameworkCore.Metadata.IIndex)">
            <summary>
                Gets the table indexes to which the index is mapped.
            </summary>
            <param name="index"> The index. </param>
            <returns> The table indexes to which the index is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.FindSharedObjectRootIndex(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IIndex" /> that is mapped to the same index in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="index"> The index. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The index found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.FindSharedObjectRootIndex(Microsoft.EntityFrameworkCore.Metadata.IMutableIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableIndex" /> that is mapped to the same index in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="index"> The index. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The index found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalIndexExtensions.FindSharedObjectRootIndex(Microsoft.EntityFrameworkCore.Metadata.IConventionIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionIndex" /> that is mapped to the same index in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="index"> The index. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The index found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions">
            <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions.HasName(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder,System.String)">
            <summary>
                Configures the name of the key constraint in the database when targeting a relational database.
            </summary>
            <param name="keyBuilder"> The builder for the key being configured. </param>
            <param name="name"> The name of the key. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions.HasName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.KeyBuilder{``0},System.String)">
            <summary>
                Configures the name of the key constraint in the database when targeting a relational database.
            </summary>
            <param name="keyBuilder"> The builder for the key being configured. </param>
            <param name="name"> The name of the key. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions.HasName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder,System.String,System.Boolean)">
            <summary>
                Configures the name of the key constraint in the database when targeting a relational database.
            </summary>
            <param name="keyBuilder"> The builder for the key being configured. </param>
            <param name="name"> The name of the key. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyBuilderExtensions.CanSetName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionKeyBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given name can be set for the key constraint.
            </summary>
            <param name="keyBuilder"> The builder for the key being configured. </param>
            <param name="name"> The name of the index. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given name can be set for the key constraint. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalKeyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" /> for relational database metadata.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.GetName(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                Returns the key constraint name for this key.
            </summary>
            <param name="key"> The key. </param>
            <returns> The key constraint name for this key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.GetName(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the key constraint name for this key for a particular table.
            </summary>
            <param name="key"> The key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The key constraint name for this key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.GetDefaultName(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                Returns the default key constraint name that would be used for this key.
            </summary>
            <param name="key"> The key. </param>
            <returns> The default key constraint name that would be used for this key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.GetDefaultName(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the default key constraint name that would be used for this key for a particular table.
            </summary>
            <param name="key"> The key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The default key constraint name that would be used for this key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.SetName(Microsoft.EntityFrameworkCore.Metadata.IMutableKey,System.String)">
            <summary>
                Sets the key constraint name for this key.
            </summary>
            <param name="key"> The key. </param>
            <param name="name"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.SetName(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,System.String,System.Boolean)">
            <summary>
                Sets the key constraint name for this key.
            </summary>
            <param name="key"> The key. </param>
            <param name="name"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.GetNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionKey)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the constraint name.
            </summary>
            <param name="key"> The key. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the constraint name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.GetMappedConstraints(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                Gets the unique constraints to which the key is mapped.
            </summary>
            <param name="key"> The key. </param>
            <returns> The unique constraints to which the key is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.FindSharedObjectRootKey(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IKey" /> that is mapped to the same constraint in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="key"> The key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The key found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.FindSharedObjectRootKey(Microsoft.EntityFrameworkCore.Metadata.IMutableKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableKey" /> that is mapped to the same constraint in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="key"> The key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The key found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalKeyExtensions.FindSharedObjectRootKey(Microsoft.EntityFrameworkCore.Metadata.IConventionKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionKey" /> that is mapped to the same constraint in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="key"> The key. </param>
            <param name="storeObject"> The identifier of the containing store object. </param>
            <returns> The key found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions">
            <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="schema">The schema of the sequence. </param>
            <returns> A builder to further configure the sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder})">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="builderAction"> An action that performs configuration of the sequence. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder})">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="schema">The schema of the sequence. </param>
            <param name="builderAction"> An action that performs configuration of the sequence. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String)">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <param name="type"> The type of values the sequence will generate. </param>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="schema">The schema of the sequence. </param>
            <returns> A builder to further configure the sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder})">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <param name="type"> The type of values the sequence will generate. </param>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="builderAction"> An action that performs configuration of the sequence. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.ModelBuilder,System.Type,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder})">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <param name="type"> The type of values the sequence will generate. </param>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="schema">The schema of the sequence. </param>
            <param name="builderAction"> An action that performs configuration of the sequence. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String)">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <typeparam name="T"> The type of values the sequence will generate. </typeparam>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="schema">The schema of the sequence. </param>
            <returns> A builder to further configure the sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder})">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <typeparam name="T"> The type of values the sequence will generate. </typeparam>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="builderAction"> An action that performs configuration of the sequence. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String,System.String,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder})">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <typeparam name="T"> The type of values the sequence will generate. </typeparam>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="schema">The schema of the sequence. </param>
            <param name="builderAction"> An action that performs configuration of the sequence. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasSequence(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.String,System.Boolean)">
            <summary>
                Configures a database sequence when targeting a relational database.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="schema">The schema of the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> A builder to further configure the sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.MethodInfo)">
            <summary>
                Configures a database function when targeting a relational database.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="methodInfo"> The methodInfo this dbFunction uses. </param>
            <returns> A builder to further configure the function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
                Configures a database function when targeting a relational database.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="expression"> The method this dbFunction uses. </param>
            <returns> A builder to further configure the function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction(Microsoft.EntityFrameworkCore.ModelBuilder,System.Reflection.MethodInfo,System.Action{Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder})">
            <summary>
                Configures a database function when targeting a relational database.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="methodInfo"> The methodInfo this dbFunction uses. </param>
            <param name="builderAction"> An action that performs configuration of the sequence. </param>
            <returns> A builder to further configure the function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
                Configures a relational database function.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="methodInfo"> The method this function uses. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> A builder to further configure the function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDbFunction(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Type,System.Boolean)">
            <summary>
                Configures a relational database function.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="name"> The name of the function. </param>
            <param name="returnType"> The function's return type. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> A builder to further configure the function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDefaultSchema(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
                Configures the default schema that database objects should be created in, if no schema
                is explicitly configured.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="schema"> The default schema. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasDefaultSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Configures the default schema that database objects should be created in, if no schema
                is explicitly configured.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="schema"> The default schema. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.CanSetDefaultSchema(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given schema can be set as default.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="schema"> The default schema. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given schema can be set as default. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.HasMaxIdentifierLength(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Configures the maximum length allowed for store identifiers.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="length"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.CanSetMaxIdentifierLength(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Returns a value indicating whether the maximum length allowed for store identifiers can be set.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="length"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the maximum length allowed for store identifiers can be set. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
                Configures the database collation, which will be used by all columns without an explicit collation.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation"> The collation. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Configures the database collation, which will be used by all columns without an explicit collation.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation"> The collation. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelBuilderExtensions.CanSetCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given collation can be set as default.
            </summary>
            <param name="modelBuilder"> The model builder. </param>
            <param name="collation"> The collation. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given collation can be set as default. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalModelExtensions">
            <summary>
                Relational-specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> and extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="model"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetDefaultSchema(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Returns the default schema to use for the model, or <see langword="null" /> if none has been set.
            </summary>
            <param name="model"> The model to get the default schema for. </param>
            <returns> The default schema. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.SetDefaultSchema(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Sets the default schema.
            </summary>
            <param name="model"> The model to set the default schema for. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.SetDefaultSchema(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Sets the default schema.
            </summary>
            <param name="model"> The model to set the default schema for. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured schema. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetDefaultSchemaConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the configuration source for the default schema.
            </summary>
            <param name="model"> The model to find configuration source for. </param>
            <returns> The configuration source for the default schema. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetRelationalModel(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Returns the database model.
            </summary>
            <param name="model"> The model to get the database model for. </param>
            <returns> The database model. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetMaxIdentifierLength(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Returns the maximum length allowed for store identifiers.
            </summary>
            <param name="model"> The model to get the maximum identifier length for. </param>
            <returns> The maximum identifier length. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.SetMaxIdentifierLength(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Nullable{System.Int32})">
            <summary>
                Sets the maximum length allowed for store identifiers.
            </summary>
            <param name="model"> The model to set the default schema for. </param>
            <param name="length"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.SetMaxIdentifierLength(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Sets the maximum length allowed for store identifiers.
            </summary>
            <param name="model"> The model to set the default schema for. </param>
            <param name="length"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetMaxIdentifierLengthConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the configuration source for <see cref="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetMaxIdentifierLength(Microsoft.EntityFrameworkCore.Metadata.IModel)" />.
            </summary>
            <param name="model"> The model to find configuration source for. </param>
            <returns> The configuration source for <see cref="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetMaxIdentifierLength(Microsoft.EntityFrameworkCore.Metadata.IModel)" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.FindSequence(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> with the given name.
            </summary>
            <param name="model"> The model to find the sequence in. </param>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema that contains the sequence. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> or <see langword="null" /> if no sequence with the given name in
                the given schema was found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.FindSequence(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" /> with the given name.
            </summary>
            <param name="model"> The model to find the sequence in. </param>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema that contains the sequence. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" /> or <see langword="null" /> if no sequence with the given name in
                the given schema was found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.FindSequence(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence" /> with the given name.
            </summary>
            <param name="model"> The model to find the sequence in. </param>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema that contains the sequence. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence" /> or <see langword="null" /> if no sequence with the given name in
                the given schema was found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.AddSequence(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String,System.String)">
            <summary>
                Either returns the existing <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" /> with the given name in the given schema
                or creates a new sequence with the given name and schema.
            </summary>
            <param name="model"> The model to add the sequence to. </param>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema name, or <see langword="null" /> to use the default schema. </param>
            <returns> The sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.AddSequence(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.String,System.Boolean)">
            <summary>
                Either returns the existing <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" /> with the given name in the given schema
                or creates a new sequence with the given name and schema.
            </summary>
            <param name="model"> The model to add the sequence to. </param>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema name, or <see langword="null" /> to use the default schema. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.RemoveSequence(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String,System.String)">
            <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" /> with the given name.
            </summary>
            <param name="model"> The model to find the sequence in. </param>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema that contains the sequence. </param>
            <returns>
                The removed <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" /> or <see langword="null" /> if no sequence with the given name in
                the given schema was found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.RemoveSequence(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.String)">
            <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence" /> with the given name.
            </summary>
            <param name="model"> The model to find the sequence in. </param>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema that contains the sequence. </param>
            <returns>
                The removed <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence" /> or <see langword="null" /> if no sequence with the given name in
                the given schema was found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetSequences(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Returns all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />s contained in the model.
            </summary>
            <param name="model"> The model to get the sequences in. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetSequences(Microsoft.EntityFrameworkCore.Metadata.IMutableModel)">
            <summary>
                Returns all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" />s contained in the model.
            </summary>
            <param name="model"> The model to get the sequences in. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetSequences(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence" />s contained in the model.
            </summary>
            <param name="model"> The model to get the sequences in. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.FindDbFunction(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Reflection.MethodInfo)">
            <summary>
                Finds a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" /> that is mapped to the method represented by the given <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="method"> The <see cref="T:System.Reflection.MethodInfo" /> for the method that is mapped to the function. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.FindDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Reflection.MethodInfo)">
            <summary>
                Finds a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> that is mapped to the method represented by the given <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="method"> The <see cref="T:System.Reflection.MethodInfo" /> for the method that is mapped to the function. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.FindDbFunction(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Reflection.MethodInfo)">
            <summary>
                Finds a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> that is mapped to the method represented by the given <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="method"> The <see cref="T:System.Reflection.MethodInfo" /> for the method that is mapped to the function. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.FindDbFunction(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" /> that is mapped to the method represented by the given name.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="name"> The model name of the function. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.FindDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> that is mapped to the method represented by the given name.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="name"> The model name of the function. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.FindDbFunction(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> that is mapped to the method represented by the given name.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="name"> The model name of the function. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.AddDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Reflection.MethodInfo)">
            <summary>
                Creates an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> mapped to the given method.
            </summary>
            <param name="model"> The model to add the function to. </param>
            <param name="methodInfo"> The <see cref="T:System.Reflection.MethodInfo" /> for the method that is mapped to the function. </param>
            <returns> The new <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.AddDbFunction(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Reflection.MethodInfo,System.Boolean)">
            <summary>
                Creates an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> mapped to the given method.
            </summary>
            <param name="model"> The model to add the function to. </param>
            <param name="methodInfo"> The <see cref="T:System.Reflection.MethodInfo" /> for the method that is mapped to the function. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The new <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.AddDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String,System.Type)">
            <summary>
                Creates an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />.
            </summary>
            <param name="model"> The model to add the function to. </param>
            <param name="name"> The model name of the function. </param>
            <param name="returnType"> The function return type. </param>
            <returns> The new <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.AddDbFunction(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Type,System.Boolean)">
            <summary>
                Creates an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" />.
            </summary>
            <param name="model"> The model to add the function to. </param>
            <param name="name"> The model name of the function. </param>
            <param name="returnType"> The function return type. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The new <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.RemoveDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Reflection.MethodInfo)">
            <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> that is mapped to the method represented by the given
                <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="method"> The <see cref="T:System.Reflection.MethodInfo" /> for the method that is mapped to the function. </param>
            <returns> The removed <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.RemoveDbFunction(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.Reflection.MethodInfo)">
            <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> that is mapped to the method represented by the given
                <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="method"> The <see cref="T:System.Reflection.MethodInfo" /> for the method that is mapped to the function. </param>
            <returns> The removed <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.RemoveDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> that is mapped to the method represented by the given
                <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="name"> The model name of the function. </param>
            <returns> The removed <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.RemoveDbFunction(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String)">
            <summary>
                Removes the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> that is mapped to the method represented by the given
                <see cref="T:System.Reflection.MethodInfo" />.
            </summary>
            <param name="model"> The model to find the function in. </param>
            <param name="name"> The model name of the function. </param>
            <returns> The removed <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> or <see langword="null" /> if the method is not mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetDbFunctions(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Returns all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" />s contained in the model.
            </summary>
            <param name="model"> The model to get the functions in. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetDbFunctions(Microsoft.EntityFrameworkCore.Metadata.IMutableModel)">
            <summary>
                Returns all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />s contained in the model.
            </summary>
            <param name="model"> The model to get the functions in. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetDbFunctions(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" />s contained in the model.
            </summary>
            <param name="model"> The model to get the functions in. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetCollation(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Returns the database collation.
            </summary>
            <param name="model"> The model to get the collation for. </param>
            <returns> The collation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.SetCollation(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                Sets the database collation.
            </summary>
            <param name="model"> The model to set the collation for. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.SetCollation(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,System.String,System.Boolean)">
            <summary>
                Sets the database collation.
            </summary>
            <param name="model"> The model to set the collation for. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured collation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalModelExtensions.GetCollationConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionModel)">
            <summary>
                Returns the configuration source for the collation.
            </summary>
            <param name="model"> The model to find configuration source for. </param>
            <returns> The configuration source for the collation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalOwnedNavigationBuilderExtensions">
            <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalOwnedNavigationBuilderExtensions.HasCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder,System.String,System.String)">
            <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
            <param name="ownedNavigationBuilder"> The navigation builder for the owned type. </param>
            <param name="name"> The name of the check constraint. </param>
            <param name="sql"> The logical constraint sql used in the check constraint. </param>
            <returns> A builder to further configure the navigation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalOwnedNavigationBuilderExtensions.HasCheckConstraint``2(Microsoft.EntityFrameworkCore.Metadata.Builders.OwnedNavigationBuilder{``0,``1},System.String,System.String)">
            <summary>
                Configures a database check constraint when targeting a relational database.
            </summary>
            <typeparam name="TEntity"> The entity type owning the relationship. </typeparam>
            <typeparam name="TDependentEntity"> The dependent entity type of the relationship. </typeparam>
            <param name="ownedNavigationBuilder"> The navigation builder for the owned type. </param>
            <param name="name"> The name of the check constraint. </param>
            <param name="sql"> The logical constraint sql used in the check constraint. </param>
            <returns> A builder to further configure the navigation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions">
            <summary>
                Relational database specific extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
                Configures the column that the property maps to when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="name"> The name of the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)">
            <summary>
                Configures the column that the property maps to when targeting a relational database.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="name"> The name of the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Configures the column that the property maps to when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="name"> The name of the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Configures the column that the property maps to in a particular table-like store object.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="name"> The name of the column. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given column can be set for the property.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="name"> The name of the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the property can be mapped to the given column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetColumnName(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Returns a value indicating whether the given column for a particular table-like store object can be set for the property.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="name"> The name of the column. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the property can be mapped to the given column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
                Configures the data type of the column that the property maps to when targeting a relational database.
                This should be the complete type name, including precision, scale, length, etc.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="typeName"> The name of the data type of the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnType``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)">
            <summary>
                Configures the data type of the column that the property maps to when targeting a relational database.
                This should be the complete type name, including precision, scale, length, etc.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="typeName"> The name of the data type of the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Configures the data type of the column that the property maps to when targeting a relational database.
                This should be the complete type name, including precision, scale, length, etc.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="typeName"> The name of the data type of the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetColumnType(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given data type can be set for the property.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="typeName"> The name of the data type of the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given data type can be set for the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsFixedLength(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Boolean)">
            <summary>
                Configures the property as capable of storing only fixed-length data, such as strings.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="fixedLength"> A value indicating whether the property is constrained to fixed length values. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsFixedLength``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Boolean)">
            <summary>
                Configures the property as capable of storing only fixed-length data, such as strings.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="fixedLength"> A value indicating whether the property is constrained to fixed length values. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsFixedLength(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Configures the property as capable of storing only fixed-length data, such as strings.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="fixedLength"> A value indicating whether the property is constrained to fixed length values. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetIsFixedLength(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the property can be configured as being fixed length or not.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="fixedLength"> A value indicating whether the property is constrained to fixed length values. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the property can be configured as being fixed length or not. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)">
            <summary>
                <para>
                    Configures the default value expression for the column that the property maps to when targeting a
                    relational database.
                </para>
                <para>
                    When called with no argument, this method tells EF that a column has a default value constraint of
                    some sort without needing to specify exactly what it is. This can be useful when mapping EF to an
                    existing database.
                </para>
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
                Configures the default value expression for the column that the property maps to when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression for the default value of the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <summary>
                <para>
                    Configures the default value expression for the column that the property maps to when targeting a
                    relational database.
                </para>
                <para>
                    When called with no argument, this method tells EF that a column has a default value constraint of
                    some sort without needing to specify exactly what it is. This can be useful when mapping EF to an
                    existing database.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)">
            <summary>
                Configures the default value expression for the column that the property maps to when targeting a relational database.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression for the default value of the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Configures the default value expression for the column that the property maps to when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression for the default value of the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given default value expression can be set for the column.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression for the default value of the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given default value expression can be set for the column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)">
            <summary>
                <para>
                    Configures the property to map to a computed column when targeting a relational database.
                </para>
                <para>
                    When called with no arguments, this method tells EF that a column is computed without needing to
                    specify the actual SQL used to computed it. This can be useful when mapping EF to an existing
                    database.
                </para>
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
                Configures the property to map to a computed column when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression that computes values for the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String,System.Nullable{System.Boolean})">
            <summary>
                Configures the property to map to a computed column when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression that computes values for the column. </param>
            <param name="stored">
                If <see langword="true" />, the computed value is calculated on row modification and stored in the database like a regular column.
                If <see langword="false" />, the value is computed when the value is read, and does not occupy any actual storage.
                <see langword="null" /> selects the database provider default.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <summary>
                <para>
                    Configures the property to map to a computed column when targeting a relational database.
                </para>
                <para>
                    When called with no arguments, this method tells EF that a column is computed without needing to
                    specify the actual SQL used to computed it. This can be useful when mapping EF to an existing
                    database.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)">
            <summary>
                Configures the property to map to a computed column when targeting a relational database.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression that computes values for the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String,System.Nullable{System.Boolean})">
            <summary>
                Configures the property to map to a computed column when targeting a relational database.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression that computes values for the column. </param>
            <param name="stored">
                If <see langword="true" />, the computed value is calculated on row modification and stored in the database like a regular column.
                If <see langword="false" />, the value is computed when the value is read, and does not occupy any actual storage.
                <see langword="null" /> selects the database provider default.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Configures the property to map to a computed column when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression that computes values for the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.IsStoredComputedColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Configures the property to map to a computed column of the given type when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="stored">
                If <see langword="true" />, the computed value is calculated on row modification and stored in the database like a regular column.
                If <see langword="false" />, the value is computed when the value is read, and does not occupy any actual storage.
                <see langword="null" /> selects the database provider default.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied, <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given computed value SQL expression can be set for the column.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="sql"> The SQL expression that computes values for the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given computed value SQL expression can be set for the column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetIsStoredComputedColumn(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the given computed column type can be set for the column.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="stored">
                If <see langword="true" />, the computed value is calculated on row modification and stored in the database like a regular column.
                If <see langword="false" />, the value is computed when the value is read, and does not occupy any actual storage.
                <see langword="null" /> selects the database provider default.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given computed column type can be set for the column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder)">
            <summary>
                <para>
                    Configures the default value for the column that the property maps
                    to when targeting a relational database.
                </para>
                <para>
                    When called with no argument, this method tells EF that a column has a default
                    value constraint of some sort without needing to specify exactly what it is.
                    This can be useful when mapping EF to an existing database.
                </para>
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.Object)">
            <summary>
                Configures the default value for the column that the property maps
                to when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="value"> The default value of the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <summary>
                <para>
                    Configures the default value for the column that the property maps
                    to when targeting a relational database.
                </para>
                <para>
                    When called with no argument, this method tells EF that a column has a default
                    value constraint of some sort without needing to specify exactly what it is.
                    This can be useful when mapping EF to an existing database.
                </para>
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.Object)">
            <summary>
                Configures the default value for the column that the property maps
                to when targeting a relational database.
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="value"> The default value of the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Object,System.Boolean)">
            <summary>
                Configures the default value for the column that the property maps to when targeting a relational database.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="value"> The default value of the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetDefaultValue(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.Object,System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as default for the column.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="value"> The default value of the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given value can be set as default for the column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComment(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
                Configures a comment to be applied to the column
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="comment"> The comment for the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComment``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)">
            <summary>
                Configures a comment to be applied to the column
            </summary>
            <typeparam name="TProperty"> The type of the property being configured. </typeparam>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="comment"> The comment for the column. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.HasComment(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Configures a comment to be applied to the column
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="comment"> The comment for the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetComment(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as comment for the column.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="comment"> The comment for the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given value can be set as default for the column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder,System.String)">
            <summary>
                Configures the property to use the given collation. The database column will be be created with the given
                collation, and it will be used implicitly in all collation-sensitive operations.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="collation"> The collation for the column. </param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.UseCollation``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},System.String)">
            <summary>
                Configures the property to use the given collation. The database column will be be created with the given
                collation, and it will be used implicitly in all collation-sensitive operations.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="collation"> The collation for the column. </param>
            <returns>The same builder instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.UseCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Configures the property to use the given collation. The database column will be be created with the given
                collation, and it will be used implicitly in all collation-sensitive operations.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="collation"> The collation. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyBuilderExtensions.CanSetCollation(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given value can be set as the collation.
            </summary>
            <param name="propertyBuilder"> The builder for the property being configured. </param>
            <param name="collation"> The collation. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given value can be set as default for the column. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> for relational database metadata.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetColumnName(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the name of the table column to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <returns> The name of the table column to which the property is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetColumnBaseName(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the base name of the column to which the property would be mapped.
            </summary>
            <param name="property"> The property. </param>
            <returns> The the base name of the column to which the property would be mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetColumnName(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the name of the column to which the property is mapped for a particular table.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The name of the column to which the property is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultColumnName(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the default table column name to which the property would be mapped.
            </summary>
            <param name="property"> The property. </param>
            <returns> The default table column name to which the property would be mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultColumnBaseName(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the default base name of the column to which the property would be mapped
            </summary>
            <param name="property"> The property. </param>
            <returns> The default base column name to which the property would be mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultColumnName(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the default column name to which the property would be mapped.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The default column name to which the property would be mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetColumnName(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Sets the column to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <param name="name"> The name to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetColumnName(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Sets the column to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <param name="name"> The name to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetColumnName(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Sets the column to which the property is mapped for a particular table-like store object.
            </summary>
            <param name="property"> The property. </param>
            <param name="name"> The name to set. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetColumnName(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                Sets the column to which the property is mapped for a particular table-like store object.
            </summary>
            <param name="property"> The property. </param>
            <param name="name"> The name to set. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetColumnNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column name.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetColumnNameConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column name for a particular table-like store object.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column name for a particular table-like store object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetColumnType(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the database type of the column to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <returns> The database type of the column to which the property is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetColumnType(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the database type of the column to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The database type of the column to which the property is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetColumnType(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Sets the database type of the column to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetColumnType(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Sets the database type of the column to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetColumnTypeConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column name.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultColumnMappings(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the default columns to which the property would be mapped.
            </summary>
            <param name="property"> The property. </param>
            <returns> The default columns to which the property would be mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetTableColumnMappings(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the table columns to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <returns> The table columns to which the property is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetViewColumnMappings(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the view columns to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <returns> The view columns to which the property is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetSqlQueryColumnMappings(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the SQL query columns to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <returns> The SQL query columns to which the property is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetFunctionColumnMappings(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the function columns to which the property is mapped.
            </summary>
            <param name="property"> The property. </param>
            <returns> The function columns to which the property is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the column corresponding to this property if it's mapped to the given table-like store object.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The column to which the property is mapped. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the SQL expression that is used as the default value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <returns> The SQL expression that is used as the default value for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the SQL expression that is used as the default value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The SQL expression that is used as the default value for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Sets the SQL expression that is used as the default value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetDefaultValueSql(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Sets the SQL expression that is used as the default value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultValueSqlConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default value SQL expression.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default value SQL expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the SQL expression that is used as the computed value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <returns> The SQL expression that is used as the computed value for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the SQL expression that is used as the computed value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The SQL expression that is used as the computed value for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Sets the SQL expression that is used as the computed value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetComputedColumnSql(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Sets the SQL expression that is used as the computed value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetComputedColumnSqlConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the computed value SQL expression.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the computed value SQL expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetIsStored(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets whether the value of the computed column this property is mapped to is stored in the database, or calculated when
                it is read.
            </summary>
            <param name="property"> The property. </param>
            <returns>
                Whether the value of the computed column this property is mapped to is stored in the database,
                or calculated when it is read.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetIsStored(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets whether the value of the computed column this property is mapped to is stored in the database, or calculated when
                it is read.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns>
                Whether the value of the computed column this property is mapped to is stored in the database,
                or calculated when it is read.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetIsStored(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})">
            <summary>
                Sets whether the value of the computed column this property is mapped to is stored in the database, or calculated when
                it is read.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetIsStored(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets whether the value of the computed column this property is mapped to is stored in the database, or calculated when
                it is read.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetIsStoredConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the computed value SQL expression.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the computed value SQL expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the object that is used as the default value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <returns> The object that is used as the default value for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the object that is used as the default value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The object that is used as the default value for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Object)">
            <summary>
                Sets the object that is used as the default value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetDefaultValue(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Object,System.Boolean)">
            <summary>
                Sets the object that is used as the default value for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="value"> The value to set. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetDefaultValueConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default value.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the default value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetMaxLength(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets the maximum length of data that is allowed in this property. For example, if the property is a <see cref="T:System.String" />
                then this is the maximum number of characters.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The maximum length, or <see langword="null" /> if none if defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetPrecision(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets the precision of data that is allowed in this property.
                For example, if the property is a <see cref="T:System.Decimal" /> then this is the maximum number of digits.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The precision, or <see langword="null" /> if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetScale(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets the scale of data that is allowed in this property.
                For example, if the property is a <see cref="T:System.Decimal" /> then this is the maximum number of decimal places.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The scale, or <see langword="null" /> if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.IsUnicode(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets a value indicating whether or not the property can persist Unicode characters.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The Unicode setting, or <see langword="null" /> if none is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.IsFixedLength(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns a flag indicating if the property as capable of storing only fixed-length data, such as strings.
            </summary>
            <param name="property"> The property. </param>
            <returns> A flag indicating if the property as capable of storing only fixed-length data, such as strings. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.IsFixedLength(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns a flag indicating if the property as capable of storing only fixed-length data, such as strings.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> A flag indicating if the property as capable of storing only fixed-length data, such as strings. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetIsFixedLength(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.Nullable{System.Boolean})">
            <summary>
                Sets a flag indicating whether the property as capable of storing only fixed-length data, such as strings.
            </summary>
            <param name="property"> The property. </param>
            <param name="fixedLength"> A value indicating whether the property is constrained to fixed length values. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetIsFixedLength(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets a flag indicating whether the property as capable of storing only fixed-length data, such as strings.
            </summary>
            <param name="property"> The property. </param>
            <param name="fixedLength"> A value indicating whether the property is constrained to fixed length values. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetIsFixedLengthConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for <see cref="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.IsFixedLength(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for <see cref="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.IsFixedLength(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.IsColumnNullable(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                <para>
                    Checks whether the column mapped to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> will be nullable
                    when created in the database.
                </para>
                <para>
                    This depends on the property itself and also how it is mapped. For example,
                    derived non-nullable properties in a TPH type hierarchy will be mapped to nullable columns.
                    As well as properties on optional types sharing the same table.
                </para>
            </summary>
            <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />. </param>
            <returns> <see langword="true" /> if the mapped column is nullable; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.IsColumnNullable(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Checks whether the column mapped to the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> will be nullable
                    when created in the database.
                </para>
                <para>
                    This depends on the property itself and also how it is mapped. For example,
                    derived non-nullable properties in a TPH type hierarchy will be mapped to nullable columns.
                    As well as properties on optional types sharing the same table.
                </para>
            </summary>
            <param name="property"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> <see langword="true" /> if the mapped column is nullable; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetComment(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the comment for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <returns> The comment for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetComment(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the comment for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The comment for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetComment(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Configures a comment to be applied to the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="comment"> The comment for the column. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetComment(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Configures a comment to be applied to the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="comment"> The comment for the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetCommentConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column comment.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column comment. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetCollation(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the collation to be used for the column.
            </summary>
            <param name="property"> The property. </param>
            <returns> The collation for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetCollation(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the collation to be used for the column.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The collation for the column this property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetCollation(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,System.String)">
            <summary>
                Configures a collation to be used for column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="collation"> The collation for the column. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.SetCollation(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,System.String,System.Boolean)">
            <summary>
                Configures a collation to be used for the column this property is mapped to.
            </summary>
            <param name="property"> The property. </param>
            <param name="collation"> The collation for the column. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetCollationConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column collation.
            </summary>
            <param name="property"> The property. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource" /> for the column collation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetRelationalTypeMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> for the given property on a finalized model.
            </summary>
            <param name="property"> The property. </param>
            <returns> The type mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.FindRelationalMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> for the given property on a finalized model.
            </summary>
            <param name="property"> The property. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.FindRelationalTypeMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> for the given property on a finalized model.
            </summary>
            <param name="property"> The property. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.FindRelationalTypeMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> for the given property on a finalized model.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.FindSharedStoreObjectRootProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> that is mapped to the same column in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The property found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.FindSharedStoreObjectRootProperty(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> that is mapped to the same column in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The property found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.FindSharedStoreObjectRootProperty(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Finds the first <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> that is mapped to the same column in a shared table-like object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> The property found, or <see langword="null" /> if none was found.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.FindOverrides(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Returns the property facet overrides for a particular table-like store object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> An object that stores property facet overrides. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetOrCreateOverrides(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Returns the property facet overrides for a particular table-like store object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> An object that stores property facet overrides. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalPropertyExtensions.GetOrCreateOverrides(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                <para>
                    Returns the property facet overrides for a particular table-like store object.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> An object that stores property facet overrides. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions">
            <summary>
                Relational database specific extension methods for LINQ queries.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.CreateDbCommand(System.Linq.IQueryable)">
            <summary>
                <para>
                    Creates a <see cref="T:System.Data.Common.DbCommand" /> set up to execute this query.
                </para>
                <para>
                    This is only typically supported by queries generated by Entity Framework Core.
                </para>
                <para>
                    Warning: there is no guarantee that executing this command directly will result in the same behavior as if EF Core had
                    executed the command.
                </para>
                <para>
                    Note that DbCommand is an <see cref="T:System.IDisposable" /> object. The caller is responsible for disposing the returned
                    command.
                </para>
                <para>
                    This is only typically supported by queries generated by Entity Framework Core.
                </para>
            </summary>
            <param name="source"> The query source. </param>
            <returns> The query string for debugging. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSqlRaw``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.String,System.Object[])">
            <summary>
                <para>
                    Creates a LINQ query based on a raw SQL query.
                </para>
                <para>
                    If the database provider supports composing on the supplied SQL, you can compose on top of the raw SQL query using
                    LINQ operators: <c>context.Blogs.FromSqlRaw("SELECT * FROM dbo.Blogs").OrderBy(b => b.Name)</c>.
                </para>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include parameter place holders in the SQL query string and then supply parameter values as additional
                    arguments. Any parameter values you supply will automatically be converted to a DbParameter:
                </para>
                <code>context.Blogs.FromSqlRaw("SELECT * FROM [dbo].[SearchBlogs]({0})", userSuppliedSearchTerm)</code>
                <para>
                    However, <b>never</b> pass a concatenated or interpolated string (<c>$""</c>) with non-validated user-provided values
                    into this method. Doing so may expose your application to SQL injection attacks. To use the interpolated string syntax,
                    consider using <see cref="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSqlInterpolated``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.FormattableString)" /> to create parameters.
                </para>
                <para>
                    This overload also accepts DbParameter instances as parameter values. This allows you to use named
                    parameters in the SQL query string:
                </para>
                <code>context.Blogs.FromSqlRaw("SELECT * FROM [dbo].[SearchBlogs]({@searchTerm})", new SqlParameter("@searchTerm", userSuppliedSearchTerm))</code>
            </summary>
            <typeparam name="TEntity"> The type of the elements of <paramref name="source" />. </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to use as the base of the raw SQL query (typically a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />).
            </param>
            <param name="sql"> The raw SQL query. </param>
            <param name="parameters"> The values to be assigned to parameters. </param>
            <returns> An <see cref="T:System.Linq.IQueryable`1" /> representing the raw SQL query. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.FromSqlInterpolated``1(Microsoft.EntityFrameworkCore.DbSet{``0},System.FormattableString)">
            <summary>
                <para>
                    Creates a LINQ query based on an interpolated string representing a SQL query.
                </para>
                <para>
                    If the database provider supports composing on the supplied SQL, you can compose on top of the raw SQL query using
                    LINQ operators:
                </para>
                <code>context.Blogs.FromSqlInterpolated($"SELECT * FROM dbo.Blogs").OrderBy(b => b.Name)</code>
                <para>
                    As with any API that accepts SQL it is important to parameterize any user input to protect against a SQL injection
                    attack. You can include interpolated parameter place holders in the SQL query string. Any interpolated parameter values
                    you supply will automatically be converted to a DbParameter:
                </para>
                <code>context.Blogs.FromSqlInterpolated($"SELECT * FROM [dbo].[SearchBlogs]({userSuppliedSearchTerm})")</code>
            </summary>
            <typeparam name="TEntity"> The type of the elements of <paramref name="source" />. </typeparam>
            <param name="source">
                An <see cref="T:System.Linq.IQueryable`1" /> to use as the base of the interpolated string SQL query (typically a <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" />).
            </param>
            <param name="sql"> The interpolated string representing a SQL query with parameters. </param>
            <returns> An <see cref="T:System.Linq.IQueryable`1" /> representing the interpolated string SQL query. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.AsSingleQuery``1(System.Linq.IQueryable{``0})">
            <summary>
                <para>
                    Returns a new query which is configured to load the collections in the query results in a single database query.
                </para>
                <para>
                    This behavior generally guarantees result consistency in the face of concurrent updates
                    (but details may vary based on the database and transaction isolation level in use).
                    However, this can cause performance issues when the query loads multiple related collections.
                </para>
                <para>
                    The default query splitting behavior for queries can be controlled by
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.UseQuerySplittingBehavior(Microsoft.EntityFrameworkCore.QuerySplittingBehavior)" />.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <returns> A new query where collections will be loaded through single database query. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.RelationalQueryableExtensions.AsSplitQuery``1(System.Linq.IQueryable{``0})">
            <summary>
                <para>
                    Returns a new query which is configured to load the collections in the query results through separate database queries.
                </para>
                <para>
                    This behavior can significantly improve performance when the query loads multiple collections.
                    However, since separate queries are used, this can result in inconsistent results when concurrent updates occur.
                    Serializable or snapshot transactions can be used to mitigate this
                    and achieve consistency with split queries, but that may bring other performance costs and behavioral difference.
                </para>
                <para>
                    The default query splitting behavior for queries can be controlled by
                    <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.UseQuerySplittingBehavior(Microsoft.EntityFrameworkCore.QuerySplittingBehavior)" />.
                </para>
            </summary>
            <typeparam name="TEntity"> The type of entity being queried. </typeparam>
            <param name="source"> The source query. </param>
            <returns> A new query where collections will be loaded through separate database queries. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkRelationalServicesBuilder">
            <summary>
                <para>
                    A builder API designed for relational database providers to use when registering services.
                </para>
                <para>
                    Providers should create an instance of this class, use its methods to register
                    services, and then call <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkRelationalServicesBuilder.TryAddCoreServices" /> to fill out the remaining Entity
                    Framework services.
                </para>
                <para>
                    Entity Framework ensures that services are registered with the appropriate scope. In some cases a provider
                    may register a service with a different scope, but great care must be taken that all its dependencies
                    can handle the new scope, and that it does not cause issue for services that depend on it.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkRelationalServicesBuilder.RelationalServices">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    This dictionary is exposed for testing and provider-validation only.
                    It should not be used from application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkRelationalServicesBuilder.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Used by relational database providers to create a new <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkRelationalServicesBuilder" /> for
                registration of provider services.
            </summary>
            <param name="serviceCollection"> The collection to which services will be registered. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkRelationalServicesBuilder.GetServiceCharacteristics(System.Type)">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCharacteristics" /> for the given service type.
            </summary>
            <param name="serviceType"> The type that defines the service API. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ServiceCharacteristics" /> for the type. </returns>
            <exception cref="T:System.InvalidOperationException"> when the type is not an EF service. </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.EntityFrameworkRelationalServicesBuilder.TryAddCoreServices">
            <summary>
                Registers default implementations of all services, including relational services, not already
                registered by the provider. Relational database providers must call this method as the last
                step of service registration--that is, after all provider services have been registered.
            </summary>
            <returns> This builder, such that further calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.IRelationalDbContextOptionsBuilderInfrastructure">
            <summary>
                Explicitly implemented by <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2" /> to hide
                methods that are used by database provider extension methods but not intended to be called by application
                developers.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.IRelationalDbContextOptionsBuilderInfrastructure.OptionsBuilder">
            <summary>
                Gets the core options builder.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot">
            <summary>
                Base class for the snapshot of the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> state generated by Migrations.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot.Model">
            <summary>
                The snapshot model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot.BuildModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
                Called lazily by <see cref="P:Microsoft.EntityFrameworkCore.Infrastructure.ModelSnapshot.Model" /> to build the model snapshot
                the first time it is requested.
            </summary>
            <param name="modelBuilder"> The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> to use to build the model. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2">
            <summary>
                <para>
                    Allows relational database specific configuration to be performed on <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptions" />.
                </para>
                <para>
                    Instances of this class are typically returned from methods that configure the context to use a
                    particular relational database provider.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.#ctor(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2" /> class.
            </summary>
            <param name="optionsBuilder"> The core options builder. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.OptionsBuilder">
            <summary>
                Gets the core options builder.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.Microsoft#EntityFrameworkCore#Infrastructure#IRelationalDbContextOptionsBuilderInfrastructure#OptionsBuilder">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.MaxBatchSize(System.Int32)">
            <summary>
                Configures the maximum number of statements that will be included in commands sent to the database
                during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
            </summary>
            <param name="maxBatchSize"> The maximum number of statements. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.MinBatchSize(System.Int32)">
            <summary>
                Configures the minimum number of statements that are needed for a multi-statement command sent to the database
                during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />.
            </summary>
            <param name="minBatchSize"> The minimum number of statements. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.CommandTimeout(System.Nullable{System.Int32})">
            <summary>
                Configures the wait time (in seconds) before terminating the attempt to execute a command and generating an error.
            </summary>
            <param name="commandTimeout"> The time in seconds to wait for the command to execute. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.MigrationsAssembly(System.String)">
            <summary>
                Configures the assembly where migrations are maintained for this context.
            </summary>
            <param name="assemblyName"> The name of the assembly. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.MigrationsHistoryTable(System.String,System.String)">
            <summary>
                Configures the name of the table used to record which migrations have been applied to the database.
            </summary>
            <param name="tableName"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.UseRelationalNulls(System.Boolean)">
            <summary>
                Configures the context to use relational database semantics when comparing null values. By default,
                Entity Framework will use C# semantics for null values, and generate SQL to compensate for differences
                in how the database handles nulls.
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.UseQuerySplittingBehavior(Microsoft.EntityFrameworkCore.QuerySplittingBehavior)">
            <summary>
                Configures the <see cref="T:Microsoft.EntityFrameworkCore.QuerySplittingBehavior" /> to use when loading related collections in a query.
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.ExecutionStrategy(System.Func{Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy})">
            <summary>
                Configures the context to use the provided <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />.
            </summary>
            <param name="getExecutionStrategy"> A function that returns a new instance of an execution strategy. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.WithOption(System.Func{`1,`1})">
            <summary>
                Sets an option by cloning the extension used to store the settings. This ensures the builder
                does not modify options that are already in use elsewhere.
            </summary>
            <param name="setAction"> An action to set the option. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalDbContextOptionsBuilder`2.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelCustomizer">
            <summary>
                <para>
                    Builds the model for a given context.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelCustomizer.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelCustomizerDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelCustomizer" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator">
            <summary>
                <para>
                    The validator that enforces rules common for all relational providers.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ModelValidatorDependencies,Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.RelationalDependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.ModelValidator" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.Validate(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates a model, throwing an exception if any errors are found.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSqlQueries(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the mapping/configuration of SQL queries in the model.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateDbFunctions(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the mapping/configuration of functions in the model.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateBoolsWithDefaults(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the mapping/configuration of <see cref="T:System.Boolean" /> properties in the model.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateDefaultValuesOnKeys(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the mapping/configuration of default values in the model.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedTableCompatibility(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the mapping/configuration of shared tables in the model.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedTableCompatibility(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType},System.String,System.String,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of entity types sharing a given table.
            </summary>
            <param name="mappedTypes"> The mapped entity types. </param>
            <param name="tableName"> The table name. </param>
            <param name="schema"> The schema. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedViewCompatibility(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the mapping/configuration of shared views in the model.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedViewCompatibility(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType},System.String,System.String,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of entity types sharing a given view.
            </summary>
            <param name="mappedTypes"> The mapped entity types. </param>
            <param name="viewName"> The view name. </param>
            <param name="schema"> The schema. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedColumnsCompatibility(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of properties sharing columns in a given table-like object.
            </summary>
            <param name="mappedTypes"> The mapped entity types. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateCompatible(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of two properties mapped to the same column.
            </summary>
            <param name="property"> A property. </param>
            <param name="duplicateProperty"> Another property. </param>
            <param name="columnName"> The column name. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.GetDefaultColumnValue(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the object that is used as the default value for the column the property is mapped to.
            </summary>
            <param name="property"> The property to get the default value for. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <returns> The object that is used as the default value for the column the property is mapped to. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedForeignKeysCompatibility(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of foreign keys in a given shared table.
            </summary>
            <param name="mappedTypes"> The mapped entity types. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateCompatible(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IForeignKey,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of two foreign keys mapped to the same foreign key constraint.
            </summary>
            <param name="foreignKey"> A foreign key. </param>
            <param name="duplicateForeignKey"> Another foreign key. </param>
            <param name="foreignKeyName"> The foreign key constraint name. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedIndexesCompatibility(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of indexes in a given shared table.
            </summary>
            <param name="mappedTypes"> The mapped entity types. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateCompatible(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.IIndex,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of two indexes mapped to the same table index.
            </summary>
            <param name="index"> An index. </param>
            <param name="duplicateIndex"> Another index. </param>
            <param name="indexName"> The name of the index. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateSharedKeysCompatibility(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of primary and alternate keys in a given shared table.
            </summary>
            <param name="mappedTypes"> The mapped entity types. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateCompatible(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IKey,System.String,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the compatibility of two keys mapped to the same unique constraint.
            </summary>
            <param name="key"> A key. </param>
            <param name="duplicateKey"> Another key. </param>
            <param name="keyName"> The name of the unique constraint. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateInheritanceMapping(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the mapping/configuration of inheritance in the model.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidatePropertyOverrides(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates the table-specific property overrides.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator.ValidateIndexProperties(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model.Validation})">
            <summary>
                Validates that the properties of any one index are
                all mapped to columns on at least one common table.
            </summary>
            <param name="model"> The model to validate. </param>
            <param name="logger"> The logger to use. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
                    This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidator" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies.TypeMappingSource">
            <summary>
                The type mapper.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalModelValidatorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension">
            <summary>
                <para>
                    Represents options managed by the relational database providers.
                    These options are set using <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
                </para>
                <para>
                    Instances of this class are designed to be immutable. To change an option, call one of the 'With...'
                    methods to obtain a new instance with the option changed.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.#ctor">
            <summary>
                Creates a new set of options with everything set to default values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension)">
            <summary>
                Called by a derived class constructor when implementing the <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.Clone" /> method.
            </summary>
            <param name="copyFrom"> The instance that is being cloned. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.Info">
            <summary>
                Information/metadata about the extension.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.Clone">
            <summary>
                Override this method in a derived class to ensure that any clone created is also of that class.
            </summary>
            <returns> A clone of this instance, which can be modified before being returned as immutable. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.ConnectionString">
            <summary>
                The connection string, or <see langword="null" /> if a <see cref="T:System.Data.Common.DbConnection" /> was used instead of
                a connection string.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithConnectionString(System.String)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="connectionString"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.Connection">
            <summary>
                The <see cref="T:System.Data.Common.DbConnection" />, or <see langword="null" /> if a connection string was used instead of
                the full connection object.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithConnection(System.Data.Common.DbConnection)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="connection"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.CommandTimeout">
            <summary>
                The command timeout, or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithCommandTimeout(System.Nullable{System.Int32})">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="commandTimeout"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.MaxBatchSize">
            <summary>
                The maximum number of statements that will be included in commands sent to the database
                during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithMaxBatchSize(System.Nullable{System.Int32})">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="maxBatchSize"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.MinBatchSize">
            <summary>
                The minimum number of statements that are needed for a multi-statement command sent to the database
                during <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" /> or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithMinBatchSize(System.Nullable{System.Int32})">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="minBatchSize"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.UseRelationalNulls">
            <summary>
                Indicates whether or not to use relational database semantics when comparing null values. By default,
                Entity Framework will use C# semantics for null values, and generate SQL to compensate for differences
                in how the database handles nulls.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithUseRelationalNulls(System.Boolean)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="useRelationalNulls"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.QuerySplittingBehavior">
            <summary>
                The <see cref="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.QuerySplittingBehavior" /> to use when loading related collections in a query.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithUseQuerySplittingBehavior(Microsoft.EntityFrameworkCore.QuerySplittingBehavior)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="querySplittingBehavior"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.MigrationsAssembly">
            <summary>
                The name of the assembly that contains migrations, or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithMigrationsAssembly(System.String)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="migrationsAssembly"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.MigrationsHistoryTableName">
            <summary>
                The table name to use for the migrations history table, or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithMigrationsHistoryTableName(System.String)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="migrationsHistoryTableName"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.MigrationsHistoryTableSchema">
            <summary>
                The schema to use for the migrations history table, or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithMigrationsHistoryTableSchema(System.String)">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="migrationsHistoryTableSchema"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.ExecutionStrategyFactory">
            <summary>
                A factory for creating the default <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" />, or <see langword="null" /> if none has been
                configured.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithExecutionStrategyFactory(System.Func{Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy})">
            <summary>
                Creates a new instance with all options the same as for this instance, but with the given option changed.
                It is unusual to call this method directly. Instead use <see cref="T:Microsoft.EntityFrameworkCore.DbContextOptionsBuilder" />.
            </summary>
            <param name="executionStrategyFactory"> The option to change. </param>
            <returns> A new instance with the option changed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.Extract(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Finds an existing <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension" /> registered on the given options
                or throws if none has been registered. This is typically used to find some relational
                configuration when it is known that a relational provider is being used.
            </summary>
            <param name="options"> The context options to look in. </param>
            <returns> The extension. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.ApplyServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds the services required to make the selected options work. This is used when there
                is no external <see cref="T:System.IServiceProvider" /> and EF is maintaining its own service
                provider internally. This allows database providers (and other extensions) to register their
                required services when EF is creating an service provider.
            </summary>
            <param name="services"> The collection to add services to. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.Validate(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Gives the extension a chance to validate that all options in the extension are valid.
                Most extensions do not have invalid combinations and so this will be a no-op.
                If options are invalid, then an exception should be thrown.
            </summary>
            <param name="options"> The options being validated. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.WithDefaultWarningConfiguration(Microsoft.EntityFrameworkCore.Infrastructure.CoreOptionsExtension)">
            <summary>
                Adds default <see cref="T:Microsoft.EntityFrameworkCore.WarningBehavior"/> for relational events.
            </summary>
            <param name="coreOptionsExtension"> The core options extension. </param>
            <returns> The new core options extension. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.RelationalExtensionInfo">
            <summary>
                Information/metadata for a <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.RelationalExtensionInfo.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptionsExtension)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.RelationalExtensionInfo" /> instance containing
                info/metadata for the given extension.
            </summary>
            <param name="extension"> The extension. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.RelationalExtensionInfo.Extension">
            <summary>
                The extension for which this instance contains metadata.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.RelationalExtensionInfo.IsDatabaseProvider">
            <summary>
                True, since this is a database provider base class.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.RelationalExtensionInfo.GetServiceProviderHashCode">
            <summary>
                Returns a hash code created from any options that would cause a new <see cref="T:System.IServiceProvider" />
                to be needed. Most extensions do not have any such options and should return zero.
            </summary>
            <returns> A hash over options that require a new service provider when changed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Infrastructure.RelationalOptionsExtension.RelationalExtensionInfo.LogFragment">
            <summary>
                A message fragment for logging typically containing information about
                any useful non-default options that have been configured.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Infrastructure.RelationalPropertyExtensions">
            <summary>
                Relational extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalPropertyExtensions.FormatColumns(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier)">
            <summary>
                Creates a comma-separated list of column names.
            </summary>
            <param name="properties"> The properties to format. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> A comma-separated list of column names. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Infrastructure.RelationalPropertyExtensions.GetColumnNames(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Creates a list of column names.
            </summary>
            <param name="properties"> The properties to format. </param>
            <param name="storeObject"> The identifier of the table-like store object containing the column. </param>
            <returns> A list of column names. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder">
            <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasName(System.String)">
            <summary>
                Sets the name of the database function.
            </summary>
            <param name="name"> The name of the function in the database. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasSchema(System.String)">
            <summary>
                Sets the schema of the database function.
            </summary>
            <param name="schema"> The schema of the function in the database. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.IsBuiltIn(System.Boolean)">
            <summary>
                Marks whether the database function is built-in.
            </summary>
            <param name="builtIn"> The value indicating whether the database function is built-in. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.IsNullable(System.Boolean)">
            <summary>
                Marks whether the database function can return null value.
            </summary>
            <param name="nullable"> The value indicating whether the database function can return null. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasStoreType(System.String)">
            <summary>
                Sets the return store type of the database function.
            </summary>
            <param name="storeType"> The return store type of the function in the database. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilder.HasTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})">
            <summary>
                <para>
                    Sets a callback that will be invoked to perform custom translation of this
                    function. The callback takes a collection of expressions corresponding to
                    the parameters passed to the function call. The callback should return an
                    expression representing the desired translation.
                </para>
                <para>
                    See https://go.microsoft.com/fwlink/?linkid=852477 for more information.
                </para>
            </summary>
            <param name="translation"> The translation to use. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase">
            <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.Builder">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder}#Instance">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.Metadata">
            <summary>
                The function being configured.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.HasName(System.String)">
            <summary>
                Sets the name of the database function.
            </summary>
            <param name="name"> The name of the function in the database. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.HasSchema(System.String)">
            <summary>
                Sets the schema of the database function.
            </summary>
            <param name="schema"> The schema of the function in the database. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.IsBuiltIn(System.Boolean)">
            <summary>
                Marks whether the database function is built-in.
            </summary>
            <param name="builtIn"> The value indicating whether the database function is built-in. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.HasParameter(System.String)">
            <summary>
                Returns an object that can be used to configure a parameter with the given name.
                If no parameter with the given name exists, then a new parameter will be added.
            </summary>
            <param name="name"> The parameter name. </param>
            <returns> The builder to use for further parameter configuration. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionBuilderBase.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionParameterBuilder}#Instance">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder.Metadata">
            <summary>
                The function parameter metadata that is being built.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder.HasStoreType(System.String)">
            <summary>
                Sets the store type of the function parameter in the database.
            </summary>
            <param name="storeType"> The store type of the function parameter in the database. </param>
            <returns> The same builder instance so that further configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder.PropagatesNullability(System.Boolean)">
            <summary>
                Indicates whether parameter propagates nullability, meaning if it's value is null the database function itself returns null.
            </summary>
            <param name="propagatesNullability"> Value which indicates whether parameter propagates nullability. </param>
            <returns> The same builder instance so that further configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.DbFunctionParameterBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder">
            <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.Metadata">
            <summary>
                The function being configured.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasName(System.String,System.Boolean)">
            <summary>
                Sets the name of the database function.
            </summary>
            <param name="name"> The name of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetName(System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given name can be set for the database function.
            </summary>
            <param name="name"> The name of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given name can be set for the database function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasSchema(System.String,System.Boolean)">
            <summary>
                Sets the schema of the database function.
            </summary>
            <param name="schema"> The schema of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetSchema(System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given schema can be set for the database function.
            </summary>
            <param name="schema"> The schema of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given schema can be set for the database function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.IsBuiltIn(System.Boolean,System.Boolean)">
            <summary>
                Sets the value indicating whether the database function is built-in or not.
            </summary>
            <param name="builtIn"> The value indicating whether the database function is built-in or not. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetIsBuiltIn(System.Boolean,System.Boolean)">
            <summary>
                Returns a value indicating whether the given built-in can be set for the database function.
            </summary>
            <param name="builtIn"> The value indicating whether the database function is built-in or not. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given schema can be set for the database function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.IsNullable(System.Boolean,System.Boolean)">
            <summary>
                Sets the value indicating whether the database function can return null value or not.
            </summary>
            <param name="nullable"> The value indicating whether the database function is built-in or not. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetIsNullable(System.Boolean,System.Boolean)">
            <summary>
                Returns a value indicating whether the given nullable can be set for the database function.
            </summary>
            <param name="nullable"> The value indicating whether the database function can return null value or not. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given schema can be set for the database function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasStoreType(System.String,System.Boolean)">
            <summary>
                Sets the store type of the function in the database.
            </summary>
            <param name="storeType"> The store type of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetStoreType(System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the given store type can be set for the database function.
            </summary>
            <param name="storeType"> The store type of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given store type can be set for the database function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <summary>
                Sets the return type mapping of the database function.
            </summary>
            <param name="typeMapping"> The return type mapping of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <summary>
                Returns a value indicating whether the given return type mapping can be set for the database function.
            </summary>
            <param name="typeMapping"> The return type mapping of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given return type mapping can be set for the database function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)">
            <summary>
                <para>
                    Sets a callback that will be invoked to perform custom translation of this
                    function. The callback takes a collection of expressions corresponding to
                    the parameters passed to the function call. The callback should return an
                    expression representing the desired translation.
                </para>
                <para>
                    See https://go.microsoft.com/fwlink/?linkid=852477 for more information.
                </para>
            </summary>
            <param name="translation"> The translation to use. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.CanSetTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)">
            <summary>
                Returns a value indicating whether the given translation can be set for the database function.
            </summary>
            <param name="translation"> The translation to use. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given translation can be set for the database function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder.HasParameter(System.String,System.Boolean)">
            <summary>
                Returns an object that can be used to configure a parameter with the given name.
            </summary>
            <param name="name"> The parameter name. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The builder to use for further parameter configuration. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder">
            <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.Metadata">
            <summary>
                The function parameter metadata that is being built.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.HasStoreType(System.String,System.Boolean)">
            <summary>
                Sets the store type of the function parameter in the database.
            </summary>
            <param name="storeType"> The store type of the function parameter in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The same builder instance if the configuration was applied; null otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.CanSetStoreType(System.String,System.Boolean)">
            <summary>
                Returns a value indicating whether the store type can be set for this property
                from the current configuration source.
            </summary>
            <param name="storeType"> The store type of the function parameter in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the store type can be set for this property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> of the function parameter.
            </summary>
            <param name="typeMapping"> The type mapping to use for the function parameter. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The same builder instance if the configuration was applied; null otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder.CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <summary>
                Returns a value indicating whether <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> can be set for this property
                from the current configuration source.
            </summary>
            <param name="typeMapping"> The type mapping to use for the function parameter. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the type mapping can be set for this property. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder">
            <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.Metadata">
            <summary>
                The sequence being configured.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.HasType(System.Type,System.Boolean)">
            <summary>
                Sets the type of values returned by the sequence.
            </summary>
            <param name="type"> The type of values returned by the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetType(System.Type,System.Boolean)">
            <summary>
                Returns a value indicating whether the given type can be set for the sequence.
            </summary>
            <param name="type"> The type of values returned by the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given type can be set for the sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.IncrementsBy(System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Sets the sequence to increment by the given amount when generating each next value.
            </summary>
            <param name="increment"> The amount to increment between values. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetIncrementsBy(System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Returns a value indicating whether the given increment can be set for the sequence.
            </summary>
            <param name="increment"> The amount to increment between values. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given increment can be set for the sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.StartsAt(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Sets the sequence to start at the given value.
            </summary>
            <param name="startValue"> The starting value for the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetStartsAt(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Returns a value indicating whether the given starting value can be set for the sequence.
            </summary>
            <param name="startValue"> The starting value for the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given starting value can be set for the sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.HasMax(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Sets the maximum value for the sequence.
            </summary>
            <param name="maximum"> The maximum value for the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetMax(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Returns a value indicating whether the given maximum value can be set for the sequence.
            </summary>
            <param name="maximum"> The maximum value for the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given maximum value can be set for the sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.HasMin(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Sets the minimum value for the sequence.
            </summary>
            <param name="minimum"> The minimum value for the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetMin(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Returns a value indicating whether the given minimum value can be set for the sequence.
            </summary>
            <param name="minimum"> The minimum value for the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given minimum value can be set for the sequence. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.IsCyclic(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets whether or not the sequence will start again from the beginning once
                the maximum value is reached.
            </summary>
            <param name="cyclic"> If <see langword="true" />, then the sequence with restart when the maximum is reached. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns>
                The same builder instance if the configuration was applied,
                <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionSequenceBuilder.CanSetIsCyclic(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Returns a value indicating whether the given cyclicity can be set for the sequence.
            </summary>
            <param name="cyclic"> If <see langword="true" />, then the sequence with restart when the maximum is reached. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> <see langword="true" /> if the given cyclicity can be set for the sequence. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder">
            <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableSequence)">
            <summary>
                Creates a new builder for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
            <param name="sequence"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence" /> to configure. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.Microsoft#EntityFrameworkCore#Infrastructure#IInfrastructure{Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder}#Instance">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.Metadata">
            <summary>
                The sequence.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.IncrementsBy(System.Int32)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> to increment by the given amount when generating each next value.
            </summary>
            <param name="increment"> The amount to increment between values. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.StartsAt(System.Int64)">
            <summary>
                Sets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> to start at the given value.
            </summary>
            <param name="startValue"> The starting value for the sequence. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.HasMax(System.Int64)">
            <summary>
                Sets the maximum value for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
            <param name="maximum"> The maximum value for the sequence. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.HasMin(System.Int64)">
            <summary>
                Sets the minimum value for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
            <param name="minimum"> The minimum value for the sequence. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.IsCyclic(System.Boolean)">
            <summary>
                Sets whether or not the sequence will start again from the beginning once
                the maximum value is reached.
            </summary>
            <param name="cyclic"> If <see langword="true" />, then the sequence will restart when the maximum is reached. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.SequenceBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder">
            <summary>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder.ExcludeFromMigrations(System.Boolean)">
            <summary>
                Configures the table to be ignored by migrations.
            </summary>
            <param name="excluded"> A value indicating whether the table should be managed by migrations. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1">
            <summary>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
            <typeparam name="TEntity"> The entity type being configured. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableBuilder`1.ExcludeFromMigrations(System.Boolean)">
            <summary>
                Configures the table to be ignored by migrations.
            </summary>
            <param name="excluded"> A value indicating whether the table should be managed by migrations. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder">
            <summary>
                Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.HasName(System.String)">
            <summary>
                Sets the name of the database function.
            </summary>
            <param name="name"> The name of the function in the database. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.TableValuedFunctionBuilder.HasSchema(System.String)">
            <summary>
                Sets the schema of the database function.
            </summary>
            <param name="schema"> The schema of the function in the database. </param>
            <returns> The same builder instance so that multiple configuration calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction,Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.HasName(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.CanSetName(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.HasSchema(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.CanSetSchema(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.IsBuiltIn(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.CanSetIsBuiltIn(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.IsNullable(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.CanSetIsNullable(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.HasStoreType(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.CanSetStoreType(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.HasTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.CanSetTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.HasParameter(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasName(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetName(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasSchema(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetSchema(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#IsBuiltIn(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetIsBuiltIn(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#IsNullable(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetIsNullable(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasStoreType(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetStoreType(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#CanSetTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionBuilder#HasParameter(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder">
            <summary>
                <para>
                    Provides a simple API for configuring a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter" />.
                </para>
                <para>
                    Instances of this class are returned from methods when using the <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> API
                    and it is not designed to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter,Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.HasStoreType(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.CanSetStoreType(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.PropagatesNullability(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.CanSetPropagatesNullability(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionParameterBuilder#Metadata">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionParameterBuilder#HasStoreType(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionParameterBuilder#CanSetStoreType(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionParameterBuilder#HasTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalDbFunctionParameterBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionDbFunctionParameterBuilder#CanSetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence,Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.HasType(System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.CanSetType(System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.IncrementsBy(System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.CanSetIncrementsBy(System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.StartsAt(System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.CanSetStartsAt(System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.HasMax(System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.CanSetMax(System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.HasMin(System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.CanSetMin(System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.IsCyclic(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.CanSetIsCyclic(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#Metadata">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#HasType(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#CanSetType(System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#IncrementsBy(System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#CanSetIncrementsBy(System.Nullable{System.Int32},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#StartsAt(System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#CanSetStartsAt(System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#HasMax(System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#CanSetMax(System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#HasMin(System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#CanSetMin(System.Nullable{System.Int64},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#IsCyclic(System.Nullable{System.Boolean},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Builders.Internal.InternalSequenceBuilder.Microsoft#EntityFrameworkCore#Metadata#Builders#IConventionSequenceBuilder#CanSetIsCyclic(System.Nullable{System.Boolean},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.CheckConstraintExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.CheckConstraintExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="constraint"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ColumnExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IColumn" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ColumnExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="column"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ColumnMappingExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IColumnMapping" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ColumnMappingExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IColumnMapping,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="columnMapping"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.DbFunctionTypeMappingConvention">
            <summary>
                A convention configure type mapping for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" /> instances.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.DbFunctionTypeMappingConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.DbFunctionTypeMappingConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.DbFunctionTypeMappingConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.EntityTypeHierarchyMappingConvention">
            <summary>
                A convention that removes discriminators from non-TPH entity types and unmaps the inherited properties for TPT entity types.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.EntityTypeHierarchyMappingConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.EntityTypeHierarchyMappingConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.EntityTypeHierarchyMappingConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder">
            <summary>
                <para>
                    A service on the EF internal service provider that creates the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.ConventionSet" />
                    for the current relational database provider. This is combined with <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetPlugin" />
                    instances to produce the full convention set exposed by the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder" />
                    service.
                </para>
                <para>
                    Database providers should implement this service by inheriting from either
                    this class (for relational providers) or <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilder" /> (for non-relational providers).
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder.RelationalDependencies">
            <summary>
                Parameter object containing relational service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder.CreateConventionSet">
            <summary>
                Builds and returns the convention set for the current database provider.
            </summary>
            <returns> The convention set for the current database provider. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies.#ctor(Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies.RelationalAnnotationProvider">
            <summary>
                The relational annotation provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies.With(Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="relationalAnnotationProvider"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnAttributeConvention">
            <summary>
                A convention that configures column name and type for a property based on the applied <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnAttributeConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnAttributeConvention.ProcessPropertyAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext)">
            <summary>
                Called after a property is added to the entity type with an attribute on the associated CLR property or field.
            </summary>
            <param name="propertyBuilder"> The builder for the property. </param>
            <param name="attribute"> The attribute. </param>
            <param name="clrMember"> The member that has the attribute. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnCommentAttributeConvention">
            <summary>
                A convention that configures the column comment for a property or field based on the applied <see cref="T:Microsoft.EntityFrameworkCore.CommentAttribute" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnCommentAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnCommentAttributeConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalColumnCommentAttributeConvention.ProcessPropertyAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,Microsoft.EntityFrameworkCore.CommentAttribute,System.Reflection.MemberInfo,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext)">
            <summary>
                Called after a property is added to the entity type with an attribute on the associated CLR property or field.
            </summary>
            <param name="propertyBuilder"> The builder for the property. </param>
            <param name="attribute"> The attribute. </param>
            <param name="clrMember"> The member that has the attribute. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalDbFunctionAttributeConvention">
            <summary>
                A convention that configures model function mappings based on public static methods on the context marked with
                <see cref="T:Microsoft.EntityFrameworkCore.DbFunctionAttribute" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalDbFunctionAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalDbFunctionAttributeConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalDbFunctionAttributeConvention.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalDbFunctionAttributeConvention.ProcessModelInitialized(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <summary>
                Called after a model is initialized.
            </summary>
            <param name="modelBuilder"> The builder for the model. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalDbFunctionAttributeConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalDbFunctionAttributeConvention.ProcessDbFunctionAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext)">
            <summary>
                Called when an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> is added to the model.
            </summary>
            <param name="dbFunctionBuilder"> The builder for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" />. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalMaxIdentifierLengthConvention">
            <summary>
                A convention that configures the maximum object identifier length supported by the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalMaxIdentifierLengthConvention.#ctor(System.Int32,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalMaxIdentifierLengthConvention" />.
            </summary>
            <param name="maxIdentifierLength"> The maximum object identifier length supported by the database. </param>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalMaxIdentifierLengthConvention.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalMaxIdentifierLengthConvention.MaxIdentifierLength">
            <summary>
                The maximum object identifier length supported by the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalMaxIdentifierLengthConvention.ProcessModelInitialized(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <summary>
                Called after a model is initialized.
            </summary>
            <param name="modelBuilder"> The builder for the model. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalModelConvention">
            <summary>
                A convention that precomputes a relational model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalModelConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalModelConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalModelConvention.RelationalDependencies">
            <summary>
                The service dependencies for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilder" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalModelConvention.ProcessModelFinalized(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterRewritingConvention">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterRewritingConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterRewritingConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterRewritingConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterRewritingConvention.RelationalDbSetAccessRewritingExpressionVisitor">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterRewritingConvention.RelationalDbSetAccessRewritingExpressionVisitor.#ctor(System.Type)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterRewritingConvention.RelationalDbSetAccessRewritingExpressionVisitor" />.
            </summary>
            <param name="contextType"> The clr type of derived DbContext. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalQueryFilterRewritingConvention.RelationalDbSetAccessRewritingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableAttributeConvention">
            <summary>
                A convention that configures the table name and schema for entity types based on the applied <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableAttributeConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableAttributeConvention.ProcessEntityTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.ComponentModel.DataAnnotations.Schema.TableAttribute,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder})">
            <summary>
                Called after an entity type is added to the model if it has an attribute.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type. </param>
            <param name="attribute"> The attribute. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableCommentAttributeConvention">
            <summary>
                A convention that configures the table comment for an entity type based on the applied <see cref="T:Microsoft.EntityFrameworkCore.CommentAttribute" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableCommentAttributeConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableCommentAttributeConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalTableCommentAttributeConvention.ProcessEntityTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,Microsoft.EntityFrameworkCore.CommentAttribute,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder})">
            <summary>
                Called after an entity type is added to the model if it has an attribute.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type. </param>
            <param name="attribute"> The attribute. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalValueGenerationConvention">
            <summary>
                A convention that configures store value generation as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAdd" /> on properties that are
                part of the primary key and not part of any foreign keys or were configured to have a database default value.
                It also configures properties as <see cref="F:Microsoft.EntityFrameworkCore.Metadata.ValueGenerated.OnAddOrUpdate" /> if they were configured as computed columns.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalValueGenerationConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalValueGenerationConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalValueGenerationConvention.ProcessPropertyAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on a property.
            </summary>
            <param name="propertyBuilder"> The builder for the property. </param>
            <param name="name"> The annotation name. </param>
            <param name="annotation"> The new annotation. </param>
            <param name="oldAnnotation"> The old annotation.  </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalValueGenerationConvention.ProcessEntityTypeAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on an entity type.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type. </param>
            <param name="name"> The annotation name. </param>
            <param name="annotation"> The new annotation. </param>
            <param name="oldAnnotation"> The old annotation.  </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalValueGenerationConvention.GetValueGenerated(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty)">
            <summary>
                Returns the store value generation strategy to set for the given property.
            </summary>
            <param name="property"> The property. </param>
            <returns> The store value generation strategy to set for the given property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.RelationalValueGenerationConvention.GetValueGenerated(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Returns the store value generation strategy to set for the given property.
            </summary>
            <param name="property"> The property. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <returns> The new store value generation strategy to set for the given property. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SequenceUniquificationConvention">
            <summary>
                A convention which ensures that all sequences in the model have unique names
                within a schema when truncated to the maximum identifier length for the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SequenceUniquificationConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SequenceUniquificationConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SequenceUniquificationConvention.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SequenceUniquificationConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention">
            <summary>
                A convention that manipulates names of database objects for entity types that share a table to avoid clashes.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets a value indicating whether two key mapped to the same constraint are compatible.
            </summary>
            <param name="key"> A key. </param>
            <param name="duplicateKey"> Another key. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <returns> <see langword="true" /> if compatible </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets a value indicating whether two indexes mapped to the same table index are compatible.
            </summary>
            <param name="index"> An index. </param>
            <param name="duplicateIndex"> Another index. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <returns> <see langword="true" /> if compatible </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.SharedTableConvention.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Gets a value indicating whether two foreign keys mapped to the same foreign key constraint are compatible.
            </summary>
            <param name="foreignKey"> A foreign key. </param>
            <param name="duplicateForeignKey"> Another foreign key. </param>
            <param name="storeObject"> The identifier of the store object. </param>
            <returns> <see langword="true" /> if compatible </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreGenerationConvention">
            <summary>
                A convention that ensures that properties aren't configured to have a default value and as computed column at the same time.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreGenerationConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreGenerationConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreGenerationConvention.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreGenerationConvention.ProcessPropertyAnnotationChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionPropertyBuilder,System.String,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionAnnotation})">
            <summary>
                Called after an annotation is changed on a property.
            </summary>
            <param name="propertyBuilder"> The builder for the property. </param>
            <param name="name"> The annotation name. </param>
            <param name="annotation"> The new annotation. </param>
            <param name="oldAnnotation"> The old annotation.  </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreGenerationConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.StoreGenerationConvention.Validate(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                Throws if there is conflicting store generation configuration for this property.
            </summary>
            <param name="property"> The property to check. </param>
            <param name="storeObject"> The identifier of the store object. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableNameFromDbSetConvention">
            <summary>
                A convention that configures the table name based on the <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1" /> property name.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableNameFromDbSetConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableNameFromDbSetConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableNameFromDbSetConvention.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableNameFromDbSetConvention.ProcessEntityTypeBaseTypeChanged(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType})">
            <summary>
                Called after the base type of an entity type changes.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type. </param>
            <param name="newBaseType"> The new base entity type. </param>
            <param name="oldBaseType"> The old base entity type. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableNameFromDbSetConvention.ProcessEntityTypeAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionEntityTypeBuilder})">
            <summary>
                Called after an entity type is added to the model.
            </summary>
            <param name="entityTypeBuilder"> The builder for the entity type. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableNameFromDbSetConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableSharingConcurrencyTokenConvention">
            <summary>
                A convention that finds entity types which share a table
                which has a concurrency token column where those entity types
                do not have a property mapped to that column. It then
                creates a shadow concurrency property mapped to that column
                on the base-most entity type(s).
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableSharingConcurrencyTokenConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableSharingConcurrencyTokenConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableSharingConcurrencyTokenConvention.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableSharingConcurrencyTokenConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableSharingConcurrencyTokenConvention.GetConcurrencyTokensMap(Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableSharingConcurrencyTokenConvention.IsConcurrencyTokenMissing(System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Metadata.IProperty},Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IEntityType})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableValuedDbFunctionConvention">
            <summary>
                A convention that configures the entity type to which a queryable function is mapped.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableValuedDbFunctionConvention.#ctor(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.ProviderConventionSetBuilderDependencies,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.RelationalConventionSetBuilderDependencies)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableValuedDbFunctionConvention" />.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this convention. </param>
            <param name="relationalDependencies">  Parameter object containing relational dependencies for this convention. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableValuedDbFunctionConvention.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableValuedDbFunctionConvention.ProcessModelFinalizing(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext{Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionModelBuilder})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Conventions.TableValuedDbFunctionConvention.ProcessDbFunctionAdded(Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionBuilder,Microsoft.EntityFrameworkCore.Metadata.Conventions.IConventionContext)">
            <summary>
                Called when an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> is added to the model.
            </summary>
            <param name="dbFunctionBuilder"> The builder for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" />. </param>
            <param name="context"> Additional information associated with convention execution. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.DbFunctionExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.DbFunctionExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IDbFunction,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="function"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.DbFunctionParameterExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.DbFunctionParameterExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="parameter"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ForeignKeyConstraintExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ForeignKeyConstraintExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="foreignKey"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.FunctionColumnExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.FunctionColumnExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="column"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.FunctionColumnMappingExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IFunctionColumnMapping" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.FunctionColumnMappingExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IFunctionColumnMapping,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="columnMapping"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.FunctionMappingExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.FunctionMappingExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="functionMapping"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint">
            <summary>
                Represents a check constraint in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint.Name">
            <summary>
                Gets the name of the check constraint in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint.EntityType">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" /> in which this check constraint is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint.Sql">
            <summary>
                Gets the constraint sql used in a check constraint in the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IColumn">
            <summary>
                Represents a column in a table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.Table">
            <summary>
                Gets the containing table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.PropertyMappings">
            <summary>
                Gets the property mappings.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.MaxLength">
            <summary>
                Gets the maximum length of data that is allowed in this column. For example, if the property is a <see cref="T:System.String" /> '
                then this is the maximum number of characters.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.Precision">
            <summary>
                Gets the precision of data that is allowed in this column. For example, if the property is a <see cref="T:System.Decimal" /> '
                then this is the maximum number of digits.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.Scale">
            <summary>
                Gets the scale of data that is allowed in this column. For example, if the property is a <see cref="T:System.Decimal" /> '
                then this is the maximum number of decimal places.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.IsUnicode">
            <summary>
                Gets a value indicating whether or not the property can persist Unicode characters.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.IsFixedLength">
            <summary>
                Returns a flag indicating if the property as capable of storing only fixed-length data, such as strings.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.IsRowVersion">
            <summary>
                Indicates whether or not this column acts as an automatic concurrency token by generating a different value
                on every update in the same vein as 'rowversion'/'timestamp' columns on SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.DefaultValue">
            <summary>
                Returns the object that is used as the default value for this column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.DefaultValueSql">
            <summary>
                Returns the SQL expression that is used as the default value for this column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.ComputedColumnSql">
            <summary>
                Returns the SQL expression that is used as the computed value for this column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.IsStored">
            <summary>
                Returns whether the value of the computed column this property is mapped to is stored in the database, or calculated when
                it is read.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.Comment">
            <summary>
                Comment for this column
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumn.Collation">
            <summary>
                Collation for this column
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IColumnBase">
            <summary>
                Represents a column-like object in a table-like object.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnBase.Name">
            <summary>
                Gets the column name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnBase.StoreType">
            <summary>
                Gets the column type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnBase.IsNullable">
            <summary>
                Gets the value indicating whether the column can contain NULL.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnBase.Table">
            <summary>
                Gets the containing table-like object.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnBase.PropertyMappings">
            <summary>
                Gets the property mappings.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IColumnMapping">
            <summary>
                Represents property mapping to a column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnMapping.Column">
            <summary>
                Gets the target column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnMapping.TableMapping">
            <summary>
                Gets the containing table mapping.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase">
            <summary>
                Represents property mapping to a column-like object.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase.Property">
            <summary>
                Gets the mapped property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase.Column">
            <summary>
                Gets the target column-like object.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase.TypeMapping">
            <summary>
                Gets the type mapping for the column-like object.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase.TableMapping">
            <summary>
                Gets the containing table mapping.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint">
            <summary>
                Represents a check constraint in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint.EntityType">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionEntityType" /> in which this check constraint is defined.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint.GetConfigurationSource">
            <summary>
                Gets the configuration source for this <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" />.
            </summary>
            <returns> The configuration source for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionCheckConstraint" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction">
            <summary>
                Represents a relational database function in an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionModel" /> in
                the a form that can be mutated while the model is being built.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.Model">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionModel" /> in which this function is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.Builder">
            <summary>
                Gets the builder that can be used to configure this function.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.GetConfigurationSource">
            <summary>
                Gets the configuration source for this function.
            </summary>
            <returns> The configuration source for this function. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetName(System.String,System.Boolean)">
            <summary>
                Sets the name of the function in the database.
            </summary>
            <param name="name"> The name of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.GetNameConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Name" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Name" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetSchema(System.String,System.Boolean)">
            <summary>
                Sets the schema of the function in the database.
            </summary>
            <param name="schema"> The schema of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.GetSchemaConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Schema" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Schema" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetIsBuiltIn(System.Boolean,System.Boolean)">
            <summary>
                Sets the value indicating whether the database function is built-in or not.
            </summary>
            <param name="builtIn"> The value indicating whether the database function is built-in or not. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.GetIsBuiltInConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.IsBuiltIn" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.IsBuiltIn" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetIsNullable(System.Boolean,System.Boolean)">
            <summary>
                Sets the value indicating whether the database function can return null value or not.
            </summary>
            <param name="nullable"> The value indicating whether the database function can return null value or not. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.GetIsNullableConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.IsNullable" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.IsNullable" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetStoreType(System.String,System.Boolean)">
            <summary>
                Sets the store type of the function in the database.
            </summary>
            <param name="storeType"> The store type of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.GetStoreTypeConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.StoreType" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.StoreType" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <summary>
                Sets the type mapping of the function in the database.
            </summary>
            <param name="typeMapping"> The type mapping of the function in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.GetTypeMappingConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.TypeMapping" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.TypeMapping" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.SetTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)">
            <summary>
                Sets the translation callback for performing custom translation of the method call into a SQL expression fragment.
            </summary>
            <param name="translation">
                The translation callback for performing custom translation of the method call into a SQL expression fragment.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.GetTranslationConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Translation" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Translation" />. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction.Parameters">
            <summary>
                Gets the parameters for this function
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter">
            <summary>
                Represents a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> parameter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.Function">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunction" /> to which this parameter belongs.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.Builder">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.IConventionDbFunctionParameterBuilder" /> for configuring this function parameter.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.GetConfigurationSource">
            <summary>
                Returns the configuration source for the parameter.
            </summary>
            <returns> The configuration source for the parameter. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.SetStoreType(System.String,System.Boolean)">
            <summary>
                Sets the store type of the parameter.
            </summary>
            <param name="storeType"> The store type of the parameter. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.GetStoreTypeConfigurationSource">
            <summary>
                Returns the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.StoreType" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.StoreType" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.SetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <summary>
                Sets the type mapping of the parameter.
            </summary>
            <param name="typeMapping"> The type mapping of the parameter in the database. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionDbFunctionParameter.GetTypeMappingConfigurationSource">
            <summary>
                Returns the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.TypeMapping" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.TypeMapping" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence">
            <summary>
                Represents a database sequence in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionModel" /> in a form that
                can be mutated while building the model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.Model">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionModel" /> in which this sequence is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.Builder">
            <summary>
                Gets the builder that can be used to configure this sequence.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.GetConfigurationSource">
            <summary>
                Gets the configuration source for this <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence" />.
            </summary>
            <returns> The configuration source for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetStartValue(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Sets the value at which the sequence will start.
            </summary>
            <param name="startValue"> The value at which the sequence will start. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.GetStartValueConfigurationSource">
            <summary>
                Returns the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.StartValue" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.StartValue" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetIncrementBy(System.Nullable{System.Int32},System.Boolean)">
            <summary>
                Sets the amount incremented to obtain each new value in the sequence.
            </summary>
            <param name="incrementBy"> The amount incremented to obtain each new value in the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.GetIncrementByConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.IncrementBy" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.IncrementBy" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetMinValue(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Sets the minimum value supported by the sequence.
            </summary>
            <param name="minValue"> The minimum value supported by the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.GetMinValueConfigurationSource">
            <summary>
                Returns the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.MinValue" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.MinValue" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetMaxValue(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Sets the maximum value supported by the sequence.
            </summary>
            <param name="maxValue"> The maximum value supported by the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.GetMaxValueConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.MaxValue" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.MaxValue" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetType(System.Type,System.Boolean)">
            <summary>
                Sets the <see cref="T:System.Type" /> of values returned by the sequence.
            </summary>
            <param name="type"> The <see cref="T:System.Type" /> of values returned by the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.GetTypeConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.ClrType" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.ClrType" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetClrType(System.Type,System.Boolean)">
            <summary>
                Sets the <see cref="T:System.Type" /> of values returned by the sequence.
            </summary>
            <param name="type"> The <see cref="T:System.Type" /> of values returned by the sequence. </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.GetClrTypeConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.ClrType" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.ClrType" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.SetIsCyclic(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                Sets whether the sequence will start again from the beginning when the max value is reached.
            </summary>
            <param name="cyclic">
                If <see langword="true" />, then the sequence will start again from the beginning when the max value
                is reached.
            </param>
            <param name="fromDataAnnotation"> Indicates whether the configuration was specified using a data annotation. </param>
            <returns> The configured value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IConventionSequence.GetIsCyclicConfigurationSource">
            <summary>
                Gets the configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.IsCyclic" />.
            </summary>
            <returns> The configuration source for <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.IsCyclic" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction">
            <summary>
                Represents a relational database function in an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Name">
            <summary>
                Gets the name of the function in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Schema">
            <summary>
                Gets the schema of the function in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.ModelName">
            <summary>
                Gets the name of the function in the model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Model">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> in which this function is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.MethodInfo">
            <summary>
                Gets the CLR method which maps to the function in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.IsBuiltIn">
            <summary>
                Gets the value indicating whether the database function is built-in.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.IsScalar">
            <summary>
                Gets the value indicating whether this function returns scalar value.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.IsAggregate">
            <summary>
                Gets the value indicating whether this function is an aggregate function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.IsNullable">
            <summary>
                Gets the value indicating whether the database function can return null.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.StoreType">
            <summary>
                Gets the configured store type string.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.ReturnType">
            <summary>
                Gets the returned CLR type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.TypeMapping">
            <summary>
                Gets the type mapping for the function's return type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Parameters">
            <summary>
                Gets the parameters for this function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.Translation">
            <summary>
                Gets the translation callback for performing custom translation of the method call into a SQL expression fragment.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunction.StoreFunction">
            <summary>
                Gets the associated <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter">
            <summary>
                Represents a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" /> parameter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.Function">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" /> to which this parameter belongs.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.Name">
            <summary>
                Gets the parameter name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.ClrType">
            <summary>
                Gets the parameter type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.StoreType">
            <summary>
                Gets the store type of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.PropagatesNullability">
            <summary>
                Gets the value which indicates whether parameter propagates nullability, meaning if it's value is null the database function itself
                returns null.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.TypeMapping">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> for this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter.StoreFunctionParameter">
            <summary>
                Gets the associated <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter" />.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint">
            <summary>
                Represents a foreign key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.Name">
            <summary>
                Gets the name of the foreign key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.MappedForeignKeys">
            <summary>
                Gets the mapped foreign keys.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.Table">
            <summary>
                Gets the table on with the foreign key constraint is declared.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.PrincipalTable">
            <summary>
                Gets the table that is referenced by the foreign key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.Columns">
            <summary>
                Gets the columns that are participating in the foreign key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.PrincipalColumns">
            <summary>
                Gets the columns that are referenced by the foreign key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint.OnDeleteAction">
            <summary>
                Gets the action to be performed when the referenced row is deleted.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn">
            <summary>
                Represents a column in a table-valued function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn.Function">
            <summary>
                Gets the containing function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn.PropertyMappings">
            <summary>
                Gets the property mappings.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IFunctionColumnMapping">
            <summary>
                Represents property mapping to a column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IFunctionColumnMapping.Column">
            <summary>
                Gets the target column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IFunctionColumnMapping.FunctionMapping">
            <summary>
                Gets the containing function mapping.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping">
            <summary>
                Represents entity type mapping to a function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping.IsDefaultFunctionMapping">
            <summary>
                Gets the value indicating whether this is the function mapping
                that should be used when the entity type is queried.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping.StoreFunction">
            <summary>
                Gets the target function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping.DbFunction">
            <summary>
                Gets the target function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IFunctionMapping.ColumnMappings">
            <summary>
                Gets the properties mapped to columns on the target function.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint">
            <summary>
                Represents a check constraint in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableCheckConstraint.EntityType">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType" /> in which this check constraint is defined.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction">
            <summary>
                Represents a relational database function in an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" /> in
                the a form that can be mutated while the model is being built.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.Name">
            <summary>
                Gets or sets the name of the function in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.Schema">
            <summary>
                Gets or sets the schema of the function in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.IsBuiltIn">
            <summary>
                Gets or sets the value indicating whether the database function is built-in or not.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.IsNullable">
            <summary>
                Gets or sets the value indicating whether the database function can return null value or not.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.StoreType">
            <summary>
                Gets or sets the store type of the function in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.TypeMapping">
            <summary>
                Gets or sets the type mapping of the function in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.Model">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" /> in which this function is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.Parameters">
            <summary>
                Gets the parameters for this function
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction.Translation">
            <summary>
                Gets or sets the translation callback for performing custom translation of the method call into a SQL expression fragment.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter">
            <summary>
                Represents a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> parameter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter.Function">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunction" /> to which this parameter belongs.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter.StoreType">
            <summary>
                Gets or sets the store type of this parameter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableDbFunctionParameter.TypeMapping">
            <summary>
                Gets or sets the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> for this parameter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence">
            <summary>
                Represents a database sequence in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" /> in a form that
                can be mutated while building the model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.Model">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IMutableModel" /> in which this sequence is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.StartValue">
            <summary>
                Gets or sets the value at which the sequence will start.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.IncrementBy">
            <summary>
                Gets or sets the amount incremented to obtain each new value in the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.MinValue">
            <summary>
                Gets or sets the minimum value supported by the sequence, or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.MaxValue">
            <summary>
                Gets or sets the maximum value supported by the sequence, or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.Type">
            <summary>
                Gets or sets the <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.Type" /> of values returned by the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.ClrType">
            <summary>
                Gets or sets the <see cref="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.Type" /> of values returned by the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IMutableSequence.IsCyclic">
            <summary>
                Gets or sets the a value indicating whether the sequence will start again from the beginning when the max value
                is reached.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.#ctor(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.GetCheckConstraints(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.FindCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.RemoveCheckConstraint(Microsoft.EntityFrameworkCore.Metadata.IMutableEntityType,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.EntityType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.Name">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.Sql">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.GetConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.Microsoft#EntityFrameworkCore#Metadata#IConventionCheckConstraint#EntityType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.CheckConstraint.Microsoft#EntityFrameworkCore#Metadata#IMutableCheckConstraint#EntityType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Column">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Column.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.Table)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Column.Table">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Column.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Column.Microsoft#EntityFrameworkCore#Metadata#IColumn#PropertyMappings">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase.Table">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase.StoreType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase.IsNullable">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase.PropertyMappings">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase.Format(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IColumnBase})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase.Microsoft#EntityFrameworkCore#Metadata#IColumnBase#PropertyMappings">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnListComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnListComparer.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnListComparer.Compare(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IColumn},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IColumn})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnListComparer.Equals(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IColumn},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IColumn})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnListComparer.GetHashCode(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IColumn})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMapping.#ctor(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.Column,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.Internal.TableMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMapping.TableMapping">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMapping.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMapping.Microsoft#EntityFrameworkCore#Metadata#IColumnMapping#Column">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBase">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBase.#ctor(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnBase,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBase.Property">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBase.Column">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBase.TypeMapping">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBase.TableMapping">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBaseComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBaseComparer.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBaseComparer.Compare(Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase,Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBaseComparer.Equals(Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase,Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnMappingBaseComparer.GetHashCode(Microsoft.EntityFrameworkCore.Metadata.IColumnMappingBase)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnNameComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnNameComparer.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.Table)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ColumnNameComparer.Compare(System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.#ctor(System.Reflection.MethodInfo,Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.#ctor(System.String,System.Type,System.Collections.Generic.IEnumerable{System.ValueTuple{System.String,System.Type}},Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Model">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Builder">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.GetDbFunctions(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.FindDbFunction(Microsoft.EntityFrameworkCore.Metadata.IModel,System.Reflection.MethodInfo)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.FindDbFunction(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.AddDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Reflection.MethodInfo,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.AddDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String,System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.RemoveDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.Reflection.MethodInfo)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.RemoveDbFunction(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.ModelName">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.MethodInfo">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.IsScalar">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.IsAggregate">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.GetConfigurationSource">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Schema">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.SetSchema(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.GetSchemaConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Name">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.SetName(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.GetNameConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.IsBuiltIn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.SetIsBuiltIn(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.GetIsBuiltInConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.IsNullable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.SetIsNullable(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.GetIsNullableConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.StoreType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.SetStoreType(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.GetStoreTypeConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.TypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.SetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.GetTypeMappingConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Translation">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.SetTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.GetTranslationConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.StoreFunction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#Builder">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IDbFunction#Model">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#Model">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Parameters">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IDbFunction#Parameters">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#Parameters">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IMutableDbFunction#Parameters">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.FindParameter(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#SetName(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#SetSchema(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#SetIsBuiltIn(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#SetIsNullable(System.Boolean,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#SetStoreType(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#SetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunction#SetTranslation(System.Func{System.Collections.Generic.IReadOnlyCollection{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction,System.String,System.Type)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.Builder">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunctionParameter#Builder">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.Function">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunctionParameter#Function">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.Microsoft#EntityFrameworkCore#Metadata#IDbFunctionParameter#Function">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.Microsoft#EntityFrameworkCore#Metadata#IMutableDbFunctionParameter#Function">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.ClrType">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.GetConfigurationSource">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.StoreType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.SetStoreType(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.GetStoreTypeConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunctionParameter#SetStoreType(System.String,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.TypeMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.SetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.PropagatesNullability">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.SetPropagatesNullability(System.Boolean,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.GetPropagatesNullabilityConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.GetTypeMappingConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.Microsoft#EntityFrameworkCore#Metadata#IConventionDbFunctionParameter#SetTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.StoreFunctionParameter">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.#ctor(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.Table,Microsoft.EntityFrameworkCore.Metadata.Internal.Table,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Column},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Column},Microsoft.EntityFrameworkCore.Migrations.ReferentialAction)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.MappedForeignKeys">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.Table">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.PrincipalTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.Columns">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.PrincipalColumns">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.OnDeleteAction">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.Microsoft#EntityFrameworkCore#Metadata#IForeignKeyConstraint#MappedForeignKeys">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.Microsoft#EntityFrameworkCore#Metadata#IForeignKeyConstraint#Table">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.Microsoft#EntityFrameworkCore#Metadata#IForeignKeyConstraint#PrincipalTable">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.Microsoft#EntityFrameworkCore#Metadata#IForeignKeyConstraint#Columns">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.Microsoft#EntityFrameworkCore#Metadata#IForeignKeyConstraint#PrincipalColumns">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraint.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraintComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraintComparer.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraintComparer.Compare(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint,Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraintComparer.Equals(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint,Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ForeignKeyConstraintComparer.GetHashCode(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumn.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumn.Function">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumn.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumn.Microsoft#EntityFrameworkCore#Metadata#IFunctionColumn#PropertyMappings">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumnMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumnMapping.#ctor(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumn,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumnMapping.FunctionMapping">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionColumnMapping.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionMapping.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction,Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionMapping.IsDefaultFunctionMapping">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionMapping.StoreFunction">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionMapping.DbFunction">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionMapping.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.FunctionMapping.Microsoft#EntityFrameworkCore#Metadata#IFunctionMapping#ColumnMappings">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.NamedListComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.NamedListComparer.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NamedListComparer.Compare(System.ValueTuple{System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String}},System.ValueTuple{System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String}})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NamedListComparer.Equals(System.ValueTuple{System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String}},System.ValueTuple{System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String}})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.NamedListComparer.GetHashCode(System.ValueTuple{System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String}})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeExtensions.MaxEntityTypesSharingTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeExtensions.GetViewOrTableMappings(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalEntityTypeExtensions.GetTptDiscriminatorValues(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalForeignKeyExtensions.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.IForeignKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalIndexExtensions.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.IIndex,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalKeyExtensions.AreCompatible(Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.IKey,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.Model">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.DefaultTables">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.Tables">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.Views">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.Queries">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.Functions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.FindTable(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.FindView(System.String,System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.FindQuery(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.FindFunction(System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.Add(Microsoft.EntityFrameworkCore.Metadata.IConventionModel,Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.ToReferentialAction(Microsoft.EntityFrameworkCore.DeleteBehavior)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel.DebugView">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyExtensions.GetConfiguredColumnType(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyOverrides">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyOverrides.ColumnName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyOverrides.SetColumnName(System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyOverrides.GetColumnNameConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyOverrides.Find(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyOverrides.GetOrCreate(Microsoft.EntityFrameworkCore.Metadata.IMutableProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalPropertyOverrides.GetOrCreate(Microsoft.EntityFrameworkCore.Metadata.IConventionProperty,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.DefaultClrType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.DefaultIncrementBy">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.DefaultStartValue">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.DefaultMaxValue">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.DefaultMinValue">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.DefaultIsCyclic">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.GetSequences(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.FindSequence(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.AddSequence(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.SetName(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.RemoveSequence(Microsoft.EntityFrameworkCore.Metadata.IMutableModel,System.String,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Builder">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Model">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Name">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Schema">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.GetConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.UpdateConfigurationSource(Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.StartValue">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.SetStartValue(System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.GetStartValueConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.IncrementBy">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.SetIncrementBy(System.Nullable{System.Int32},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.GetIncrementByConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.MinValue">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.SetMinValue(System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.GetMinValueConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.MaxValue">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.SetMaxValue(System.Nullable{System.Int64},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.GetMaxValueConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.SupportedTypes">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Type">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.SetType(System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.GetTypeConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.ClrType">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.SetClrType(System.Type,Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.GetClrTypeConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.IsCyclic">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.SetIsCyclic(System.Nullable{System.Boolean},Microsoft.EntityFrameworkCore.Metadata.ConfigurationSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.GetIsCyclicConfigurationSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IConventionSequence#Builder">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IMutableSequence#Model">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IConventionSequence#Model">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IConventionSequence#SetStartValue(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IConventionSequence#SetIncrementBy(System.Nullable{System.Int32},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IConventionSequence#SetMinValue(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IConventionSequence#SetMaxValue(System.Nullable{System.Int64},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IConventionSequence#SetClrType(System.Type,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IConventionSequence#SetType(System.Type,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Sequence.Microsoft#EntityFrameworkCore#Metadata#IConventionSequence#SetIsCyclic(System.Nullable{System.Boolean},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery.#ctor(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery.Sql">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery.Microsoft#EntityFrameworkCore#Metadata#ISqlQuery#EntityTypeMappings">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery.Microsoft#EntityFrameworkCore#Metadata#ISqlQuery#Columns">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery.Microsoft#EntityFrameworkCore#Metadata#ISqlQuery#FindColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery.Microsoft#EntityFrameworkCore#Metadata#ISqlQuery#FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumn.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumn.SqlQuery">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumn.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumn.Microsoft#EntityFrameworkCore#Metadata#ISqlQueryColumn#PropertyMappings">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumnMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumnMapping.#ctor(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumn,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumnMapping.SqlQueryMapping">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumnMapping.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryColumnMapping.Microsoft#EntityFrameworkCore#Metadata#ISqlQueryColumnMapping#Column">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryMapping.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQuery,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryMapping.IsDefaultSqlQueryMapping">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryMapping.SqlQuery">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryMapping.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.SqlQueryMapping.Microsoft#EntityFrameworkCore#Metadata#ISqlQueryMapping#ColumnMappings">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunction,Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.DbFunctions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.IsBuiltIn">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.ReturnType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.Parameters">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.Microsoft#EntityFrameworkCore#Metadata#IStoreFunction#EntityTypeMappings">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.Microsoft#EntityFrameworkCore#Metadata#IStoreFunction#Columns">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.Microsoft#EntityFrameworkCore#Metadata#IStoreFunction#Parameters">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.Microsoft#EntityFrameworkCore#Metadata#IStoreFunction#DbFunctions">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.Microsoft#EntityFrameworkCore#Metadata#IStoreFunction#FindColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction.Microsoft#EntityFrameworkCore#Metadata#IStoreFunction#FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunctionParameter">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunctionParameter.#ctor(Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunction,Microsoft.EntityFrameworkCore.Metadata.Internal.DbFunctionParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunctionParameter.Function">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunctionParameter.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunctionParameter.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunctionParameter.DbFunctionParameters">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.StoreFunctionParameter.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.Table">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.ForeignKeyConstraints">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.PrimaryKey">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.UniqueConstraints">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.FindUniqueConstraint(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.Indexes">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.IsExcludedFromMigrations">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.Microsoft#EntityFrameworkCore#Metadata#ITable#EntityTypeMappings">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.Microsoft#EntityFrameworkCore#Metadata#ITable#Columns">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.Microsoft#EntityFrameworkCore#Metadata#ITable#ForeignKeyConstraints">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.Microsoft#EntityFrameworkCore#Metadata#ITable#PrimaryKey">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.Microsoft#EntityFrameworkCore#Metadata#ITable#UniqueConstraints">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.Microsoft#EntityFrameworkCore#Metadata#ITable#Indexes">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.Microsoft#EntityFrameworkCore#Metadata#ITable#FindColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.Table.Microsoft#EntityFrameworkCore#Metadata#ITable#FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.Schema">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.Model">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.IsShared">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.EntityTypeMappings">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.Columns">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.FindColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.RowInternalForeignKeys">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.ReferencingRowInternalForeignKeys">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.OptionalEntityTypes">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.IsOptional(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.Microsoft#EntityFrameworkCore#Metadata#ITableBase#Model">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.Microsoft#EntityFrameworkCore#Metadata#ITableBase#EntityTypeMappings">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.Microsoft#EntityFrameworkCore#Metadata#ITableBase#Columns">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.Microsoft#EntityFrameworkCore#Metadata#ITableBase#GetRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableBase.Microsoft#EntityFrameworkCore#Metadata#ITableBase#GetReferencingRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.#ctor(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.Table,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Column},System.String,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.MappedIndexes">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.Table">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.Columns">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.IsUnique">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.Filter">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.Microsoft#EntityFrameworkCore#Metadata#ITableIndex#Table">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.Microsoft#EntityFrameworkCore#Metadata#ITableIndex#Columns">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.Microsoft#EntityFrameworkCore#Metadata#ITableIndex#MappedIndexes">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndex.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndexComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndexComparer.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndexComparer.Compare(Microsoft.EntityFrameworkCore.Metadata.ITableIndex,Microsoft.EntityFrameworkCore.Metadata.ITableIndex)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndexComparer.Equals(Microsoft.EntityFrameworkCore.Metadata.ITableIndex,Microsoft.EntityFrameworkCore.Metadata.ITableIndex)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableIndexComparer.GetHashCode(Microsoft.EntityFrameworkCore.Metadata.ITableIndex)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMapping.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.Table,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMapping.Table">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMapping.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMapping.Microsoft#EntityFrameworkCore#Metadata#ITableMappingBase#Table">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMapping.Microsoft#EntityFrameworkCore#Metadata#ITableMapping#ColumnMappings">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.ITableBase,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase.EntityType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase.Table">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase.ColumnMappings">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase.IncludesDerivedTypes">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase.IsSharedTablePrincipal">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBase.IsSplitEntityTypePrincipal">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBaseComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBaseComparer.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBaseComparer.Compare(Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase,Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBaseComparer.Equals(Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase,Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.TableMappingBaseComparer.GetHashCode(Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint.#ctor(System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.Table,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.Internal.Column})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint.Name">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint.MappedKeys">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint.Table">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint.Columns">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint.Microsoft#EntityFrameworkCore#Metadata#IUniqueConstraint#Table">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint.Microsoft#EntityFrameworkCore#Metadata#IUniqueConstraint#Columns">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint.Microsoft#EntityFrameworkCore#Metadata#IUniqueConstraint#MappedKeys">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraint.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraintComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraintComparer.Instance">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraintComparer.Compare(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint,Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraintComparer.Equals(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint,Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.UniqueConstraintComparer.GetHashCode(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.View">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.View.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.RelationalModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.View.ViewDefinitionSql">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.View.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.View.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.View.Microsoft#EntityFrameworkCore#Metadata#IView#EntityTypeMappings">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.View.Microsoft#EntityFrameworkCore#Metadata#IView#Columns">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.View.Microsoft#EntityFrameworkCore#Metadata#IView#FindColumn(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.View.Microsoft#EntityFrameworkCore#Metadata#IView#FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.Internal.View)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn.View">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn.Microsoft#EntityFrameworkCore#Metadata#IViewColumn#PropertyMappings">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumnMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumnMapping.#ctor(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumn,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.Internal.ViewMapping)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumnMapping.ViewMapping">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumnMapping.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewColumnMapping.Microsoft#EntityFrameworkCore#Metadata#IViewColumnMapping#Column">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewMapping">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewMapping.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.Internal.View,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewMapping.View">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewMapping.ToString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.Internal.ViewMapping.Microsoft#EntityFrameworkCore#Metadata#IViewMapping#ColumnMappings">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IPrimaryKeyConstraint">
            <summary>
                Represents a primary key constraint.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider">
            <summary>
                <para>
                    A service typically implemented by database providers that gives access to annotations
                    used by relational EF Core components on various elements of the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel" />.
            </summary>
            <param name="model"> The database model. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITable" />.
            </summary>
            <param name="table"> The table. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IColumn)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IColumn" />.
            </summary>
            <param name="column"> The column. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IView)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IView" />.
            </summary>
            <param name="view"> The view. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IViewColumn)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IViewColumn" />.
            </summary>
            <param name="column"> The column. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ISqlQuery)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery" />.
            </summary>
            <param name="sqlQuery"> The SQL query. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn" />.
            </summary>
            <param name="column"> The column. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IStoreFunction)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" />.
            </summary>
            <param name="function"> The function. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn" />.
            </summary>
            <param name="column"> The column. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint" />.
            </summary>
            <param name="constraint"> The unique constraint. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ITableIndex)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITableIndex" />.
            </summary>
            <param name="index"> The index. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint" />.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ISequence)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
            <param name="sequence"> The sequence. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" />.
            </summary>
            <param name="checkConstraint"> The check constraint. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel">
            <summary>
                Represents a relational database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Model">
            <summary>
                Gets the full model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Tables">
            <summary>
                Returns all the tables mapped in the model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Views">
            <summary>
                Returns all the views mapped in the model.
            </summary>
            <returns> All the views mapped in the model. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Queries">
            <summary>
                Returns all the SQL queries mapped in the model.
            </summary>
            <returns> All the SQL queries mapped in the model. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Sequences">
            <summary>
                Returns all sequences contained in the model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Functions">
            <summary>
                Returns all user-defined functions contained in the model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.Collation">
            <summary>
                Returns the database collation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindTable(System.String,System.String)">
            <summary>
                Gets the table with the given name. Returns <see langword="null" /> if no table with the given name is defined.
            </summary>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The schema of the table. </param>
            <returns> The table with a given name or <see langword="null" /> if no table with the given name is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindView(System.String,System.String)">
            <summary>
                Gets the view with the given name. Returns <see langword="null" /> if no view with the given name is defined.
            </summary>
            <param name="name"> The name of the view. </param>
            <param name="schema"> The schema of the view. </param>
            <returns> The view with a given name or <see langword="null" /> if no view with the given name is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindQuery(System.String)">
            <summary>
                Gets the SQL query with the given name. Returns <see langword="null" /> if no SQL query with the given name is defined.
            </summary>
            <param name="name"> The name of the SQL query. </param>
            <returns> The SQL query with a given name or <see langword="null" /> if no SQL query with the given name is defined. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindSequence(System.String,System.String)">
            <summary>
                Finds an <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> with the given name.
            </summary>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema that contains the sequence. </param>
            <returns>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" /> or <see langword="null" /> if no sequence with the given name in
                the given schema was found.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel.FindFunction(System.String,System.String,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
                Finds a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" /> with the given signature.
            </summary>
            <param name="name"> The name of the function. </param>
            <param name="schema"> The schema of the function. </param>
            <param name="parameters"> A list of parameter types. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" /> or <see langword="null" /> if no function with the given name was defined. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ISequence">
            <summary>
                Represents a database sequence in the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.Name">
            <summary>
                Gets the name of the sequence in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.Schema">
            <summary>
                Gets the database schema that contains the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.Model">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> in which this sequence is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.StartValue">
            <summary>
                Gets the value at which the sequence will start.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.IncrementBy">
            <summary>
                Gets the amount incremented to obtain each new value in the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.MinValue">
            <summary>
                Gets the minimum value supported by the sequence, or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.MaxValue">
            <summary>
                Gets the maximum value supported by the sequence, or <see langword="null" /> if none has been set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.Type">
            <summary>
                Gets the <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.Type" /> of values returned by the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.ClrType">
            <summary>
                Gets the <see cref="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.Type" /> of values returned by the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISequence.IsCyclic">
            <summary>
                Gets the value indicating whether the sequence will start again from the beginning when the max value
                is reached.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery">
            <summary>
                Represents a SQL query string.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.EntityTypeMappings">
            <summary>
                Gets the entity type mappings.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.Columns">
            <summary>
                Gets the columns defined for this query.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.FindColumn(System.String)">
            <summary>
                Gets the column with the given name. Returns <see langword="null" /> if no column with the given name is defined.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the column mapped to the given property. Returns <see langword="null" /> if no column is mapped to the given property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery.Sql">
            <summary>
                Gets the SQL query string.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn">
            <summary>
                Represents a column in a SQL query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn.SqlQuery">
            <summary>
                Gets the containing SQL query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn.PropertyMappings">
            <summary>
                Gets the property mappings.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumnMapping">
            <summary>
                Represents property mapping to a SQL query column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumnMapping.Column">
            <summary>
                Gets the target column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumnMapping.SqlQueryMapping">
            <summary>
                Gets the containing SQL query mapping.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping">
            <summary>
                Represents entity type mapping to a SQL query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping.IsDefaultSqlQueryMapping">
            <summary>
                Gets the value indicating whether this is the SQL query mapping
                that should be used when the entity type is queried.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping.SqlQuery">
            <summary>
                Gets the target SQL query.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping.ColumnMappings">
            <summary>
                Gets the properties mapped to columns on the target SQL query.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction">
            <summary>
                Represents a function in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.DbFunctions">
            <summary>
                Gets the associated <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunction" />s.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.IsBuiltIn">
            <summary>
                Gets the value indicating whether the database function is built-in.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.Parameters">
            <summary>
                Gets the parameters for this function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.ReturnType">
            <summary>
                Gets the scalar return type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.EntityTypeMappings">
            <summary>
                Gets the entity type mappings for the returned row set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.Columns">
            <summary>
                Gets the columns defined for the returned row set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.FindColumn(System.String)">
            <summary>
                Gets the column with the given name. Returns <see langword="null" />
                if no column with the given name is defined for the returned row set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the column mapped to the given property. Returns <see langword="null" /> if no column is mapped to the given property.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter">
            <summary>
                Represents a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" /> parameter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter.Function">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" /> to which this parameter belongs.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter.DbFunctionParameters">
            <summary>
                Gets the associated <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IDbFunctionParameter" />s.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter.Name">
            <summary>
                Gets the parameter name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter.Type">
            <summary>
                Gets the store type of this parameter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ITable">
            <summary>
                Represents a table in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITable.EntityTypeMappings">
            <summary>
                Gets the entity type mappings.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITable.Columns">
            <summary>
                Gets the columns defined for this table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITable.IsExcludedFromMigrations">
            <summary>
                Gets the value indicating whether the table should be managed by migrations
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITable.ForeignKeyConstraints">
            <summary>
                Gets the foreing key constraints for this table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITable.UniqueConstraints">
            <summary>
                Gets the unique constraints including the primary key for this table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITable.PrimaryKey">
            <summary>
                Gets the primary key for this table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITable.Indexes">
            <summary>
                Gets the indexes for this table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITable.CheckConstraints">
            <summary>
                Gets the check constraints for this table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITable.Comment">
            <summary>
                Gets the comment for this table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ITable.FindColumn(System.String)">
            <summary>
                Gets the column with a given name. Returns <see langword="null" /> if no column with the given name is defined.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ITable.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the column mapped to the given property. Returns <see langword="null" /> if no column is mapped to the given property.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ITableBase">
            <summary>
                Represents a table-like object in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableBase.Name">
            <summary>
                Gets the name of the table in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableBase.Schema">
            <summary>
                Gets the schema of the table in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableBase.Model">
            <summary>
                Gets the database model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableBase.IsShared">
            <summary>
                Gets the value indicating whether multiple entity types are sharing the rows in the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableBase.EntityTypeMappings">
            <summary>
                Gets the entity type mappings.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableBase.Columns">
            <summary>
                Gets the columns defined for this table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ITableBase.FindColumn(System.String)">
            <summary>
                Gets the column with the given name. Returns <see langword="null" /> if no column with the given name is defined.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ITableBase.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the column mapped to the given property. Returns <see langword="null" /> if no column is mapped to the given property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ITableBase.GetRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the foreign keys for the given entity type that point to other entity types sharing this table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ITableBase.GetReferencingRowInternalForeignKeys(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the foreign keys referencing the given entity type from other entity types sharing this table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ITableBase.IsOptional(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Gets the value indicating whether an entity of the given type might not be present in a row.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ITableIndex">
            <summary>
                Represents a table index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableIndex.Name">
            <summary>
                Gets the name of the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableIndex.MappedIndexes">
            <summary>
                Gets the mapped indexes.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableIndex.Table">
            <summary>
                Gets the table on with the index is declared.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableIndex.Columns">
            <summary>
                Gets the columns that are participating in the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableIndex.IsUnique">
            <summary>
                Gets a value indicating whether the index enforces uniqueness.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableIndex.Filter">
            <summary>
                Gets the expression used as the index filter.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ITableMapping">
            <summary>
                Represents entity type mapping to a table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableMapping.Table">
            <summary>
                Gets the target table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableMapping.ColumnMappings">
            <summary>
                Gets the properties mapped to columns on the target table.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase">
            <summary>
                Represents entity type mapping to a table-like object.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.EntityType">
            <summary>
                Gets the mapped entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.Table">
            <summary>
                Gets the target table-like object.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.ColumnMappings">
            <summary>
                Gets the properties mapped to columns on the target table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IsSharedTablePrincipal">
            <summary>
                Gets the value indicating whether this is the mapping for the principal entity type
                if the table-like object is shared.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IsSplitEntityTypePrincipal">
            <summary>
                Gets the value indicating whether this is the mapping for the principal table-like object
                if the entity type is split.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.ITableMappingBase.IncludesDerivedTypes">
            <summary>
                Gets the value indicating whether the mapped table-like object includes rows for the derived entity types.
                Set to <see langword="false" /> for inherited mappings.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint">
            <summary>
                Represents a unique constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.Name">
            <summary>
                Gets the name of the unique constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.MappedKeys">
            <summary>
                Gets the mapped keys.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.Table">
            <summary>
                Gets the table on with the unique constraint is declared.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint.Columns">
            <summary>
                Gets the columns that are participating in the unique constraint.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IView">
            <summary>
                Represents a view in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IView.EntityTypeMappings">
            <summary>
                Gets the entity type mappings.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IView.Columns">
            <summary>
                Gets the columns defined for this view.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IView.FindColumn(System.String)">
            <summary>
                Gets the column with the given name. Returns <see langword="null" /> if no column with the given name is defined.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.IView.FindColumn(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the column mapped to the given property. Returns <see langword="null" /> if no column is mapped to the given property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IView.ViewDefinitionSql">
            <summary>
                Gets the view definition or <see langword="null" /> if this view is not managed by migrations.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IViewColumn">
            <summary>
                Represents a column in a view.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IViewColumn.View">
            <summary>
                Gets the containing view.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IViewColumn.PropertyMappings">
            <summary>
                Gets the property mappings.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IViewColumnMapping">
            <summary>
                Represents property mapping to a column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IViewColumnMapping.Column">
            <summary>
                Gets the target column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IViewColumnMapping.ViewMapping">
            <summary>
                Gets the containing view mapping.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.IViewMapping">
            <summary>
                Represents entity type mapping to a view.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IViewMapping.View">
            <summary>
                Gets the target view.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.IViewMapping.ColumnMappings">
            <summary>
                Gets the properties mapped to columns on the target view.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames">
            <summary>
                Names for well-known relational model annotations. Applications should not use these names
                directly, but should instead use the extension methods on metadata objects.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.Prefix">
            <summary>
                The prefix used for all relational annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.ColumnName">
            <summary>
                The name for column name annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.ColumnType">
            <summary>
                The name for column type annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.DefaultValueSql">
            <summary>
                The name for default value SQL expression annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.ComputedColumnSql">
            <summary>
                The name for computed value SQL expression annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.IsStored">
            <summary>
                The name for computed column type annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.DefaultValue">
            <summary>
                The name for default value annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.TableName">
            <summary>
                The name for table name annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.Schema">
            <summary>
                The name for schema name annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.ViewName">
            <summary>
                The name for view name annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.ViewSchema">
            <summary>
                The name for view schema name annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.FunctionName">
            <summary>
                The name for mapped function name annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.SqlQuery">
            <summary>
                The name for mapped sql query annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.Comment">
            <summary>
                The name for comment annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.Collation">
            <summary>
                The name for collation annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.DefaultSchema">
            <summary>
                The name for default schema annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.Name">
            <summary>
                The name for constraint name annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.SequencePrefix">
            <summary>
                The prefix for serialized sequence annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.Sequences">
            <summary>
                The name for sequence annotation.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.CheckConstraints">
            <summary>
                The name for check constraint annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.Filter">
            <summary>
                The name for filter annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.DbFunction">
            <summary>
                The name for DbFunction annotation.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.DbFunctions">
            <summary>
                The name for functions annotation.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.MaxIdentifierLength">
            <summary>
                The name for the annotation containing the maximum length for database identifiers.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.IsFixedLength">
            <summary>
                The name for the annotation containing a flag indicating whether the property is constrained to fixed length values.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.ViewDefinitionSql">
            <summary>
                The name for the annotation containing the definition of a database view.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.IsTableExcludedFromMigrations">
            <summary>
                The name for the annotation determining whether the table is excluded from migrations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.RelationalModel">
            <summary>
                The name for database model annotation.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.DefaultMappings">
            <summary>
                The name for default mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.DefaultColumnMappings">
            <summary>
                The name for default column mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.TableMappings">
            <summary>
                The name for table mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.TableColumnMappings">
            <summary>
                The name for column mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.ViewMappings">
            <summary>
                The name for view mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.ViewColumnMappings">
            <summary>
                The name for view column mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.FunctionMappings">
            <summary>
                The name for function mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.FunctionColumnMappings">
            <summary>
                The name for function column mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.SqlQueryMappings">
            <summary>
                The name for sql query mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.SqlQueryColumnMappings">
            <summary>
                The name for sql query column mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.ForeignKeyMappings">
            <summary>
                The name for foreign key mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.TableIndexMappings">
            <summary>
                The name for table index mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.UniqueConstraintMappings">
            <summary>
                The name for unique constraint mappings annotations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationNames.RelationalOverrides">
            <summary>
                The name for the annotation that contains table-specific facet overrides.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider">
            <summary>
                <para>
                    A base class inherited by database providers that gives access to annotations
                    used by relational EF Core components on various elements of the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" />.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.#ctor(Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProviderDependencies)">
            <summary>
                Initializes a new instance of this class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IColumn)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IView)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IViewColumn)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ISqlQuery)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IStoreFunction)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IFunctionColumn)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ITableIndex)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ISequence)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider.For(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProviderDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
                    This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProviderDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Metadata.RelationalAnnotationProvider" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.SequenceExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.SequenceExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.ISequence,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="sequence"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.SqlQueryColumnExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.SqlQueryColumnExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumn,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="column"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.SqlQueryColumnMappingExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumnMapping" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.SqlQueryColumnMappingExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.ISqlQueryColumnMapping,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="columnMapping"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.SqlQueryExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery" />.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.SqlQueryExtensions.DefaultQueryNameBase">
            <summary>
                Gets the name used for the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQuery" /> mapped using
                <see cref="M:RelationalEntityTypeBuilderExtensions.ToSqlQuery" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.SqlQueryExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.ISqlQuery,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="sqlQuery"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.SqlQueryMappingExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.SqlQueryMappingExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.ISqlQueryMapping,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="sqlQueryMapping"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.StoreFunctionExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreFunctionExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IStoreFunction,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="function"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.StoreFunctionParameterExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreFunctionParameterExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IStoreFunctionParameter,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="parameter"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier">
            <summary>
                A type that represents the id of a store object
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.Create(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.StoreObjectType)">
            <summary>
                Creates an id for the store object that the given entity type is mapped to />.
            </summary>
            <param name="entityType"> The entity type. </param>
            <param name="type"> The store object type. </param>
            <returns> The store object id. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.Table(System.String,System.String)">
            <summary>
                Creates a table id.
            </summary>
            <param name="name"> The table name. </param>
            <param name="schema"> The table schema. </param>
            <returns> The table id. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.View(System.String,System.String)">
            <summary>
                Creates a view id.
            </summary>
            <param name="name"> The view name. </param>
            <param name="schema"> The view schema. </param>
            <returns> The view id. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.SqlQuery(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Creates an id for the SQL query mapped using <see cref="M:RelationalEntityTypeBuilderExtensions.ToSqlQuery" />.
            </summary>
            <param name="entityType"> The entity type. </param>
            <returns> The SQL query id. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.SqlQuery(System.String)">
            <summary>
                Creates a SQL query id.
            </summary>
            <param name="name"> The SQL query name. </param>
            <returns> The SQL query id. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.DbFunction(System.String)">
            <summary>
                Creates a function id.
            </summary>
            <param name="modelName"> The function model name. </param>
            <returns> The function id. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.StoreObjectType">
            <summary>
                Gets the table-like store object type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.Name">
            <summary>
                Gets the table-like store object name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.Schema">
            <summary>
                Gets the table-like store object schema.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.CompareTo(Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.DisplayName">
            <summary>
                Gets the friendly display name for the store object.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.ToString">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.Equals(Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.op_Equality(Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier)">
            <summary>
                Compares one id to another id to see if they represent the same store object.
            </summary>
            <param name="left"> The first id. </param>
            <param name="right"> The second id. </param>
            <returns> <see langword="true" /> if they represent the same store object; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier.op_Inequality(Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier,Microsoft.EntityFrameworkCore.Metadata.StoreObjectIdentifier)">
            <summary>
                Compares one id to another id to see if they represent the same store object.
            </summary>
            <param name="left"> The first id. </param>
            <param name="right"> The second id. </param>
            <returns> <see langword="false" /> if they represent the same store object; <see langword="true" /> otherwise. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.StoreObjectType">
            <summary>
                The table-like store object type.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.StoreObjectType.Table">
            <summary>
                A table.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.StoreObjectType.View">
            <summary>
                A view.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.StoreObjectType.SqlQuery">
            <summary>
                A SQL query.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Metadata.StoreObjectType.Function">
            <summary>
                A table-valued function.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.TableExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITable" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.TableExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.ITable,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="table"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.TableIndexExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITableIndex" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.TableIndexExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.ITableIndex,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="index"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.TableMappingExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITableMapping" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.TableMappingExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.ITableMapping,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="tableMapping"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.UniqueConstraintExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.UniqueConstraintExtensions.GetIsPrimaryKey(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint)">
            <summary>
                Gets a value indicating whether this constraint is the primary key.
            </summary>
            <param name="uniqueConstraint"> The metadata item. </param>
            <returns> <see langword="true" /> if the constraint is the primary key </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.UniqueConstraintExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="uniqueConstraint"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ViewColumnExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IViewColumn" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ViewColumnExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IViewColumn,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="column"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ViewColumnMappingExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IViewColumnMapping" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ViewColumnMappingExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IViewColumnMapping,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="columnMapping"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ViewExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IView" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ViewExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IView,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="view"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Metadata.ViewMappingExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IViewMapping" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Metadata.ViewMappingExtensions.ToDebugString(Microsoft.EntityFrameworkCore.Metadata.IViewMapping,Microsoft.EntityFrameworkCore.Infrastructure.MetadataDebugStringOptions,System.Int32)">
            <summary>
                <para>
                    Creates a human-readable representation of the given metadata.
                </para>
                <para>
                    Warning: Do not rely on the format of the returned string.
                    It is designed for debugging only and may change arbitrarily between releases.
                </para>
            </summary>
            <param name="viewMapping"> The metadata item. </param>
            <param name="options"> Options for generating the string. </param>
            <param name="indent"> The number of indent spaces to use before each new line. </param>
            <returns> A human-readable representation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository">
            <summary>
                <para>
                    A base class for the repository used to access the '__EFMigrationsHistory' table that tracks metadata
                    about EF Core Migrations such as which migrations have been applied.
                </para>
                <para>
                    Database providers must inherit from this class to implement provider-specific functionality.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.DefaultTableName">
            <summary>
                The default name for the Migrations history table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.#ctor(Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies)">
            <summary>
                Initializes a new instance of this class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.SqlGenerationHelper">
            <summary>
                A helper class for generation of SQL.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableName">
            <summary>
                THe history table name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.TableSchema">
            <summary>
                The schema that contains the history table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.MigrationIdColumnName">
            <summary>
                The name of the column that holds the Migration identifier.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ProductVersionColumnName">
            <summary>
                The name of the column that contains the Entity Framework product version.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql">
            <summary>
                Overridden by database providers to generate SQL that tests for existence of the history table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.Exists">
            <summary>
                Checks whether or not the history table exists.
            </summary>
            <returns> <see langword="true" /> if the table already exists, <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
                Checks whether or not the history table exists.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains
                <see langword="true" /> if the table already exists, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.InterpretExistsResult(System.Object)">
            <summary>
                Interprets the result of executing <see cref="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ExistsSql" />.
            </summary>
            <returns><see langword="true" /> if the table already exists, <see langword="false" /> otherwise.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateIfNotExistsScript">
            <summary>
                Overridden by a database provider to generate a SQL script that will create the history table
                if and only if it does not already exist.
            </summary>
            <returns> The SQL script. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetCreateScript">
            <summary>
                Generates a SQL script that will create the history table.
            </summary>
            <returns> The SQL script. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.ConfigureTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{Microsoft.EntityFrameworkCore.Migrations.HistoryRow})">
            <summary>
                <para>
                    Configures the entity type mapped to the history table.
                </para>
                <para>
                    Database providers can override this to add or replace configuration.
                </para>
            </summary>
            <param name="history"> A builder for the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entity type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrations">
            <summary>
                Queries the history table for all migrations that have been applied.
            </summary>
            <returns> The list of applied migrations, as <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entities. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)">
            <summary>
                Queries the history table for all migrations that have been applied.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains
                the list of applied migrations, as <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entities.
            </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetAppliedMigrationsSql">
            <summary>
                Generates SQL to query for the migrations that have been applied.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)">
            <summary>
                Generates a SQL script to insert a row into the history table.
            </summary>
            <param name="row"> The row to insert, represented as a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entity. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetDeleteScript(System.String)">
            <summary>
                Generates a SQL script to delete a row from the history table.
            </summary>
            <param name="migrationId"> The migration identifier of the row to delete. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfNotExistsScript(System.String)">
            <summary>
                Overridden by database providers to generate a SQL Script that will <c>BEGIN</c> a block
                of SQL if and only if the migration with the given identifier does not already exist in the history table.
            </summary>
            <param name="migrationId"> The migration identifier. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetBeginIfExistsScript(System.String)">
            <summary>
                Overridden by database providers to generate a SQL Script that will <c>BEGIN</c> a block
                of SQL if and only if the migration with the given identifier already exists in the history table.
            </summary>
            <param name="migrationId"> The migration identifier. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository.GetEndIfScript">
            <summary>
                Overridden by database providers to generate a SQL script to <c>END</c> the SQL block.
            </summary>
            <returns> The generated SQL. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.DatabaseCreator">
            <summary>
                The database creator.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.RawSqlCommandBuilder">
            <summary>
                A command builder for building raw SQL commands.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.Connection">
            <summary>
                The connection to the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.Options">
            <summary>
                Options for the current context instance.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.ModelDiffer">
            <summary>
                The model differ.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.MigrationsSqlGenerator">
            <summary>
                The SQL generator for Migrations operations.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.SqlGenerationHelper">
            <summary>
                Helpers for generating update SQL.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.ConventionSetBuilder">
            <summary>
                The core convention set to use when creating the model.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.ModelDependencies">
            <summary>
                The model dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.TypeMappingSource">
            <summary>
                The type mapper.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.CurrentContext">
            <summary>
                Contains the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently in use.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.ModelLogger">
            <summary>
                The model logger
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.CommandLogger">
            <summary>
                The command logger
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="databaseCreator"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="rawSqlCommandBuilder"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="connection"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="options"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="modelDiffer"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="migrationsSqlGenerator"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlGenerationHelper"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="conventionSetBuilder"> The core convention set to use when creating the model. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.ModelDependencies)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="modelDependencies"> The core convention set to use when creating the model. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> The type mapper. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="currentContext"> The type mapper. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Model})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="modelLogger"> The type mapper. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRepositoryDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="commandLogger"> The command logger. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow">
            <summary>
                An entity type that represents a row in the Migrations history table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.HistoryRow.#ctor(System.String,System.String)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> with the given migration identifier for
                the given version of EF Core.
            </summary>
            <param name="migrationId"> The migration identifier. </param>
            <param name="productVersion">
                The EF Core version, which is obtained from the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" />
                of the EF Core assembly.
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRow.MigrationId">
            <summary>
                The migration identifier.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.HistoryRow.ProductVersion">
            <summary>
                The EF Core version, as obtained from the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute" />
                of the EF Core assembly.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository">
            <summary>
                <para>
                    An interface for the repository used to access the '__EFMigrationsHistory' table that tracks metadata
                    about EF Core Migrations such as which migrations have been applied.
                </para>
                <para>
                    Database providers typically implement this service by inheriting from <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRepository" />.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.Exists">
            <summary>
                Checks whether or not the history table exists.
            </summary>
            <returns> <see langword="true" /> if the table already exists, <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
                Checks whether or not the history table exists.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains
                <see langword="true" /> if the table already exists, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrations">
            <summary>
                Queries the history table for all migrations that have been applied.
            </summary>
            <returns> The list of applied migrations, as <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entities. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetAppliedMigrationsAsync(System.Threading.CancellationToken)">
            <summary>
                Queries the history table for all migrations that have been applied.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains
                the list of applied migrations, as <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entities.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateScript">
            <summary>
                Generates a SQL script that will create the history table.
            </summary>
            <returns> The SQL script. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetCreateIfNotExistsScript">
            <summary>
                Generates a SQL script that will create the history table if and only if it does not already exist.
            </summary>
            <returns> The SQL script. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetInsertScript(Microsoft.EntityFrameworkCore.Migrations.HistoryRow)">
            <summary>
                Generates a SQL script to insert a row into the history table.
            </summary>
            <param name="row"> The row to insert, represented as a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.HistoryRow" /> entity. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetDeleteScript(System.String)">
            <summary>
                Generates a SQL script to delete a row from the history table.
            </summary>
            <param name="migrationId"> The migration identifier of the row to delete. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfNotExistsScript(System.String)">
            <summary>
                Generates a SQL Script that will <c>BEGIN</c> a block
                of SQL if and only if the migration with the given identifier does not already exist in the history table.
            </summary>
            <param name="migrationId"> The migration identifier. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetBeginIfExistsScript(System.String)">
            <summary>
                Generates a SQL Script that will <c>BEGIN</c> a block
                of SQL if and only if the migration with the given identifier already exists in the history table.
            </summary>
            <param name="migrationId"> The migration identifier. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository.GetEndIfScript">
            <summary>
                Generates a SQL script to <c>END</c> the SQL block.
            </summary>
            <returns> The generated SQL. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor">
            <summary>
                <para>
                    A service for executing migration commands against a database.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor.ExecuteNonQuery(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.MigrationCommand},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                Executes the given commands using the given database connection.
            </summary>
            <param name="migrationCommands"> The commands to execute. </param>
            <param name="connection"> The connection to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor.ExecuteNonQueryAsync(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.MigrationCommand},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)">
            <summary>
                Executes the given commands using the given database connection.
            </summary>
            <param name="migrationCommands"> The commands to execute. </param>
            <param name="connection"> The connection to use. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider">
            <summary>
                <para>
                    A service typically implemented by database providers that gives access to annotations used by EF Core Migrations
                    when generating removal operations for various elements of the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel" />. The annotations
                    stored in the relational model are provided by <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalAnnotationProvider" />.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <summary>
                Gets provider-specific Migrations annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel" />
                when it is being altered.
            </summary>
            <param name="model"> The database model. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <summary>
                Gets provider-specific Migrations annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITable" />
                when it is being removed.
            </summary>
            <param name="table"> The table. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IColumn)">
            <summary>
                Gets provider-specific Migrations annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IColumn" />
                when it is being removed.
            </summary>
            <param name="column"> The column. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IView)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IView" />
                when it is being removed.
            </summary>
            <param name="view"> The view. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IViewColumn)">
            <summary>
                Gets provider-specific annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IViewColumn" />
                when it is being removed.
            </summary>
            <param name="column"> The column. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint)">
            <summary>
                Gets provider-specific Migrations annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint" />
                when it is being removed.
            </summary>
            <param name="constraint"> The unique constraint. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.ITableIndex)">
            <summary>
                Gets provider-specific Migrations annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITableIndex" />
                when it is being removed.
            </summary>
            <param name="index"> The index. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)">
            <summary>
                Gets provider-specific Migrations annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint" />
                when it is being removed.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.ISequence)">
            <summary>
                Gets provider-specific Migrations annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ISequence" />
                when it is being removed.
            </summary>
            <param name="sequence"> The sequence. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint)">
            <summary>
                Gets provider-specific Migrations annotations for the given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint" />
                when it is being removed.
            </summary>
            <param name="checkConstraint"> The check constraint. </param>
            <returns> The annotations. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly">
            <summary>
                <para>
                    A service representing an assembly containing EF Core Migrations.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly.Migrations">
            <summary>
                A dictionary mapping migration identifiers to the <see cref="T:System.Reflection.TypeInfo" /> of the class
                that represents the migration.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly.ModelSnapshot">
            <summary>
                The snapshot of the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> contained in the assembly.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly.Assembly">
            <summary>
                The assembly that contains the migrations, snapshot, etc.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly.FindMigrationId(System.String)">
            <summary>
                Finds a migration identifier in the assembly with the given a full migration name or
                just its identifier.
            </summary>
            <param name="nameOrId"> The name or identifier to lookup. </param>
            <returns> The identifier of the migration, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly.CreateMigration(System.Reflection.TypeInfo,System.String)">
            <summary>
                Creates an instance of the migration class.
            </summary>
            <param name="migrationClass">
                The <see cref="T:System.Reflection.TypeInfo" /> for the migration class, as obtained from the <see cref="P:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly.Migrations" /> dictionary.
            </param>
            <param name="activeProvider"> The name of the current database provider. </param>
            <returns> The migration instance. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsIdGenerator">
            <summary>
                <para>
                    A service for generating migration identifiers from names and names from identifiers.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsIdGenerator.GenerateId(System.String)">
            <summary>
                Generates an identifier given a migration name.
            </summary>
            <param name="name"> The migration name. </param>
            <returns> The identifier. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsIdGenerator.GetName(System.String)">
            <summary>
                Gets a migration name based on the given identifier.
            </summary>
            <param name="id"> The migration identifier. </param>
            <returns> The migration name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsIdGenerator.IsValidId(System.String)">
            <summary>
                Checks whether or not the given string is a valid migration identifier.
            </summary>
            <param name="value"> The candidate string. </param>
            <returns> <see langword="true" /> if the string is a valid migration identifier; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer">
            <summary>
                <para>
                    A service for finding differences between two <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel" />s and transforming
                    those differences into <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />s that can be used to
                    update the database.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer.HasDifferences(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <summary>
                Checks whether there are differences between the two models.
            </summary>
            <param name="source"> The first model. </param>
            <param name="target"> The second model. </param>
            <returns>
                <see langword="true" /> if there are any differences and <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer.GetDifferences(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <summary>
                Finds the differences between two models.
            </summary>
            <param name="source"> The model as it was before it was possibly modified. </param>
            <param name="target"> The model as it is now. </param>
            <returns>
                A list of the operations that need to applied to the database to migrate it
                from mapping to the source model so that is now mapping to the target model.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator">
            <summary>
                <para>
                    A service for generating <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand" /> objects that can
                    then be executed or scripted from a list of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />s.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator.Generate(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation},Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)">
            <summary>
                Generates commands from a list of operations.
            </summary>
            <param name="operations"> The operations. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="options"> The options to use when generating commands. </param>
            <returns> The list of commands to be executed or scripted. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.IMigrator">
            <summary>
                <para>
                    The main service used to generated an EF Core Migrations script or
                    migrate a database directly.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrator.Migrate(System.String)">
            <summary>
                Migrates the database to either a specified target migration or up to the latest
                migration that exists in the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" />.
            </summary>
            <param name="targetMigration">
                The target migration to migrate the database to, or <see langword="null" /> to migrate to the latest.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrator.MigrateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                Migrates the database to either a specified target migration or up to the latest
                migration that exists in the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" />.
            </summary>
            <param name="targetMigration">
                The target migration to migrate the database to, or <see langword="null" /> to migrate to the latest.
            </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A task that represents the asynchronous operation </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.IMigrator.GenerateScript(System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)">
            <summary>
                Generates a SQL script to migrate a database either in its entirety, or starting and
                ending at specified migrations.
            </summary>
            <param name="fromMigration">
                The migration to start from, or <see langword="null" /> to start from the empty database.
            </param>
            <param name="toMigration">
                The target migration to migrate the database to, or <see langword="null" /> to migrate to the latest.
            </param>
            <param name="options">
                The options to use when generating SQL for migrations.
            </param>
            <returns> The generated script. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQuery(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.MigrationCommand},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationCommandExecutor.ExecuteNonQueryAsync(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.MigrationCommand},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationExtensions.GetId(Microsoft.EntityFrameworkCore.Migrations.Migration)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext,Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Migrations.IMigrationsIdGenerator,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly.Migrations">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly.ModelSnapshot">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly.Assembly">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly.FindMigrationId(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsAssembly.CreateMigration(System.Reflection.TypeInfo,System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsIdGenerator">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsIdGenerator.GetName(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsIdGenerator.IsValidId(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsIdGenerator.GenerateId(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Migrations.IMigrationsAnnotationProvider,Microsoft.EntityFrameworkCore.ChangeTracking.Internal.IChangeDetector,Microsoft.EntityFrameworkCore.Update.IUpdateAdapterFactory,Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.TypeMappingSource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.MigrationsAnnotations">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.UpdateAdapterFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.CommandBatchPreparerDependencies">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.ChangeDetector">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.HasDifferences(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.GetDifferences(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Sort(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Add(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Remove(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Add(System.String,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Remove(System.String,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ITable},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ITable},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(Microsoft.EntityFrameworkCore.Metadata.ITable,Microsoft.EntityFrameworkCore.Metadata.ITable,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Add(Microsoft.EntityFrameworkCore.Metadata.ITable,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Remove(Microsoft.EntityFrameworkCore.Metadata.ITable,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IColumn},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IColumn},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Add(Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Remove(Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint,Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Add(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Remove(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint,Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Add(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Remove(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ITableIndex},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ITableIndex},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(Microsoft.EntityFrameworkCore.Metadata.ITableIndex,Microsoft.EntityFrameworkCore.Metadata.ITableIndex,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Add(Microsoft.EntityFrameworkCore.Metadata.ITableIndex,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Remove(Microsoft.EntityFrameworkCore.Metadata.ITableIndex,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Add(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Remove(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ISequence},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Metadata.ISequence},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(Microsoft.EntityFrameworkCore.Metadata.ISequence,Microsoft.EntityFrameworkCore.Metadata.ISequence,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Add(Microsoft.EntityFrameworkCore.Metadata.ISequence,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Remove(Microsoft.EntityFrameworkCore.Metadata.ISequence,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.TrackData(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffData(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.GetDataOperations(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Metadata.IRelationalModel,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffCollection``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext,System.Func{``0,``0,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation}},System.Func{``0,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation}},System.Func{``0,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation}},System.Func{``0,``0,Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext,System.Boolean}[])">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.HasDifferences(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation},System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Infrastructure.IAnnotation})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.GetSchemas(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.GetDefaultValue(System.Type)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.GetMappedProperties(Microsoft.EntityFrameworkCore.Metadata.ITable,System.String[])">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.SharedIdentityMap.Values">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.SharedIdentityMap.GetOrAddValue(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.AddMapping``1(``0,``0)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.AddCreate(Microsoft.EntityFrameworkCore.Metadata.ITable,Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.AddDrop(Microsoft.EntityFrameworkCore.Metadata.ITable,Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.AddDrop(Microsoft.EntityFrameworkCore.Metadata.IColumn,Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.GetTable(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.FindSource``1(``0)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.FindTarget``1(``0)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.FindCreate(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.FindDrop(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.FindDrop(Microsoft.EntityFrameworkCore.Metadata.IColumn)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.DiffContext.FindTable(Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.#ctor(Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly,Microsoft.EntityFrameworkCore.Migrations.IHistoryRepository,Microsoft.EntityFrameworkCore.Storage.IDatabaseCreator,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext,Microsoft.EntityFrameworkCore.Metadata.Conventions.Infrastructure.IConventionSetBuilder,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Storage.IDatabaseProvider)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.Migrate(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.MigrateAsync(System.String,System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.PopulateMigrations(System.Collections.Generic.IEnumerable{System.String},System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.Migration}@,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.Migration}@,Microsoft.EntityFrameworkCore.Migrations.Migration@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.GenerateScript(System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.GenerateUpSql(Microsoft.EntityFrameworkCore.Migrations.Migration,Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Internal.Migrator.GenerateDownSql(Microsoft.EntityFrameworkCore.Migrations.Migration,Microsoft.EntityFrameworkCore.Migrations.Migration,Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Migration">
            <summary>
                A base class inherited by each EF Core migration.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.Migration.InitialDatabase">
            <summary>
                The migration identifier for the empty database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Migration.TargetModel">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IModel" /> that the database will map to after the migration has been applied.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Migration.UpOperations">
            <summary>
                <para>
                    The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />s that will migrate the database 'up'.
                </para>
                <para>
                    That is, those operations that need to be applied to the database
                    to take it from the state left in by the previous migration so that it is up-to-date
                    with regard to this migration.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Migration.DownOperations">
            <summary>
                <para>
                    The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />s that will migrate the database 'down'.
                </para>
                <para>
                    That is, those operations that need to be applied to the database
                    to take it from the state left in by this migration so that it returns to the
                    state that it was in before this migration was applied.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Migration.ActiveProvider">
            <summary>
                <para>
                    The name of the current database provider.
                </para>
                <para>
                    This can be used to write conditional code in the migration such that different changes
                    can be made to the database depending on the type of database being used.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Migration.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
                Implemented to build the <see cref="P:Microsoft.EntityFrameworkCore.Migrations.Migration.TargetModel" />.
            </summary>
            <param name="modelBuilder"> The <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder" /> to use to build the model. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
                <para>
                    Builds the operations that will migrate the database 'up'.
                </para>
                <para>
                    That is, builds the operations that will take the database from the state left in by the
                    previous migration so that it is up-to-date with regard to this migration.
                </para>
                <para>
                    This method must be overridden in each class the inherits from <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Migration" />.
                </para>
            </summary>
            <param name="migrationBuilder"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder" /> that will build the operations. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Migration.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <summary>
                <para>
                    Builds the operations that will migrate the database 'down'.
                </para>
                <para>
                    That is, builds the operations that will take the database from the state left in by
                    this migration so that it returns to the state that it was in before this migration was applied.
                </para>
                <para>
                    This method must be overridden in each class the inherits from <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Migration" /> if
                    both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it
                    will throw and it will not be possible to migrate in the 'down' direction.
                </para>
            </summary>
            <param name="migrationBuilder"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder" /> that will build the operations. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute">
            <summary>
                Indicates that a class is a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Migration" /> and provides its identifier.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute.#ctor(System.String)">
            <summary>
                Creates a new instance of this attribute.
            </summary>
            <param name="id"> The migration identifier. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationAttribute.Id">
            <summary>
                The migration identifier.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder">
            <summary>
                A builder providing a fluentish API for building <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />s.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.#ctor(System.String)">
            <summary>
                Creates a new instance of the builder.
            </summary>
            <param name="activeProvider"> The name of the database provider being used. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.ActiveProvider">
            <summary>
                The name of the database provider being used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.Operations">
            <summary>
                The list of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />s being built.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AddColumn``1(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.String,System.Boolean,System.Object,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" /> to add a new column to a table.
            </summary>
            <typeparam name="T"> The CLR type that the column is mapped to. </typeparam>
            <param name="name"> The column name. </param>
            <param name="table"> The name of the table that contains the column. </param>
            <param name="type"> The store/database type of the column. </param>
            <param name="unicode">
                Indicates whether or not the column can contain Unicode data, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="maxLength">
                The maximum length of data that can be stored in the column, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="rowVersion">
                Indicates whether or not the column acts as an automatic concurrency token, such as a rowversion/timestamp column
                in SQL Server.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> if the default schema should be used. </param>
            <param name="nullable"> Indicates whether or not the column can store <see langword="null" /> values. </param>
            <param name="defaultValue"> The default value for the column. </param>
            <param name="defaultValueSql"> The SQL expression to use for the column's default constraint. </param>
            <param name="computedColumnSql"> The SQL expression to use to compute the column value. </param>
            <param name="fixedLength"> Indicates whether or not the column is constrained to fixed-length data. </param>
            <param name="comment"> A comment to associate with the column. </param>
            <param name="collation"> A collation to apply to the column. </param>
            <param name="precision">
                The maximum number of digits that is allowed in this column, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="scale">
                The maximum number of decimal places that is allowed in this column, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="stored"> Whether the value of the computed column is stored in the database or not. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AddForeignKey(System.String,System.String,System.String,System.String,System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.ReferentialAction,Microsoft.EntityFrameworkCore.Migrations.ReferentialAction)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation" /> to add a new foreign key to a table.
            </summary>
            <param name="name"> The foreign key constraint name. </param>
            <param name="table"> The table that contains the foreign key. </param>
            <param name="column"> The column that is constrained. </param>
            <param name="principalTable"> The table to which the foreign key is constrained. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> if the default schema should be used. </param>
            <param name="principalSchema">
                The schema that contains principal table, or <see langword="null" /> if the default schema should be used.
            </param>
            <param name="principalColumn">
                The column to which the foreign key column is constrained, or <see langword="null" /> to constrain to the primary key
                column.
            </param>
            <param name="onUpdate"> The action to take on updates. </param>
            <param name="onDelete"> The action to take on deletes. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AddForeignKey(System.String,System.String,System.String[],System.String,System.String,System.String,System.String[],Microsoft.EntityFrameworkCore.Migrations.ReferentialAction,Microsoft.EntityFrameworkCore.Migrations.ReferentialAction)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation" /> to add a new composite (multi-column) foreign key to a table.
            </summary>
            <param name="name"> The foreign key constraint name. </param>
            <param name="table"> The table that contains the foreign key. </param>
            <param name="columns"> The ordered list of columns that are constrained. </param>
            <param name="principalTable"> The table to which the foreign key is constrained. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> if the default schema should be used. </param>
            <param name="principalSchema">
                The schema that contains principal table, or <see langword="null" /> if the default schema should be used.
            </param>
            <param name="principalColumns">
                The columns to which the foreign key columns are constrained, or <see langword="null" /> to constrain to the primary key
                column.
            </param>
            <param name="onUpdate"> The action to take on updates. </param>
            <param name="onDelete"> The action to take on deletes. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AddPrimaryKey(System.String,System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" /> to add a new primary key to a table.
            </summary>
            <param name="name"> The primary key constraint name. </param>
            <param name="table"> The table that will contain the primary key. </param>
            <param name="column"> The column that constitutes the primary key. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AddPrimaryKey(System.String,System.String,System.String[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" /> to add a new composite (multi-column) primary key to a table.
            </summary>
            <param name="name"> The primary key constraint name. </param>
            <param name="table"> The table that will contain the primary key. </param>
            <param name="columns"> The ordered list of columns that constitute the primary key. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AddUniqueConstraint(System.String,System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" /> to add a new unique constraint to a table.
            </summary>
            <param name="name"> The constraint name. </param>
            <param name="table"> The table that will contain the constraint. </param>
            <param name="column"> The column that is constrained. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AddUniqueConstraint(System.String,System.String,System.String[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" /> to add a new composite (multi-column) unique constraint to a table.
            </summary>
            <param name="name"> The constraint name. </param>
            <param name="table"> The table that will contain the constraint. </param>
            <param name="columns"> The ordered list of columns that are constrained. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AlterColumn``1(System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.String,System.Boolean,System.Object,System.String,System.String,System.Type,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Object,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation" /> to alter an existing column.
            </summary>
            <typeparam name="T"> The CLR type that the column is mapped to. </typeparam>
            <param name="name"> The column name. </param>
            <param name="table"> The name of the table that contains the column. </param>
            <param name="type"> The store/database type of the column. </param>
            <param name="unicode">
                Indicates whether or not the column can contain Unicode data, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="maxLength">
                The maximum length of data that can be stored in the column, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="rowVersion">
                Indicates whether or not the column acts as an automatic concurrency token, such as a rowversion/timestamp column
                in SQL Server.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> if the default schema should be used. </param>
            <param name="nullable"> Indicates whether or not the column can store <see langword="null" /> values. </param>
            <param name="defaultValue"> The default value for the column. </param>
            <param name="defaultValueSql"> The SQL expression to use for the column's default constraint. </param>
            <param name="computedColumnSql"> The SQL expression to use to compute the column value. </param>
            <param name="oldClrType">
                The CLR type that the column was previously mapped to. Can be <see langword="null" />, in which case previous value is considered
                unknown.
            </param>
            <param name="oldType">
                The previous store/database type of the column. Can be <see langword="null" />, in which case previous value is considered unknown.
            </param>
            <param name="oldUnicode">
                Indicates whether or not the column could previously contain Unicode data, or <see langword="null" /> if not specified or not
                applicable.
            </param>
            <param name="oldMaxLength">
                The previous maximum length of data that can be stored in the column, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="oldRowVersion">
                Indicates whether or not the column previously acted as an automatic concurrency token, such as a rowversion/timestamp column
                in SQL Server. Can be <see langword="null" />, in which case previous value is considered unknown.
            </param>
            <param name="oldNullable">
                Indicates whether or not the column could previously store <see langword="null" /> values. Can be <see langword="null" />, in which
                case previous value is
                considered unknown.
            </param>
            <param name="oldDefaultValue">
                The previous default value for the column. Can be <see langword="null" />, in which case previous value is considered unknown.
            </param>
            <param name="oldDefaultValueSql">
                The previous SQL expression used for the column's default constraint. Can be <see langword="null" />, in which case previous value is
                considered
                unknown.
            </param>
            <param name="oldComputedColumnSql">
                The previous SQL expression used to compute the column value. Can be <see langword="null" />, in which case previous value is
                considered unknown.
            </param>
            <param name="fixedLength"> Indicates whether or not the column is constrained to fixed-length data. </param>
            <param name="oldFixedLength"> Indicates whether or not the column was previously constrained to fixed-length data. </param>
            <param name="comment"> A comment to associate with the column. </param>
            <param name="oldComment"> The previous comment to associate with the column. </param>
            <param name="collation"> A collation to apply to the column. </param>
            <param name="oldCollation"> The previous collation to apply to the column. </param>
            <param name="precision">
                The maximum number of digits that is allowed in this column, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="oldPrecision">
                The previous maximum number of digits that is allowed in this column, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="scale">
                The maximum number of decimal places that is allowed in this column, or <see langword="null" /> if not specified or not applicable.
            </param>
            <param name="oldScale">
                The previous maximum number of decimal places that is allowed in this column, or <see langword="null" /> if not specified or not
                applicable.
            </param>
            <param name="stored"> Whether the value of the computed column is stored in the database or not. </param>
            <param name="oldStored"> Whether the value of the previous computed column was stored in the database or not. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AlterDatabase(System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation" /> to alter an existing database.
            </summary>
            <param name="collation"> A collation to apply to the column. </param>
            <param name="oldCollation"> The previous collation to apply to the column. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AlterSequence(System.String,System.String,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation" /> to alter an existing sequence.
            </summary>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
            <param name="incrementBy"> The amount to increment by when generating the next value in the sequence, defaulting to 1. </param>
            <param name="minValue"> The minimum value of the sequence, or <see langword="null" /> if not specified. </param>
            <param name="maxValue"> The maximum value of the sequence, or <see langword="null" /> if not specified. </param>
            <param name="cyclic"> Indicates whether or not the sequence will re-start when the maximum value is reached. </param>
            <param name="oldIncrementBy"> The previous amount to increment by when generating the next value in the sequence, defaulting to 1. </param>
            <param name="oldMinValue"> The previous minimum value of the sequence, or <see langword="null" /> if not specified. </param>
            <param name="oldMaxValue"> The previous maximum value of the sequence, or <see langword="null" /> if not specified. </param>
            <param name="oldCyclic"> Indicates whether or not the sequence would previously re-start when the maximum value is reached. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AlterTable(System.String,System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation" /> to alter an existing table.
            </summary>
            <param name="name"> The table name. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="comment"> A comment to associate with the table. </param>
            <param name="oldComment"> The previous comment to associate with the table. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.CreateIndex(System.String,System.String,System.String,System.String,System.Boolean,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" /> to create a new index.
            </summary>
            <param name="name"> The index name. </param>
            <param name="table"> The table that contains the index. </param>
            <param name="column"> The column that is indexed. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="unique"> Indicates whether or not the index enforces uniqueness. </param>
            <param name="filter"> The filter to apply to the index, or <see langword="null" /> for no filter. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.CreateIndex(System.String,System.String,System.String[],System.String,System.Boolean,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" /> to create a new composite (multi-column) index.
            </summary>
            <param name="name"> The index name. </param>
            <param name="table"> The table that contains the index. </param>
            <param name="columns"> The ordered list of columns that are indexed. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="unique"> Indicates whether or not the index enforces uniqueness. </param>
            <param name="filter"> The filter to apply to the index, or <see langword="null" /> for no filter. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.EnsureSchema(System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation" /> to ensure that a schema exists.
            </summary>
            <param name="name"> The name of the schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.CreateSequence(System.String,System.String,System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation" /> to create a new sequence.
            </summary>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
            <param name="startValue"> The value at which the sequence will start, defaulting to 1. </param>
            <param name="incrementBy"> The amount to increment by when generating the next value in the sequence, defaulting to 1. </param>
            <param name="minValue"> The minimum value of the sequence, or <see langword="null" /> if not specified. </param>
            <param name="maxValue"> The maximum value of the sequence, or <see langword="null" /> if not specified. </param>
            <param name="cyclic"> Indicates whether or not the sequence will re-start when the maximum value is reached. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.CreateSequence``1(System.String,System.String,System.Int64,System.Int32,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Boolean)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation" /> to create a new sequence.
            </summary>
            <typeparam name="T"> The CLR type of the values generated by the sequence. </typeparam>
            <param name="name"> The sequence name. </param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
            <param name="startValue"> The value at which the sequence will start, defaulting to 1. </param>
            <param name="incrementBy"> The amount to increment by when generating the next value in the sequence, defaulting to 1. </param>
            <param name="minValue"> The minimum value of the sequence, or <see langword="null" /> if not specified. </param>
            <param name="maxValue"> The maximum value of the sequence, or <see langword="null" /> if not specified. </param>
            <param name="cyclic"> Indicates whether or not the sequence will re-start when the maximum value is reached. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.CreateCheckConstraint(System.String,System.String,System.String,System.String)">
            <summary>
                <para>
                    Warning, this API is obsolete. Use <see cref="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AddCheckConstraint(System.String,System.String,System.String,System.String)" /> instead.
                </para>
                <para>
                    Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation" /> to create a new check constraint.
                </para>
            </summary>
            <param name="name"> The check constraint name. </param>
            <param name="table"> The name of the table for the check constraint. </param>
            <param name="sql"> The constraint sql for the check constraint. </param>
            <param name="schema"> The schema that contains the check constraint, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.AddCheckConstraint(System.String,System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation" /> to add a new check constraint to a table.
            </summary>
            <param name="name"> The check constraint name. </param>
            <param name="table"> The name of the table for the check constraint. </param>
            <param name="sql"> The constraint sql for the check constraint. </param>
            <param name="schema"> The schema that contains the check constraint, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.CreateTable``1(System.String,System.Func{Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder,``0},System.String,System.Action{Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder{``0}},System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" /> to create a new table.
            </summary>
            <typeparam name="TColumns"> Type of a typically anonymous type for building columns. </typeparam>
            <param name="name"> The name of the table. </param>
            <param name="columns">
                A delegate using a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder" /> to create an anonymous type configuring the columns of the table.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="constraints">
                A delegate allowing constraints to be applied over the columns configured by the 'columns' delegate above.
            </param>
            <param name="comment"> A comment to be applied to the table. </param>
            <returns> A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1" /> to allow further configuration to be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DropColumn(System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation" /> to drop an existing column.
            </summary>
            <param name="name"> The name of the column to drop. </param>
            <param name="table"> The table that contains the column. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DropForeignKey(System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation" /> to drop an existing foreign key constraint.
            </summary>
            <param name="name"> The name of the foreign key constraint to drop. </param>
            <param name="table"> The table that contains the foreign key. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DropIndex(System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation" /> to drop an existing index.
            </summary>
            <param name="name"> The name of the index to drop. </param>
            <param name="table"> The table that contains the index. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DropPrimaryKey(System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation" /> to drop an existing primary key.
            </summary>
            <param name="name"> The name of the primary key constraint to drop. </param>
            <param name="table"> The table that contains the key. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DropSchema(System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation" /> to drop an existing schema.
            </summary>
            <param name="name"> The name of the schema to drop. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DropSequence(System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation" /> to drop an existing sequence.
            </summary>
            <param name="name"> The name of the sequence to drop. </param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DropCheckConstraint(System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation" /> to drop an existing check constraint.
            </summary>
            <param name="name"> The name of the check constraint to drop. </param>
            <param name="table"> The name of the table for the check constraint to drop. </param>
            <param name="schema"> The schema that contains the check constraint, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DropTable(System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation" /> to drop an existing table.
            </summary>
            <param name="name"> The name of the table to drop. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DropUniqueConstraint(System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation" /> to drop an existing unique constraint.
            </summary>
            <param name="name"> The name of the constraint to drop. </param>
            <param name="table"> The table that contains the constraint. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.RenameColumn(System.String,System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation" /> to rename an existing column.
            </summary>
            <param name="name"> The name of the column to be renamed.</param>
            <param name="table"> The table that contains the column. </param>
            <param name="newName"> The new name for the column. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.RenameIndex(System.String,System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation" /> to rename an existing index.
            </summary>
            <param name="name"> The name of the index to be renamed.</param>
            <param name="newName"> The new name for the column. </param>
            <param name="table"> The table that contains the index. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.RenameSequence(System.String,System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation" /> to rename an existing sequence.
            </summary>
            <param name="name"> The name of the sequence to be renamed.</param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
            <param name="newName"> The new sequence name or <see langword="null" /> if only the schema has changed. </param>
            <param name="newSchema"> The new schema name or <see langword="null" /> if only the name has changed. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.RenameTable(System.String,System.String,System.String,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation" /> to rename an existing table.
            </summary>
            <param name="name"> The name of the table to be renamed.</param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="newName"> The new table name or <see langword="null" /> if only the schema has changed. </param>
            <param name="newSchema"> The new schema name, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.RestartSequence(System.String,System.Int64,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation" /> to re-start an existing sequence.
            </summary>
            <param name="name"> The name of the sequence.</param>
            <param name="startValue"> The value at which the sequence will start, defaulting to 1. </param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.Sql(System.String,System.Boolean)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation" /> to execute raw SQL.
            </summary>
            <param name="sql"> The SQL string to be executed to perform the operation. </param>
            <param name="suppressTransaction">
                Indicates whether or not transactions will be suppressed while executing the SQL.
            </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.InsertData(System.String,System.String,System.Object,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> to insert a single seed data value for a single column.
            </summary>
            <param name="table"> The table into which the data will be inserted. </param>
            <param name="column"> The name of the column into which the data will be inserted. </param>
            <param name="value"> The value to insert. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.InsertData(System.String,System.String,System.String,System.Object,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> to insert a single seed data value for a single column.
            </summary>
            <param name="table"> The table into which the data will be inserted. </param>
            <param name="column"> The name of the column into which the data will be inserted. </param>
            <param name="columnType"> The store type for the column into which data will be inserted. </param>
            <param name="value"> The value to insert. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.InsertData(System.String,System.String[],System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> to insert a single row of seed data values.
            </summary>
            <param name="table"> The table into which the data will be inserted. </param>
            <param name="columns"> The names of the columns into which the data will be inserted. </param>
            <param name="values"> The values to insert, one value for each column in 'columns'. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.InsertData(System.String,System.String[],System.String[],System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> to insert a single row of seed data values.
            </summary>
            <param name="table"> The table into which the data will be inserted. </param>
            <param name="columns"> The names of the columns into which the data will be inserted. </param>
            <param name="columnTypes"> A list of store types for the columns into which data will be inserted. </param>
            <param name="values"> The values to insert, one value for each column in 'columns'. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.InsertData(System.String,System.String,System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> to insert multiple rows of seed data values for a single column.
            </summary>
            <param name="table"> The table into which the data will be inserted. </param>
            <param name="column"> The name of the column into which the data will be inserted. </param>
            <param name="values"> The values to insert, one value for each row. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.InsertData(System.String,System.String,System.String,System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> to insert multiple rows of seed data values for a single column.
            </summary>
            <param name="table"> The table into which the data will be inserted. </param>
            <param name="column"> The name of the column into which the data will be inserted. </param>
            <param name="columnType"> The store type for the column into which data will be inserted. </param>
            <param name="values"> The values to insert, one value for each row. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.InsertData(System.String,System.String[],System.Object[0:,0:],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> to insert multiple rows of seed data values for multiple columns.
            </summary>
            <param name="table"> The table into which the data will be inserted. </param>
            <param name="columns"> The names of the columns into which the data will be inserted. </param>
            <param name="values">
                The values to insert where each element of the outer array represents a row, and each inner array contains values for each of the
                columns in 'columns'.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.InsertData(System.String,System.String[],System.String[],System.Object[0:,0:],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> to insert multiple rows of seed data values for multiple columns.
            </summary>
            <param name="table"> The table into which the data will be inserted. </param>
            <param name="columns"> The names of the columns into which the data will be inserted. </param>
            <param name="columnTypes"> A list of store types for the columns into which data will be inserted. </param>
            <param name="values">
                The values to insert where each element of the outer array represents a row, and each inner array contains values for each of the
                columns in 'columns'.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DeleteData(System.String,System.String,System.Object,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation" /> to delete a single row of seed data.
            </summary>
            <param name="table"> The table from which the data will be deleted. </param>
            <param name="keyColumn"> The name of the key column used to select the row to delete. </param>
            <param name="keyValue"> The key value of the row to delete. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DeleteData(System.String,System.String,System.String,System.Object,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation" /> to delete a single row of seed data.
            </summary>
            <param name="table"> The table from which the data will be deleted. </param>
            <param name="keyColumn"> The name of the key column used to select the row to delete. </param>
            <param name="keyColumnType">
                The store type for the column that will be used to identify the rows that should be deleted.
             </param>
            <param name="keyValue"> The key value of the row to delete. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DeleteData(System.String,System.String[],System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation" /> to delete a single row of seed data from
                a table with a composite (multi-column) key.
            </summary>
            <param name="table"> The table from which the data will be deleted. </param>
            <param name="keyColumns"> The names of the key columns used to select the row to delete. </param>
            <param name="keyValues"> The key values of the row to delete, one value for each column in 'keyColumns'. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DeleteData(System.String,System.String[],System.String[],System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation" /> to delete a single row of seed data from
                a table with a composite (multi-column) key.
            </summary>
            <param name="table"> The table from which the data will be deleted. </param>
            <param name="keyColumns"> The names of the key columns used to select the row to delete. </param>
            <param name="keyColumnTypes">
                The store types for the columns that will be used to identify the rows that should be deleted.
             </param>
            <param name="keyValues"> The key values of the row to delete, one value for each column in 'keyColumns'. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DeleteData(System.String,System.String,System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation" /> to delete multiple rows of seed data.
            </summary>
            <param name="table"> The table from which the data will be deleted. </param>
            <param name="keyColumn"> The name of the key column used to select the row to delete. </param>
            <param name="keyValues"> The key values of the rows to delete, one value per row. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DeleteData(System.String,System.String,System.String,System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation" /> to delete multiple rows of seed data.
            </summary>
            <param name="table"> The table from which the data will be deleted. </param>
            <param name="keyColumn"> The name of the key column used to select the row to delete. </param>
            <param name="keyColumnType">
                The store type for the column that will be used to identify the rows that should be deleted.
             </param>
            <param name="keyValues"> The key values of the rows to delete, one value per row. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DeleteData(System.String,System.String[],System.Object[0:,0:],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation" /> to delete multiple rows of seed data from
                a table with a composite (multi-column) key.
            </summary>
            <param name="table"> The table from which the data will be deleted. </param>
            <param name="keyColumns"> The names of the key columns used to select the rows to delete. </param>
            <param name="keyValues">
                The key values of the rows to delete, where each element of the outer array represents a row, and each inner array contains values for
                each of the key columns in 'keyColumns'.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.DeleteData(System.String,System.String[],System.String[],System.Object[0:,0:],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation" /> to delete multiple rows of seed data from
                a table with a composite (multi-column) key.
            </summary>
            <param name="table"> The table from which the data will be deleted. </param>
            <param name="keyColumns"> The names of the key columns used to select the rows to delete. </param>
            <param name="keyColumnTypes">
                The store types for the columns that will be used to identify the rows that should be deleted.
             </param>
            <param name="keyValues">
                The key values of the rows to delete, where each element of the outer array represents a row, and each inner array contains values for
                each of the key columns in 'keyColumns'.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String,System.Object,System.String,System.Object,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update a single row of seed data.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumn"> The name of the key column used to select the row to update. </param>
            <param name="keyValue"> The key value of the row to update. </param>
            <param name="column"> The column to update. </param>
            <param name="value"> The new value for the column in the selected row. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String,System.Object,System.String[],System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update a single row of seed data.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumn"> The name of the key column used to select the row to update. </param>
            <param name="keyValue"> The key value of the row to update. </param>
            <param name="columns"> The columns to update. </param>
            <param name="values"> The new values, one for each column in 'columns', for the selected row. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String[],System.Object[],System.String,System.Object,System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update a single row of seed data for a table with
                a composite (multi-column) key.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumns"> The names of the key columns used to select the row to update. </param>
            <param name="keyValues"> The key values of the row to update, one value for each column in 'keyColumns'. </param>
            <param name="column"> The column to update. </param>
            <param name="value"> The new value for the column in the selected row. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String[],System.Object[],System.String[],System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update a single row of seed data for a table with
                a composite (multi-column) key.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumns"> The names of the key columns used to select the row to update. </param>
            <param name="keyValues"> The key values of the row to update, one value for each column in 'keyColumns'. </param>
            <param name="columns"> The columns to update. </param>
            <param name="values"> The new values, one for each column in 'columns', for the selected row. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String[],System.String[],System.Object[],System.String[],System.String[],System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update a single row of seed data for a table with
                a composite (multi-column) key.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumns"> The names of the key columns used to select the row to update. </param>
            <param name="keyColumnTypes">
                A list of store types for the columns that will be used to identify the rows that should be updated.
            </param>
            <param name="keyValues"> The key values of the row to update, one value for each column in 'keyColumns'. </param>
            <param name="columns"> The columns to update. </param>
            <param name="columnTypes"> A list of store types for the columns in which data will be updated. </param>
            <param name="values"> The new values, one for each column in 'columns', for the selected row. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String,System.Object[],System.String,System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update multiple rows of seed data.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumn"> The name of the key column used to select the row to update. </param>
            <param name="keyValues"> The key values of the rows to update, one value per row. </param>
            <param name="column"> The column to update. </param>
            <param name="values"> The new values for the column, one for each row specified in 'keyValues'. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String,System.Object[],System.String[],System.Object[0:,0:],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update multiple rows of seed data.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumn"> The name of the key column used to select the row to update. </param>
            <param name="keyValues"> The key values of the rows to update, one value per row. </param>
            <param name="columns"> The columns to update. </param>
            <param name="values">
                The values for each update, where each element of the outer array represents a row specified in
                'keyValues', and each inner array contains values for each of the columns in 'columns'.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String[],System.Object[0:,0:],System.String,System.Object[],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update multiple rows of seed data for a table with
                a composite (multi-column) key.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumns"> The names of the key columns used to select the rows to update. </param>
            <param name="keyValues">
                The key values of the rows to update, where each element of the outer array represents a row, and each inner array contains values for
                each of the key columns in 'keyColumns'.
            </param>
            <param name="column"> The column to update. </param>
            <param name="values"> The new values for the column, one for each row specified in 'keyValues'. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String[],System.Object[0:,0:],System.String[],System.Object[0:,0:],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update multiple rows of seed data for a table with
                a composite (multi-column) key.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumns"> The names of the key columns used to select the rows to update. </param>
            <param name="keyValues">
                The key values of the rows to update, where each element of the outer array represents a row, and each inner array contains values for
                each of the key columns in 'keyColumns'.
            </param>
            <param name="columns"> The columns to update. </param>
            <param name="values">
                The values for each update, where each element of the outer array represents a row specified in
                'keyValues', and each inner array contains values for each of the columns in 'columns'.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.UpdateData(System.String,System.String[],System.String[],System.Object[0:,0:],System.String[],System.String[],System.Object[0:,0:],System.String)">
            <summary>
                Builds an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> to update multiple rows of seed data for a table with
                a composite (multi-column) key.
            </summary>
            <param name="table"> The table containing the data to be updated. </param>
            <param name="keyColumns"> The names of the key columns used to select the rows to update. </param>
            <param name="keyColumnTypes">
                A list of store types for the columns that will be used to identify the rows that should be updated.
            </param>
            <param name="keyValues">
                The key values of the rows to update, where each element of the outer array represents a row, and each inner array contains values for
                each of the key columns in 'keyColumns'.
            </param>
            <param name="columns"> The columns to update. </param>
            <param name="columnTypes"> A list of store types for the columns in which data will be updated. </param>
            <param name="values">
                The values for each update, where each element of the outer array represents a row specified in
                'keyValues', and each inner array contains values for each of the columns in 'columns'.
            </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <returns> A builder to allow annotations to be added to the operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand">
            <summary>
                Represents a command ready to be sent to the database to migrate it.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},System.Boolean)">
            <summary>
                Creates a new instance of the command.
            </summary>
            <param name="relationalCommand"> The underlying <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" /> that will be used to execute the command. </param>
            <param name="context"> The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> or null if not known. </param>
            <param name="logger"> The command logger. </param>
            <param name="transactionSuppressed"> Indicates whether or not transactions should be suppressed while executing the command. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.TransactionSuppressed">
            <summary>
                Indicates whether or not transactions should be suppressed while executing the command.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.CommandText">
            <summary>
                The SQL command text that will be executed against the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.CommandLogger">
            <summary>
                The associated command logger.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                Executes the command and returns the number of rows affected.
            </summary>
            <param name="connection"> The connection to execute against. </param>
            <param name="parameterValues"> The values for the parameters, or <see langword="null" /> if the command has no parameters. </param>
            <returns> The number of rows affected. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Threading.CancellationToken)">
            <summary>
                Executes the command and returns the number of rows affected.
            </summary>
            <param name="connection"> The connection to execute against. </param>
            <param name="parameterValues"> The values for the parameters, or <see langword="null" /> if the command has no parameters. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A task that represents the asynchronous operation. The task result contains the number of rows affected.  </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder">
            <summary>
                A builder for creating a list of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand" />s that can then be
                executed to migrate a database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.#ctor(Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies)">
            <summary>
                Creates a new instance of the builder.
            </summary>
            <param name="dependencies"> Dependencies needed for SQL generations. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.GetCommandList">
            <summary>
                Gets the list of built commands.
            </summary>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand" />s that have been built. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.EndCommand(System.Boolean)">
            <summary>
                Ends the building of the current command and adds it to the list of built commands.
                The next call to one of the builder methods will start building a new command.
            </summary>
            <param name="suppressTransaction">
                Indicates whether or not transactions should be suppressed while executing the built command.
            </param>
            <returns> This builder so that additional calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.Append(System.String)">
            <summary>
                Appends the given string to the command being built.
            </summary>
            <param name="o"> The string to append. </param>
            <returns> This builder so that additional calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.AppendLine">
            <summary>
                Starts a new line on the command being built.
            </summary>
            <returns> This builder so that additional calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.AppendLine(System.String)">
            <summary>
                Appends the given string to the command being built, and then starts a new line.
            </summary>
            <param name="value"> The string to append. </param>
            <returns> This builder so that additional calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.AppendLines(System.String)">
            <summary>
                Appends the given object to the command being built as multiple lines of text. That is,
                each line in the passed string is added as a line to the command being built.
                This results in the lines having the correct indentation.
            </summary>
            <param name="value"> The string to append. </param>
            <returns> This builder so that additional calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.Indent">
            <summary>
                Starts a new indentation block, so all 'Append...' calls until the
                block is disposed will be indented one level more than the current level.
            </summary>
            <returns> The object to dispose to indicate that the indentation should go back up a level. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.IncrementIndent">
            <summary>
                Increases the current indentation by one level.
            </summary>
            <returns> This builder so that additional calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder.DecrementIndent">
            <summary>
                Decreases the current indentation by one level.
            </summary>
            <returns> This builder so that additional calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider">
            <summary>
                <para>
                    A base class inherited by database providers that gives access to annotations used by EF Core Migrations
                    when generating removal operations for various elements of the <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IRelationalModel" />.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.#ctor(Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProviderDependencies)">
            <summary>
                Initializes a new instance of this class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IRelationalModel)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.ITable)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IColumn)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IView)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IViewColumn)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.ITableIndex)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.ISequence)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider.ForRemove(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProviderDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
                    This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProviderDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsAnnotationProvider" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsAssemblyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsAssemblyExtensions.GetMigrationId(Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly,System.String)">
            <summary>
                <para>
                    Gets a migration identifier in the assembly with the given a full migration name or
                    just its identifier.
                </para>
                <para>
                    An exception is thrown if the migration was not found--use
                    <see cref="M:Microsoft.EntityFrameworkCore.Migrations.IMigrationsAssembly.FindMigrationId(System.String)" /> if the migration may not exist.
                </para>
            </summary>
            <param name="assembly"> The assembly. </param>
            <param name="nameOrId"> The name or identifier to lookup. </param>
            <returns> The identifier of the migration. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions">
            <summary>
                The options to use when generating SQL for migrations.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions.Default">
            <summary>
                Generate SQL to execute at runtime.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions.Script">
            <summary>
                Generate SQL for a script. Automatically added by <see cref="M:Microsoft.EntityFrameworkCore.Migrations.IMigrator.GenerateScript(System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)" />.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions.Idempotent">
            <summary>
                Generate SQL for an idempotent script.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions.NoTransactions">
            <summary>
                Generate SQL for a script without transaction statements.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator">
            <summary>
                <para>
                    Generates the SQL in <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommand" /> objects that can
                    then be executed or scripted from a list of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />s.
                </para>
                <para>
                    This class is typically inherited by database providers to customize the SQL generation.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator" /> instance using the given dependencies.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Dependencies">
            <summary>
                Parameter object containing dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.SqlGenerator">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.VersionComparer">
            <summary>
                Gets a comparer that can be used to compare two product versions.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Options">
            <summary>
                Gets or sets the options to use when generating commands.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation},Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)">
            <summary>
                Generates commands from a list of operations.
            </summary>
            <param name="operations"> The operations. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="options"> The options to use when generating commands. </param>
            <returns> The list of commands to be executed or scripted. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> by making calls on the given
                    <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    This method uses a double-dispatch mechanism to call one of the 'Generate' methods that are
                    specific to a certain subtype of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />. Typically database providers
                    will override these specific methods rather than this method. However, providers can override
                    this methods to handle provider-specific operations.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Can be overridden by database providers to build commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation" />
                    by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    Note that the default implementation of this method throws <see cref="T:System.NotImplementedException" />. Providers
                    must override if they are to support this kind of operation.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Can be overridden by database providers to build commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation" />
                    by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    Note that there is no default implementation of this method. Providers must override if they are to
                    support this kind of operation.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Can be overridden by database providers to build commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation" />
                    by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    Note that the default implementation of this method throws <see cref="T:System.NotImplementedException" />. Providers
                    must override if they are to support this kind of operation.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Can be overridden by database providers to build commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation" />
                    by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    Note that the default implementation of this method does nothing because there is no common metadata
                    relating to this operation. Providers only need to override this method if they have some provider-specific
                    annotations that must be handled.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Can be overridden by database providers to build commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation" />
                    by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    Note that the default implementation of this method throws <see cref="T:System.NotImplementedException" />. Providers
                    must override if they are to support this kind of operation.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Can be overridden by database providers to build commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation" />
                    by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    Note that the default implementation of this method throws <see cref="T:System.NotImplementedException" />. Providers
                    must override if they are to support this kind of operation.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                <para>
                    Can be overridden by database providers to build commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation" />
                    by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    Note that the default implementation of this method throws <see cref="T:System.NotImplementedException" />. Providers
                    must override if they are to support this kind of operation.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Can be overridden by database providers to build commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation" />
                    by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    Note that the default implementation of this method throws <see cref="T:System.NotImplementedException" />. Providers
                    must override if they are to support this kind of operation.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                <para>
                    Can be overridden by database providers to build commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation" />
                    by making calls on the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
                </para>
                <para>
                    Note that the default implementation of this method throws <see cref="T:System.NotImplementedException" />. Providers
                    must override if they are to support this kind of operation.
                </para>
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
            <param name="terminate"> Indicates whether or not to terminate the command after generating SQL for the operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.GenerateModificationCommands(Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Generates the commands that correspond to the given operation.
            </summary>
            <param name="operation"> The data operation to generate commands for. </param>
            <param name="model"> The model. </param>
            <returns> The commands that correspond to the given operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.GenerateModificationCommands(Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Generates the commands that correspond to the given operation.
            </summary>
            <param name="operation"> The data operation to generate commands for. </param>
            <param name="model"> The model. </param>
            <returns> The commands that correspond to the given operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.Generate(Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Builds commands for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation" /> by making calls on the given
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder" />, and then terminates the final command.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to build the commands. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.GenerateModificationCommands(Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Generates the commands that correspond to the given operation.
            </summary>
            <param name="operation"> The data operation to generate commands for. </param>
            <param name="model"> The model. </param>
            <returns> The commands that correspond to the given operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.SequenceOptions(Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment configuring a sequence in a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.SequenceOptions(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment configuring a sequence in a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.SequenceOptions(System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment configuring a sequence with the given options.
            </summary>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
            <param name="name"> The sequence name. </param>
            <param name="operation"> The sequence options. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.CreateTableColumns(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the column definitions in an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.ColumnDefinition(Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a column definition in an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.ColumnDefinition(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a column definition for the given column metadata.
            </summary>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="table"> The table that contains the column. </param>
            <param name="name"> The column name. </param>
            <param name="operation"> The column metadata. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.ComputedColumnDefinition(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a computed column definition for the given column metadata.
            </summary>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="table"> The table that contains the column. </param>
            <param name="name"> The column name. </param>
            <param name="operation"> The column metadata. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.GetColumnType(System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Gets the store/database type of a column given the provided metadata.
            </summary>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="tableName"> The table that contains the column. </param>
            <param name="name"> The column name. </param>
            <param name="operation"> The column metadata. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <returns> The database/store type for the column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.DefaultValue(System.Object,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the default constraint of a column.
            </summary>
            <param name="defaultValue"> The default value for the column. </param>
            <param name="defaultValueSql"> The SQL expression to use for the column's default constraint. </param>
            <param name="columnType"> Store/database type of the column. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.CreateTableConstraints(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the constraints of a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.CreateTableForeignKeys(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the foreign key constraints of a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.ForeignKeyConstraint(Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a foreign key constraint of an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.CreateTablePrimaryKeyConstraint(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the primary key constraint of a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.PrimaryKeyConstraint(Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a primary key constraint of an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.CreateTableUniqueConstraints(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the unique constraints of a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.UniqueConstraint(Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a unique constraint of an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.CreateTableCheckConstraints(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the check constraints of a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.CheckConstraint(Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for a check constraint of an <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.IndexTraits(Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for traits of an index from a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" />,
                <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" />, or <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.IndexOptions(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation,Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for extras (filter, included columns, options) of an index from a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.ForeignKeyAction(Microsoft.EntityFrameworkCore.Migrations.ReferentialAction,Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder)">
            <summary>
                Generates a SQL fragment for the given referential action.
            </summary>
            <param name="referentialAction"> The referential action. </param>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.FindEntityTypes(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String,System.String)">
            <summary>
                Finds all <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IEntityType" />s that are mapped to the given table.
            </summary>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="tableName"> The table name. </param>
            <returns> The list of types, which may be empty if no types are mapped to the given table. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.FindProperty(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String,System.String,System.String)">
            <summary>
                <para>
                    Finds some <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> mapped to the given column.
                </para>
                <para>
                    If multiple properties map to the same column, then the property returned is one chosen
                    arbitrarily. The model validator ensures that all properties mapped to a given column
                    have consistent configuration.
                </para>
            </summary>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <param name="schema"> The schema that contains the table, or <see langword="null" /> to use the default schema. </param>
            <param name="tableName"> The name of the table that contains the column. </param>
            <param name="columnName"> The column name. </param>
            <returns> The property found, or <see langword="null" /> if no property maps to the given column. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.EndStatement(Microsoft.EntityFrameworkCore.Migrations.MigrationCommandListBuilder,System.Boolean)">
            <summary>
                Generates a SQL fragment to terminate the SQL command.
            </summary>
            <param name="builder"> The command builder to use to add the SQL fragment. </param>
            <param name="suppressTransaction">
                Indicates whether or not transactions should be suppressed while executing the built command.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.ColumnList(System.String[])">
            <summary>
                Concatenates the given column names into a <see cref="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.DelimitIdentifier(System.String)" />
                separated list.
            </summary>
            <param name="columns"> The column names. </param>
            <returns> The column list. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.IsOldColumnSupported(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Checks whether or not <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" /> supports the passing in the
                old column, which was only added in EF Core 1.1.
            </summary>
            <param name="model"> The target model which may be <see langword="null" /> if the operations exist without a model. </param>
            <returns>
                <see langword="true" /> If the model was generated by EF Core 1.1 or later; <see langword="false" /> if the model is
                <see langword="null" />, has
                no version specified, or was generated by an EF Core version prior to 1.1.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.HasLegacyRenameOperations(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Checks whether or not <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation" /> and <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation" /> use
                the legacy behavior of setting the new name and schema to null when unchanged.
            </summary>
            <param name="model"> The target model. </param>
            <returns> <see langword="true" /> if the legacy behavior is used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator.TryGetVersion(Microsoft.EntityFrameworkCore.Metadata.IModel,System.String@)">
            <summary>
                Gets the product version used to generate the current migration. Providers can use this to preserve
                compatibility with migrations generated using previous versions.
            </summary>
            <param name="model"> The target model. </param>
            <param name="version"> The version. </param>
            <returns> <see langword="true" /> if the version could be retrieved. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext,Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerator" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.CommandBuilderFactory">
            <summary>
                The command builder factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.UpdateSqlGenerator">
            <summary>
                High level SQL generator.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.SqlGenerationHelper">
            <summary>
                Helpers for SQL generation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.TypeMappingSource">
            <summary>
                The type mapper.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.CurrentContext">
            <summary>
                Contains the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently in use.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.LoggingOptions">
            <summary>
                The logging options.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.Logger">
            <summary>
                The database command logger.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.MigrationsLogger">
            <summary>
                The database command logger.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="commandBuilderFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="updateSqlGenerator"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlGenerationHelper"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="currentContext"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="loggingOptions"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="logger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Migrations})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="migrationsLogger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for creating a new check constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation.Name">
            <summary>
                The name of the check constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation.Table">
            <summary>
                The table of the check constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation.Schema">
            <summary>
                The table schema that contains the check constraint, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation.Sql">
            <summary>
                The logical sql expression used in a CHECK constraint and returns TRUE or FALSE.
                SQL used with CHECK constraints cannot reference another table
                but can reference other columns in the same table for the same row.
                The expression cannot reference an alias data type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation.CreateFrom(Microsoft.EntityFrameworkCore.Metadata.ICheckConstraint)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation" /> from the specified check constraint.
            </summary>
            <param name="checkConstraint"> The check constraint. </param>
            <returns> The operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to add a new column.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to add a new foreign key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.Name">
            <summary>
                The name of the foreign key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.Table">
            <summary>
                The table to which the foreign key should be added.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.Columns">
            <summary>
                The ordered-list of column names for the columns that make up the foreign key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.PrincipalSchema">
            <summary>
                The schema that contains the table to which this foreign key is constrained,
                or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.PrincipalTable">
            <summary>
                The table to which the foreign key is constrained.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.PrincipalColumns">
            <summary>
                The ordered-list of column names for the columns to which the columns that make up this foreign key are constrained.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.OnUpdate">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction" /> to use for updates.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.OnDelete">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction" /> to use for deletes.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation.CreateFrom(Microsoft.EntityFrameworkCore.Metadata.IForeignKeyConstraint)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation" /> from the specified foreign key.
            </summary>
            <param name="foreignKey"> The foreign key. </param>
            <returns> The operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to add a new foreign key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation.Table">
            <summary>
                The table to which the key should be added.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation.Name">
            <summary>
                The name of the foreign key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation.Columns">
            <summary>
                The ordered-list of column names for the columns that make up the primary key.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation.CreateFrom(Microsoft.EntityFrameworkCore.Metadata.IPrimaryKeyConstraint)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" /> from the specified primary key.
            </summary>
            <param name="primaryKey"> The primary key. </param>
            <returns> The operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to add a new unique constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation.Table">
            <summary>
                The table to which the constraint should be added.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation.Name">
            <summary>
                The name of the constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation.Columns">
            <summary>
                The ordered-list of column names for the columns that make up the constraint.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation.CreateFrom(Microsoft.EntityFrameworkCore.Metadata.IUniqueConstraint)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" /> from the specified unique constraint.
            </summary>
            <param name="uniqueConstraint"> The unique constraint. </param>
            <returns> The operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to alter an existing column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation.OldColumn">
            <summary>
                An operation representing the column as it was before being altered.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation.Microsoft#EntityFrameworkCore#Migrations#Operations#IAlterMigrationOperation#OldAnnotations">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to alter an existing database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation.OldDatabase">
            <summary>
                An operation representing the database as it was before being altered.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation.Microsoft#EntityFrameworkCore#Migrations#Operations#IAlterMigrationOperation#OldAnnotations">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to alter an existing sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation.Schema">
            <summary>
                The schema that contains the sequence, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation.Name">
            <summary>
                The name of the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation.OldSequence">
            <summary>
                An operation representing the sequence as it was before being altered.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation.Microsoft#EntityFrameworkCore#Migrations#Operations#IAlterMigrationOperation#OldAnnotations">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to alter an existing table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation.OldTable">
            <summary>
                An operation representing the table as it was before being altered.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation.Microsoft#EntityFrameworkCore#Migrations#Operations#IAlterMigrationOperation#OldAnnotations">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.AlterOperationBuilder`1">
            <summary>
                A builder for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation" /> operations.
            </summary>
            <typeparam name="TOperation"> The operation type to build. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.AlterOperationBuilder`1.#ctor(`0)">
            <summary>
                Constructs a builder for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />.
            </summary>
            <param name="operation"> The operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.AlterOperationBuilder`1.Annotation(System.String,System.Object)">
            <summary>
                Annotates the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> with the given name/value pair.
            </summary>
            <param name="name"> The annotation name. </param>
            <param name="value"> The annotation value. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.AlterOperationBuilder`1.OldAnnotation(System.String,System.Object)">
            <summary>
                Annotates the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> with the given name/value pair as
                an annotation that was present before the alteration.
            </summary>
            <param name="name"> The annotation name. </param>
            <param name="value"> The annotation value. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder">
            <summary>
                A builder for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation" /> operations.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder.#ctor(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation)">
            <summary>
                Constructs a builder for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
            </summary>
            <param name="createTableOperation"> The operation. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder.Column``1(System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Boolean,System.String,System.Boolean,System.Object,System.String,System.String,System.Nullable{System.Boolean},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean})">
            <summary>
                <para>
                    Adds a <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" /> to the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />.
                </para>
                <para>
                    Note that for nullable parameters a <see langword="null" /> value means not-specified.
                </para>
            </summary>
            <typeparam name="T"> The CLR type of the column. </typeparam>
            <param name="type"> The database type of the column. </param>
            <param name="unicode"> Indicates whether or not the column will store Unicode data. </param>
            <param name="maxLength"> The maximum length for data in the column. </param>
            <param name="rowVersion"> Indicates whether or not the column will act as a rowversion/timestamp concurrency token. </param>
            <param name="name"> The column name. </param>
            <param name="nullable"> Indicates whether or not the column can store <see langword="null" /> values. </param>
            <param name="defaultValue"> The default value for the column. </param>
            <param name="defaultValueSql"> The SQL expression to use for the column's default constraint. </param>
            <param name="computedColumnSql"> The SQL expression to use to compute the column value. </param>
            <param name="fixedLength"> Indicates whether or not the column is constrained to fixed-length data. </param>
            <param name="comment"> A comment to be applied to the column. </param>
            <param name="collation"> A collation to be applied to the column. </param>
            <param name="precision"> The maximum number of digits for data in the column. </param>
            <param name="scale"> The maximum number of decimal places for data in the column. </param>
            <param name="stored"> Whether the value of the computed column is stored in the database or not. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.ColumnsBuilder.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1">
            <summary>
                A builder for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" /> operations.
            </summary>
            <typeparam name="TColumns"> Type of a typically anonymous type for building columns. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1.#ctor(Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation,System.Collections.Generic.IReadOnlyDictionary{System.Reflection.PropertyInfo,Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation})">
            <summary>
                Constructs a new builder for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" /> and
                with the given map of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" /> operations for columns.
            </summary>
            <param name="operation"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" />. </param>
            <param name="columnMap"> The map of CLR properties to <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" />s. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.String,System.String,Microsoft.EntityFrameworkCore.Migrations.ReferentialAction,Microsoft.EntityFrameworkCore.Migrations.ReferentialAction)">
            <summary>
                Configures a single-column foreign key on the table.
            </summary>
            <param name="name"> The foreign key constraint name. </param>
            <param name="column"> The column used for the foreign key. </param>
            <param name="principalTable"> The table to which the foreign key is constrained. </param>
            <param name="principalColumn"> The column to which the foreign key column is constrained. </param>
            <param name="principalSchema"> The schema that contains the table to which the foreign key is constrained. </param>
            <param name="onUpdate"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction" /> to use for updates. </param>
            <param name="onDelete"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction" /> to use for deletes. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.String[],System.String,Microsoft.EntityFrameworkCore.Migrations.ReferentialAction,Microsoft.EntityFrameworkCore.Migrations.ReferentialAction)">
            <summary>
                Configures a multiple-column (composite) foreign key on the table.
            </summary>
            <param name="name"> The foreign key constraint name. </param>
            <param name="columns"> The columns used for the foreign key. </param>
            <param name="principalTable"> The table to which the foreign key is constrained. </param>
            <param name="principalColumns"> The columns to which the foreign key column is constrained. </param>
            <param name="principalSchema"> The schema that contains the table to which the foreign key is constrained. </param>
            <param name="onUpdate"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction" /> to use for updates. </param>
            <param name="onDelete"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction" /> to use for deletes. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1.PrimaryKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Configures a primary key on the table.
            </summary>
            <param name="name"> The primary key constraint name. </param>
            <param name="columns"> The columns that make up the primary key. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1.UniqueConstraint(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
            <summary>
                Configures a unique constraint on the table.
            </summary>
            <param name="name"> The constraint name. </param>
            <param name="columns"> The columns that make up the constraint. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1.CheckConstraint(System.String,System.String)">
            <summary>
                Configures a check constraint on the table.
            </summary>
            <param name="name"> The constraint name. </param>
            <param name="sql"> The sql expression used in the CHECK constraint. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.CreateTableBuilder`1.Annotation(System.String,System.Object)">
            <summary>
                Annotates the operation with the given name/value pair.
            </summary>
            <param name="name"> The annotation name. </param>
            <param name="value"> The annotation value. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1">
            <summary>
                A builder for <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />s.
            </summary>
            <typeparam name="TOperation"> The type of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> to build for. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1.#ctor(`0)">
            <summary>
                Creates a new builder instance for the given <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />.
            </summary>
            <param name="operation"> The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1.Operation">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1.Annotation(System.String,System.Object)">
            <summary>
                Annotates the operation with the given name/value pair.
            </summary>
            <param name="name"> The annotation name. </param>
            <param name="value"> The annotation value. </param>
            <returns> The same builder so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1.ToString">
            <summary>
                Returns a string that represents the current object.
            </summary>
            <returns> A string that represents the current object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.Builders.OperationBuilder`1.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for operations on columns.
                See also <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" /> and <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterColumnOperation" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.Name">
            <summary>
                The name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.Table">
            <summary>
                The table which contains the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.ClrType">
            <summary>
                The CLR <see cref="T:System.Type" /> of the property or properties mapped to the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.ColumnType">
            <summary>
                The store type of the column--for example, 'nvarchar(max)'.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.IsUnicode">
            <summary>
                Indicates whether or not the column can contain Unicode data, or <see langword="null" /> if this is not specified or does
                not apply to this column type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.IsFixedLength">
            <summary>
                Indicates whether or not the column is constrained to fixed-length data.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.MaxLength">
            <summary>
                The maximum amount of data that the column can store, or <see langword="null" /> if this is not specified or does
                not apply to this column type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.Precision">
            <summary>
                The maximum number of digits that the column can store, or <see langword="null" />
                if this is not specified or does not apply to this column type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.Scale">
            <summary>
                The maximum number of decimal places that the column can store, or <see langword="null" />
                if this is not specified or does not apply to this column type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.IsRowVersion">
            <summary>
                Indicates whether or not this column acts as an automatic concurrency token in the same vein
                as 'rowversion'/'timestamp' columns on SQL Server.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.IsNullable">
            <summary>
                Indicates whether or not th column can store <see langword="null" /> values.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.DefaultValue">
            <summary>
                The default value for rows inserted without an explicit value for this column, or
                <see langword="null" /> if there is no default.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.DefaultValueSql">
            <summary>
                The SQL expression to use as the default constraint when creating the column,
                or <see langword="null" /> if there is no default constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.ComputedColumnSql">
            <summary>
                The SQL expression to use to compute the column value, <see langword="null" /> if the column
                is not computed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.IsStored">
            <summary>
                Whether the value of the computed column this property is mapped to is stored in the database, or calculated when
                it is read.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.Comment">
            <summary>
                Comment for this column
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ColumnOperation.Collation">
            <summary>
                The collation for this column, or <see langword="null" /> if one hasn't been explicitly configured.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for creating a new index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation.IsUnique">
            <summary>
                Indicates whether or not the index should enforce uniqueness.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation.Name">
            <summary>
                The name of the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation.Schema">
            <summary>
                The schema that contains the index, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation.Table">
            <summary>
                The table that contains the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation.Columns">
            <summary>
                The ordered list of column names for the column that make up the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation.Filter">
            <summary>
                An expression to use as the index filter.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation.CreateFrom(Microsoft.EntityFrameworkCore.Metadata.ITableIndex)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateIndexOperation" /> from the specified index.
            </summary>
            <param name="index"> The index. </param>
            <returns> The operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for creating a new sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation.Schema">
            <summary>
                The schema that contains the sequence, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation.Name">
            <summary>
                The name of the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation.ClrType">
            <summary>
                The CLR <see cref="T:System.Type" /> of values returned from the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation.StartValue">
            <summary>
                The value at which the sequence will start counting, defaulting to 1.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for creating a new table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation.PrimaryKey">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddPrimaryKeyOperation" /> representing the creation of the primary key for the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation.Columns">
            <summary>
                An ordered list of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddColumnOperation" /> for adding columns to the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation.ForeignKeys">
            <summary>
                A list of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddForeignKeyOperation" /> for creating foreign key constraints in the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation.UniqueConstraints">
            <summary>
                A list of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddUniqueConstraintOperation" /> for creating unique constraints in the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation.CheckConstraints">
            <summary>
                A list of <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AddCheckConstraintOperation" /> for creating check constraints in the table.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DatabaseOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for operations on databases.
                See also <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterDatabaseOperation" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DatabaseOperation.Collation">
            <summary>
                The collation for the database, or <see langword="null" /> to use the default collation of the instance of SQL Server.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for deleting seed data from an existing table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation.Table">
            <summary>
                The table from which data will be deleted.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation.KeyColumns">
            <summary>
                A list of column names that represent the columns that will be used to identify
                the rows that should be deleted.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation.KeyColumnTypes">
            <summary>
                A list of store types for the columns that will be used to identify
                the rows that should be deleted.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation.KeyValues">
            <summary>
                The rows to be deleted, represented as a list of key value arrays where each
                value in the array corresponds to a column in the <see cref="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation.KeyColumns" /> property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.DeleteDataOperation.GenerateModificationCommands(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Generates the commands that correspond to this operation.
            </summary>
            <returns> The commands that correspond to this operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping an existing check constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation.Name">
            <summary>
                The name of the constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropCheckConstraintOperation.Table">
            <summary>
                The table that contains the constraint.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping an existing column.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation.#ctor">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation.Name">
            <summary>
                The name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropColumnOperation.Table">
            <summary>
                The table that contains that column.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping an existing foreign key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation.Name">
            <summary>
                The name of the foreign key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropForeignKeyOperation.Table">
            <summary>
                The table that contains the foreign key constraint.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping an existing index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation.Name">
            <summary>
                The name of the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropIndexOperation.Table">
            <summary>
                The table that contains the index.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping a primary key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation.Name">
            <summary>
                The name of the primary key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropPrimaryKeyOperation.Table">
            <summary>
                The table that contains the primary key.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping a schema.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropSchemaOperation.Name">
            <summary>
                The name of the schema.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping a sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation.Name">
            <summary>
                The name of the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropSequenceOperation.Schema">
            <summary>
                The schema that contains the sequence, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping an existing table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation.#ctor">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation.Name">
            <summary>
                The name of the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropTableOperation.Microsoft#EntityFrameworkCore#Migrations#Operations#ITableMigrationOperation#Table">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for dropping an existing unique constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation.Name">
            <summary>
                The name of the constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.DropUniqueConstraintOperation.Table">
            <summary>
                The table that contains the constraint.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for ensuring that a schema exists. That is, the
                schema will be created if and only if it does not already exist.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.EnsureSchemaOperation.Name">
            <summary>
                The name of the schema.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation">
            <summary>
                <para>
                    An interface for any <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> that alters some existing database object.
                </para>
                <para>
                    All such operations contain an 'Old...' property that provides access to the configuration to the
                    database object as it was before being altered. This interface provides a common way to access
                    annotations on that 'old' database object.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.IAlterMigrationOperation.OldAnnotations">
            <summary>
                Annotations on the database object as they were before being altered.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for inserting seed data into a table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation.Table">
            <summary>
                The name of the table into which data will be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation.Columns">
            <summary>
                A list of column names that represent the columns into which data will be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation.ColumnTypes">
            <summary>
                A list of store types for the columns into which data will be inserted.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation.Values">
            <summary>
                The data to be inserted, represented as a list of value arrays where each
                value in the array corresponds to a column in the <see cref="P:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation.Columns" /> property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.InsertDataOperation.GenerateModificationCommands(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Generates the commands that correspond to this operation.
            </summary>
            <returns> The commands that correspond to this operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation">
            <summary>
                Represents a migration operation on a table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.ITableMigrationOperation.Table">
            <summary>
                The table that contains the target of this operation.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation">
            <summary>
                Base class for all Migrations operations that can be performed against a database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation.IsDestructiveChange">
            <summary>
                Indicates whether or not the operation might result in loss of data in the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for renaming an existing column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation.Name">
            <summary>
                The old name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation.Table">
            <summary>
                The name of the table that contains the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameColumnOperation.NewName">
            <summary>
                The new name for the column.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for renaming an existing index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation.Name">
            <summary>
                The old name of the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation.NewName">
            <summary>
                The new name for the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameIndexOperation.Table">
            <summary>
                The name of the table that contains the index.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for renaming an existing sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation.Name">
            <summary>
                The old name of the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation.Schema">
            <summary>
                The schema that contains the sequence, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation.NewName">
            <summary>
                The new sequence name or <see langword="null" /> if only the schema has changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameSequenceOperation.NewSchema">
            <summary>
                The new schema name or <see langword="null" /> if only the name has changed.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for renaming an existing table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation.Name">
            <summary>
                The old name of the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation.NewSchema">
            <summary>
                The new table name or <see langword="null" /> if only the schema has changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation.NewName">
            <summary>
                The new table name or <see langword="null" /> if only the schema has changed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RenameTableOperation.Microsoft#EntityFrameworkCore#Migrations#Operations#ITableMigrationOperation#Table">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for re-starting an existing sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation.Name">
            <summary>
                The name of the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation.Schema">
            <summary>
                The schema that contains the sequence, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.RestartSequenceOperation.StartValue">
            <summary>
                The value at which the sequence should re-start, defaulting to 1.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for operations on sequences.
                See also <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateSequenceOperation" /> and <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterSequenceOperation" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation.IncrementBy">
            <summary>
                The amount to increment by when generating the next value in the sequence, defaulting to 1.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation.MaxValue">
            <summary>
                The maximum value of the sequence, or <see langword="null" /> if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation.MinValue">
            <summary>
                The minimum value of the sequence, or <see langword="null" /> if not specified.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.SequenceOperation.IsCyclic">
            <summary>
                Indicates whether or not the sequence will re-start when the maximum value is reached.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for raw SQL commands.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation.Sql">
            <summary>
                The SQL string to be executed to perform this operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.SqlOperation.SuppressTransaction">
            <summary>
                Indicates whether or not transactions will be suppressed while executing the SQL.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.TableOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for operations on tables.
                See also <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.CreateTableOperation" /> and <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.AlterTableOperation" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.TableOperation.Name">
            <summary>
                The name of the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.TableOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.TableOperation.Comment">
            <summary>
                Comment for this table
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.TableOperation.Microsoft#EntityFrameworkCore#Migrations#Operations#ITableMigrationOperation#Table">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Migrations.Operations.MigrationOperation" /> for updating seed data in an existing table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.Table">
            <summary>
                The name of the table in which data will be updated.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.Schema">
            <summary>
                The schema that contains the table, or <see langword="null" /> if the default schema should be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.KeyColumns">
            <summary>
                A list of column names that represent the columns that will be used to identify
                the rows that should be updated.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.KeyColumnTypes">
            <summary>
                A list of store types for the columns that will be used to identify
                the rows that should be updated.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.KeyValues">
            <summary>
                The rows to be updated, represented as a list of key value arrays where each
                value in the array corresponds to a column in the <see cref="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.KeyColumns" /> property.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.Columns">
            <summary>
                A list of column names that represent the columns that contain data to be updated.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.ColumnTypes">
            <summary>
                A list of store types for the columns in which data will be updated.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.Values">
            <summary>
                The data to be updated, represented as a list of value arrays where each
                value in the array corresponds to a column in the <see cref="P:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.Columns" /> property.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Migrations.Operations.UpdateDataOperation.GenerateModificationCommands(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Generates the commands that correspond to this operation.
            </summary>
            <returns> The commands that correspond to this operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction">
            <summary>
                <para>
                    The action that a database may take when handling a foreign key constraint as
                    part of an update or delete.
                </para>
                <para>
                    Note that some database engines do not support or correctly honor every action.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction.NoAction">
            <summary>
                Do nothing. That is, just ignore the constraint.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction.Restrict">
            <summary>
                Don't perform the action if it would result in a constraint violation and instead generate an error.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction.Cascade">
            <summary>
                Cascade the action to the constrained rows.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction.SetNull">
            <summary>
                Set null on the constrained rows so that the constraint is not violated after the action completes.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Migrations.ReferentialAction.SetDefault">
            <summary>
                Set a default value on the constrained rows so that the constraint is not violated after the action completes.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.QuerySplittingBehavior">
            <summary>
                Indicates how the related collections in a query should be loaded from database.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.QuerySplittingBehavior.SingleQuery">
            <summary>
                <para>
                    The related collections will be loaded in same database query as parent query.
                </para>
                <para>
                    This behavior generally guarantees result consistency in the face of concurrent updates
                    (but details may vary based on the database and transaction isolation level in use).
                    However, this can cause performance issues when the query loads multiple related collections.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.QuerySplittingBehavior.SplitQuery">
            <summary>
                <para>
                    The related collections will be loaded in separate database queries from the parent query.
                </para>
                <para>
                    This behavior can significantly improve performance when the query loads multiple collections.
                    However, since separate queries are used, this can result in inconsistent results when concurrent updates occur.
                    Serializable or snapshot transactions can be used to mitigate this
                    and achieve consistency with split queries, but that may bring other performance costs and behavioral difference.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression">
            <summary>
                <para>
                    An expression that represents an entity in the projection of <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression" /> class.
            </summary>
            <param name="entityType"> The entity type to shape. </param>
            <param name="innerTable"> The table from which entity columns are being projected out. </param>
            <param name="nullable"> A bool value indicating whether this entity instance can be null. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Collections.Generic.IDictionary{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression" /> class.
            </summary>
            <param name="entityType"> The entity type to shape. </param>
            <param name="propertyExpressionMap"> A dictionary of column expressions corresponding to properties of the entity type. </param>
            <param name="discriminatorExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to generate discriminator for each concrete entity type in hierarchy. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.EntityType">
            <summary>
                The entity type being projected out.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.DiscriminatorExpression">
            <summary>
                A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to generate discriminator for entity type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.NodeType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.Type">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.MakeNullable">
            <summary>
                Makes entity instance in projection nullable.
            </summary>
            <returns> A new entity projection expression which can project nullable entity. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.UpdateEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Updates the entity type being projected out to one of the derived type.
            </summary>
            <param name="derivedType"> A derived entity type which should be projected. </param>
            <returns> A new entity projection expression which has the derived type being projected. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.BindProperty(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Binds a property with this entity projection to get the SQL representation.
            </summary>
            <param name="property"> A property to bind. </param>
            <returns> A column which is a SQL representation of the property. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.AddNavigationBinding(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Query.EntityShaperExpression)">
            <summary>
                Adds a navigation binding for this entity projection when the target entity type of the navigation is owned or weak.
            </summary>
            <param name="navigation"> A navigation to add binding for. </param>
            <param name="entityShaper"> An entity shaper expression for the target type. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.BindNavigation(Microsoft.EntityFrameworkCore.Metadata.INavigation)">
            <summary>
                Binds a navigation with this entity projection to get entity shaper for the target entity type of the navigation which was
                previously added using <see cref="M:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression.AddNavigationBinding(Microsoft.EntityFrameworkCore.Metadata.INavigation,Microsoft.EntityFrameworkCore.Query.EntityShaperExpression)" /> method.
            </summary>
            <param name="navigation"> A navigation to bind. </param>
            <returns> An entity shaper expression for the target entity type of the navigation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ExpressionExtensions">
            <summary>
                <para>
                    Extension methods for <see cref="T:System.Linq.Expressions.Expression" /> types.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ExpressionExtensions.InferTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression[])">
            <summary>
                Infers type mapping from given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />s.
            </summary>
            <param name="expressions"> Expressions to search for to find the type mapping. </param>
            <returns> A relational type mapping inferred from the expressions. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IMemberTranslator">
            <summary>
                <para>
                    A SQL translator for LINQ <see cref="T:System.Linq.Expressions.MemberExpression" /> expression.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                Translates a LINQ <see cref="T:System.Linq.Expressions.MemberExpression" /> to a SQL equivalent.
            </summary>
            <param name="instance"> A SQL representation of <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />. </param>
            <param name="member"> The member info from <see cref="P:System.Linq.Expressions.MemberExpression.Member" />. </param>
            <param name="returnType"> The return type from <see cref="P:MemberExpression.Type" />. </param>
            <param name="logger"> The query logger to use. </param>
            <returns> A SQL translation of the <see cref="T:System.Linq.Expressions.MemberExpression" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IMemberTranslatorPlugin">
            <summary>
                <para>
                    Represents plugin for <see cref="T:Microsoft.EntityFrameworkCore.Query.IMemberTranslator" />.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> and multiple registrations
                    are allowed. This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.IMemberTranslatorPlugin.Translators">
            <summary>
                Gets the member translators.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IMemberTranslatorProvider">
            <summary>
                <para>
                    Provides translations for LINQ <see cref="T:System.Linq.Expressions.MemberExpression" /> expressions.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IMemberTranslatorProvider.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                Translates a LINQ <see cref="T:System.Linq.Expressions.MemberExpression" /> to a SQL equivalent.
            </summary>
            <param name="instance"> A SQL representation of <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />. </param>
            <param name="member"> The member info from <see cref="P:System.Linq.Expressions.MemberExpression.Member" />. </param>
            <param name="returnType"> The return type from <see cref="P:MemberExpression.Type" />. </param>
            <param name="logger"> The query logger to use. </param>
            <returns> A SQL translation of the <see cref="T:System.Linq.Expressions.MemberExpression" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator">
            <summary>
                <para>
                    A SQL translator for LINQ <see cref="T:System.Linq.Expressions.MethodCallExpression" /> expression.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                Translates a LINQ <see cref="T:System.Linq.Expressions.MethodCallExpression" /> to a SQL equivalent.
            </summary>
            <param name="instance"> A SQL representation of <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />. </param>
            <param name="method"> The method info from <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />. </param>
            <param name="arguments"> SQL representations of <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />. </param>
            <param name="logger"> The query logger to use. </param>
            <returns> A SQL translation of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorPlugin">
            <summary>
                <para>
                    Represents plugin for <see cref="T:Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator" />.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> and multiple registrations
                    are allowed. This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorPlugin.Translators">
            <summary>
                Gets the method call translators.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorProvider">
            <summary>
                <para>
                    Provides translations for LINQ <see cref="T:System.Linq.Expressions.MethodCallExpression" /> expressions.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorProvider.Translate(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                Translates a LINQ <see cref="T:System.Linq.Expressions.MethodCallExpression" /> to a SQL equivalent.
            </summary>
            <param name="model"> A model to use for translation. </param>
            <param name="instance"> A SQL representation of <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />. </param>
            <param name="method"> The method info from <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />. </param>
            <param name="arguments"> SQL representations of <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />. </param>
            <param name="logger"> The query logger to use. </param>
            <returns> A SQL translation of the <see cref="T:System.Linq.Expressions.MethodCallExpression" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.RecordsAffected">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.Item(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.Item(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.Depth">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.FieldCount">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.HasRows">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.IsClosed">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.Initialize(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.InitializeAsync(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.IsSupportedValueType(System.Type)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.Close">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.Dispose(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetBoolean(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetByte(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetChar(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetDateTime(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetDecimal(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetDouble(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetFloat(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetGuid(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetInt16(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetInt32(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetInt64(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetString(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetFieldValue``1(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetValue(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetValues(System.Object[])">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetDataTypeName(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetFieldType(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetName(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetOrdinal(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.IsDBNull(System.Int32)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetEnumerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.GetSchemaTable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.NextResult">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.NextResultAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.Read">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.BufferedDataReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.ByteArraySequenceEqualTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ByteArraySequenceEqualTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ByteArraySequenceEqualTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.CollateTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CollateTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.CollectionJoinApplyingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CollectionJoinApplyingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.CollectionJoinApplyingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.ComparisonTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ComparisonTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ComparisonTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.ContainsTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ContainsTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.ContainsTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EnumHasFlagTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.EqualsTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EqualsTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.EqualsTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor.Expand(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlParameterExpandingExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryingEnumerable`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryingEnumerable`1.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache,System.Collections.Generic.IReadOnlyList{System.String},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,System.Int32[],`0},System.Type,System.Boolean,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryingEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryingEnumerable`1.GetEnumerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryingEnumerable`1.CreateDbCommand">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryingEnumerable`1.ToQueryString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryingEnumerable`1.BuildIndexMap(System.Collections.Generic.IReadOnlyList{System.String},System.Data.Common.DbDataReader)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Query.IAsyncQueryProvider,Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression.Sql">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression.Argument">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression.DetachQueryProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.FromSqlQueryRootExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.GetValueOrDefaultTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.GetValueOrDefaultTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.GetValueOrDefaultTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.IRelationalQueryingEnumerable">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.IRelationalQueryingEnumerable.CreateDbCommand">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.LikeTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.LikeTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.LikeTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.NullableMemberTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.NullableMemberTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.NullableMemberTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.QuerySqlGeneratorFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QuerySqlGeneratorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.QuerySqlGeneratorFactory.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache.#ctor(Microsoft.Extensions.Caching.Memory.IMemoryCache,Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory,Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache.ReaderColumns">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache.GetRelationalCommand(System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalParameterBasedSqlProcessorFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalParameterBasedSqlProcessorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalParameterBasedSqlProcessorFactory.Create(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor,Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitElementInit(System.Linq.Expressions.ElementInit)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMemberAssignment(System.Linq.Expressions.MemberAssignment)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalProjectionBindingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryableMethodTranslatingExpressionVisitorFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryableMethodTranslatingExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryableMethodTranslatingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryCompilationContextFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryCompilationContextFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContextDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContextDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryCompilationContextFactory.Create(System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryContextFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryContextFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryContextFactory.Create">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryMetadataExtractingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryMetadataExtractingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryMetadataExtractingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryStringFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryStringFactory.Create(System.Data.Common.DbCommand)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPostprocessorFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPostprocessorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPostprocessorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPreprocessorFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPreprocessorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalQueryTranslationPreprocessorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalShapedQueryCompilingExpressionVisitorFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalShapedQueryCompilingExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalShapedQueryCompilingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalValueConverterCompensatingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalValueConverterCompensatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.RelationalValueConverterCompensatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.ResultContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.ResultContext.Values">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SelectExpressionProjectionApplyingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SelectExpressionProjectionApplyingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SelectExpressionPruningExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SelectExpressionPruningExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.#ctor(System.Object,System.Object,System.Object[],System.Object[])">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.ResultContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.Parent">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.Collection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.ParentIdentifier">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.OuterIdentifier">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.SelfIdentifier">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext.UpdateSelfIdentifier(System.Object[])">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator,`0},System.Type,System.Boolean,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.GetEnumerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.CreateDbCommand">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryingEnumerable`1.ToQueryString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.#ctor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.ResultContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.ResultReady">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.HasNext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.Collections">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryResultCoordinator.SetSingleQueryCollectionContext(System.Int32,Microsoft.EntityFrameworkCore.Query.Internal.SingleQueryCollectionContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SplitIncludeRewritingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitIncludeRewritingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext.#ctor(System.Object,System.Object,System.Object[])">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext.ResultContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext.Parent">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext.Collection">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext.ParentIdentifier">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext.HasNext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryDataReaderContext.DataReader">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryingEnumerable`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryingEnumerable`1.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryContext,Microsoft.EntityFrameworkCore.Query.Internal.RelationalCommandCache,System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,System.Data.Common.DbDataReader,Microsoft.EntityFrameworkCore.Query.Internal.ResultContext,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,`0},System.Action{Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator},System.Func{Microsoft.EntityFrameworkCore.Query.QueryContext,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator,System.Threading.Tasks.Task},System.Type,System.Boolean,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryingEnumerable`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryingEnumerable`1.GetEnumerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryingEnumerable`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryingEnumerable`1.CreateDbCommand">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryingEnumerable`1.ToQueryString">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.#ctor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.ResultContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.Collections">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.DataReaders">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.SetDataReader(System.Int32,Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryResultCoordinator.SetSplitQueryCollectionContext(System.Int32,Microsoft.EntityFrameworkCore.Query.Internal.SplitQueryCollectionContext)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionOptimizingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionSimplifyingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionSimplifyingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.SqlExpressionSimplifyingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.StringMethodTranslator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.StringMethodTranslator.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.StringMethodTranslator.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.TableAliasUniquifyingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.TableAliasUniquifyingExpressionVisitor.Visit(System.Linq.Expressions.Expression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionQueryRootExpression">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionQueryRootExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Metadata.IStoreFunction,System.Collections.Generic.IReadOnlyCollection{System.Linq.Expressions.Expression})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionQueryRootExpression.Function">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionQueryRootExpression.Arguments">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionQueryRootExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionQueryRootExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionQueryRootExpression.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionQueryRootExpression.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionToQueryRootConvertingExpressionVisitor">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionToQueryRootConvertingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.Internal.TableValuedFunctionToQueryRootConvertingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorFactory">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorFactory.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory">
            <summary>
                <para>
                    A factory for creating <see cref="T:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator" /> instances.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory.Create">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator" />.
            </summary>
            <returns> A SQL generator. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory">
            <summary>
                <para>
                    A factory for creating <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor" /> instances.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory.Create(System.Boolean)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor" />.
            </summary>
            <param name="useRelationalNulls"> A bool value indicating if relational nulls should be used. </param>
            <returns> A relational parameter based sql processor. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IRelationalQueryStringFactory">
            <summary>
                <para>
                    Implemented by database providers to generate the query string for <see cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.ToQueryString(System.Linq.IQueryable)" />.
                </para>
                <para>
                    This interface is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IRelationalQueryStringFactory.Create(System.Data.Common.DbCommand)">
            <summary>
                Returns a formatted query string for the given command.
            </summary>
            <param name="command"> The command that represents the query. </param>
            <returns> The formatted string. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.IRelationalSqlTranslatingExpressionVisitorFactory">
            <summary>
                <para>
                    A factory for creating <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor" /> instances.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.IRelationalSqlTranslatingExpressionVisitorFactory.Create(Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor" />.
            </summary>
            <param name="queryCompilationContext"> The query compilation context to use. </param>
            <param name="queryableMethodTranslatingExpressionVisitor"> The visitor to use to translate subqueries. </param>
            <returns> A relational sql translating expression visitor. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory">
            <summary>
                <para>
                    A factory for creating <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> instances.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.GetTypeMappingForValue(System.Object)">
            <summary>
                Gets the relational database type for a given object, throwing if no mapping is found.
            </summary>
            <param name="value"> The object to get the mapping for. </param>
            <returns> The type mapping to be used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.FindMapping(System.Type)">
            <summary>
                Finds the type mapping for a given <see cref="T:System.Type" />.
            </summary>
            <param name="type"> The CLR type. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Applies type mapping to the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />.
            </summary>
            <param name="sqlExpression"> A SQL expression to apply type mapping. </param>
            <param name="typeMapping"> A type mapping to apply. </param>
            <returns> A SQL expression with given type mapping applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.ApplyDefaultTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Applies default type mapping to given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />.
            </summary>
            <param name="sqlExpression"> A SQL Expression to apply default type mapping. </param>
            <returns> A SQL expression with default type mapping applied. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.MakeUnary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" /> with the given arguments.
            </summary>
            <param name="operatorType"> An <see cref="T:System.Linq.Expressions.ExpressionType" /> reprenting SQL unary operator. </param>
            <param name="operand"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to apply unary operator on. </param>
            <param name="type"> The type of the created expression. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" /> with the given arguments. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> with the given arguments.
            </summary>
            <param name="operatorType"> An <see cref="T:System.Linq.Expressions.ExpressionType" /> reprenting SQL unary operator. </param>
            <param name="left"> The left operand of binary operation. </param>
            <param name="right"> The right operand of binary operation. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> with the given arguments. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Equal(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents an equality comparison.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <returns> An expression representing a SQL equality comparison. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.NotEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents an inequality comparison.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <returns> An expression representing a SQL inequality comparison. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.GreaterThan(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a greater than comparison.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <returns> An expression representing a SQL greater than comparison. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.GreaterThanOrEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a greater than or equal comparison.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <returns> An expression representing a SQL greater than or equal comparison. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.LessThan(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a less than comparison.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <returns> An expression representing a SQL less than comparison. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.LessThanOrEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a less than or equal comparison.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <returns> An expression representing a SQL less than or equal comparison. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.AndAlso(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a logical AND operation.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <returns> An expression representing a SQL AND operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.OrElse(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a logical OR operation.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <returns> An expression representing a SQL OR operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Add(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents an addition.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> An expression representing a SQL addition. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Subtract(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a subtraction.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> An expression representing a SQL subtraction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Multiply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a multiplication.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> An expression representing a SQL multiplication. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Divide(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a division.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> An expression representing a SQL division. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Modulo(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a modulo operation.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> An expression representing a SQL modulo operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.And(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a bitwise AND operation.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> An expression representing a SQL bitwise AND operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Or(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a bitwise OR operation.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> An expression representing a SQL bitwise OR operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Coalesce(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> which represents a bitwise OR operation.
            </summary>
            <param name="left"> The left operand. </param>
            <param name="right"> The right operand. </param>
            <param name="typeMapping"> A type mapping to be assigned to the created expression. </param>
            <returns> An expression representing a SQL bitwise OR operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.IsNull(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" /> which represent equality to null.
            </summary>
            <param name="operand"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to compare to null. </param>
            <returns> An expression representing IS NULL construct in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.IsNotNull(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" /> which represent inequality to null.
            </summary>
            <param name="operand"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to compare to non null. </param>
            <returns> An expression representing IS NOT NULL construct in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Convert(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" /> which represent casting a SQL expression to different type.
            </summary>
            <param name="operand"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to cast. </param>
            <param name="type"> The return type of the expression after cast. </param>
            <param name="typeMapping"> A relational type mapping to use for conversion. </param>
            <returns> An expression representing cast operation in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Not(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" /> which represent a NOT operation in a SQL tree.
            </summary>
            <param name="operand"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to apply NOT on. </param>
            <returns> An expression representing a NOT operation in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Negate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" /> which represent a negation operation in a SQL tree.
            </summary>
            <param name="operand"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to apply NOT on. </param>
            <returns> An expression representing a negation operation in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Case(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[])">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" /> which represent a CASE statement in a SQL tree.
            </summary>
            <param name="operand"> An expression to compare with <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause.Test" /> in <paramref name="whenClauses" />. </param>
            <param name="whenClauses"> A list of <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause" /> to compare and get result from. </param>
            <returns> An expression representing a CASE statement in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Case(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" /> which represent a CASE statement in a SQL tree.
            </summary>
            <param name="operand"> An expression to compare with <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause.Test" /> in <paramref name="whenClauses" />. </param>
            <param name="whenClauses"> A list of <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause" /> to compare and get result from. </param>
            <param name="elseResult"> A value to return if no <paramref name="whenClauses" /> matches, if any. </param>
            <returns> An expression representing a CASE statement in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Case(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" /> which represent a CASE statement in a SQL tree.
            </summary>
            <param name="whenClauses"> A list of <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause" /> to evaluate condition and get result from. </param>
            <param name="elseResult"> A value to return if no <paramref name="whenClauses" /> matches, if any. </param>
            <returns> An expression representing a CASE statement in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a function call in a SQL tree.
            </summary>
            <param name="name"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a function call in a SQL tree.
            </summary>
            <param name="schema"> The schema in which the function is defined. </param>
            <param name="name"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a function call in a SQL tree.
            </summary>
            <param name="instance"> An expression on which the function is applied. </param>
            <param name="name"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a function call in a SQL tree.
            </summary>
            <param name="name"> The name of the function. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a function call in a SQL tree.
            </summary>
            <param name="schema"> The schema in which the function is defined. </param>
            <param name="name"> The name of the function. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a function call in a SQL tree.
            </summary>
            <param name="instance"> An expression on which the function is applied. </param>
            <param name="name"> The name of the function. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a function call in a SQL tree.
            </summary>
            <param name="name"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="argumentsPropagateNullability"> A list of bool values indicating whether individual arguments propagate null to result. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a function call in a SQL tree.
            </summary>
            <param name="schema"> The schema in which the function is defined. </param>
            <param name="name"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="argumentsPropagateNullability"> A list of bool values indicating whether individual arguments propagate null to result. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a function call in a SQL tree.
            </summary>
            <param name="instance"> An expression on which the function is applied. </param>
            <param name="name"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="instancePropagatesNullability"> A value indicating if instance propagates null to result. </param>
            <param name="argumentsPropagateNullability"> A list of bool values indicating whether individual arguments propagate null to result. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.NiladicFunction(System.String,System.Boolean,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a niladic function call in a SQL tree.
            </summary>
            <param name="name"> The name of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.NiladicFunction(System.String,System.String,System.Boolean,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a niladic function call in a SQL tree.
            </summary>
            <param name="schema"> The schema in which the function is defined. </param>
            <param name="name"> The name of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.NiladicFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Boolean,System.Boolean,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> which represents a niladic function call in a SQL tree.
            </summary>
            <param name="instance"> An expression on which the function is applied. </param>
            <param name="name"> The name of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="instancePropagatesNullability"> A value indicating if instance propagates null to result. </param>
            <param name="returnType"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a function call in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Exists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression" /> which represents an EXISTS operation in a SQL tree.
            </summary>
            <param name="subquery"> A subquery to check existence of. </param>
            <param name="negated"> A value indicating if the existence check is negated. </param>
            <returns> An expression representing an EXISTS operation in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" /> which represents an IN operation in a SQL tree.
            </summary>
            <param name="item"> An item to look into values. </param>
            <param name="values"> A list of values in which item is searched. </param>
            <param name="negated"> A value indicating if the item should be present in the values or absent. </param>
            <returns> An expression representing an IN operation in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" /> which represents an IN operation in a SQL tree.
            </summary>
            <param name="item"> An item to look into values. </param>
            <param name="subquery"> A subquery in which item is searched. </param>
            <param name="negated"> A value indicating if the item should be present in the values or absent. </param>
            <returns> An expression representing an IN operation in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Like(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" /> which represents a LIKE in a SQL tree.
            </summary>
            <param name="match"> An expression on which LIKE is applied. </param>
            <param name="pattern"> A pattern to search. </param>
            <param name="escapeChar"> An optional escape character to use in LIKE. </param>
            <returns> An expression representing a LIKE in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Constant(System.Object,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression" /> which represents a constant in a SQL tree.
            </summary>
            <param name="value"> A value. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
            <returns> An expression representing a LIKE in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Fragment(System.String)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression" /> which represents a SQL token.
            </summary>
            <param name="sql"> A string token to print in SQL tree. </param>
            <returns> An expression representing a SQL token. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> which represents a SELECT in a SQL tree projecting a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" />
                or 1 from no table and without any composition.
            </summary>
            <param name="projection"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to project. </param>
            <returns> An expression representing a SELECT in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> which represents a SELECT in a SQL tree projecting an entity type from
                a table source created using default mapping in the model.
            </summary>
            <param name="entityType"> An entity type to project. </param>
            <returns> An expression representing a SELECT in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> which represents a SELECT in a SQL tree projecting an entity type from
                a table source.
            </summary>
            <param name="entityType"> An entity type to project. </param>
            <param name="tableExpressionBase"> A table source to project from. </param>
            <returns> An expression representing a SELECT in a SQL tree. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Linq.Expressions.Expression)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> which represents a SELECT in a SQL tree projecting an entity type from
                a table source created using a custom SQL.
            </summary>
            <param name="entityType"> An entity type to project. </param>
            <param name="sql"> A custom SQL for the table source. </param>
            <param name="sqlArguments"> An expression representing parameters passed to the custom SQL. </param>
            <returns> An expression representing a SELECT in a SQL tree. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator">
            <summary>
                <para>
                    A query SQL generator to get <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" /> for given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GetCommand(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Gets a relational command for a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="selectExpression"> A select expression to print in command text. </param>
            <returns> A relational command with a SQL represented by the select expression. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.AliasSeparator">
            <summary>
                The default alias separator.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.Sql">
            <summary>
                The current SQL command builder.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateTagsHeaderComment(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Generates the head comment for tags.
            </summary>
            <param name="selectExpression"> A select expression to generate tags for. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlFragment(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GeneratePseudoFromClause">
            <summary>
                Generates a pseudo FROM clause. Required by some providers when a query has no actual FROM clause.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitTableValuedFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitColumn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitTable(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitFromSql(Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.CheckComposableSql(System.String)">
            <summary>
                Checks whether a given SQL string is composable, i.e. can be embedded as a subquery within a
                larger SQL query.
            </summary>
            <param name="sql"> An SQL string to be checked for composability. </param>
            <exception cref="T:System.InvalidOperationException"> The given SQL isn't composable. </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlBinary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlConstant(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlParameter(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitLike(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitCollate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitDistinct(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitCase(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitSqlUnary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitExists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitIn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateOperator(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)">
            <summary>
                Generates a SQL operator for a SQL binary operation.
            </summary>
            <param name="binaryExpression"> A SQL binary operation. </param>
            <returns> A string representation of the binary operator. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GetOperator(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)">
            <summary>
                Gets a SQL operator for a SQL binary operation.
            </summary>
            <param name="binaryExpression"> A SQL binary operation. </param>
            <returns> A string representation of the binary operator. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateTop(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Generates a TOP construct in the relational command
            </summary>
            <param name="selectExpression"> A select expression to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateOrderings(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Generates an ORDER BY clause in the relational command
            </summary>
            <param name="selectExpression"> A select expression to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateLimitOffset(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Generates a LIMIT...OFFSET... construct in the relational command
            </summary>
            <param name="selectExpression"> A select expression to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitScalarSubquery(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitRowNumber(Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateSetOperation(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase)">
            <summary>
                Generates a set operation in the relational command.
            </summary>
            <param name="setOperation"> A set operation to print. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.GenerateSetOperationOperand(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Generates an operand for a given set operation in the relational command.
            </summary>
            <param name="setOperation"> A set operation to use. </param>
            <param name="operand"> A set operation operand to print. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitExcept(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitIntersect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator.VisitUnion(Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.QuerySqlGenerator" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies.RelationalCommandBuilderFactory">
            <summary>
                The command-builder factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies.SqlGenerationHelper">
            <summary>
                SQL generation helpers.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="relationalCommandBuilderFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.QuerySqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlGenerationHelper"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression">
            <summary>
                <para>
                    An expression that represents creation of a collection for relational provider in
                    <see cref="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ShaperExpression" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.#ctor(System.Int32,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.INavigation,System.Type)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression" /> class.
            </summary>
            <param name="collectionId"> A unique id for the collection being shaped. </param>
            <param name="parentIdentifier"> An identifier for the parent element. </param>
            <param name="outerIdentifier"> An identifier for the outer element. </param>
            <param name="selfIdentifier"> An identifier for the element in the collection. </param>
            <param name="innerShaper"> An expression used to create individual elements of the collection. </param>
            <param name="navigation"> A navigation associated with this collection, if any. </param>
            <param name="elementType"> The clr type of individual elements in the collection. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.#ctor(System.Int32,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer},System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Type)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression" /> class.
            </summary>
            <param name="collectionId"> A unique id for the collection being shaped. </param>
            <param name="parentIdentifier"> An identifier for the parent element. </param>
            <param name="outerIdentifier"> An identifier for the outer element. </param>
            <param name="selfIdentifier"> An identifier for the element in the collection. </param>
            <param name="parentIdentifierValueComparers"> A list of value comparers to compare parent identifier. </param>
            <param name="outerIdentifierValueComparers"> A list of value comparers to compare outer identifier. </param>
            <param name="selfIdentifierValueComparers"> A list of value comparers to compare self identifier. </param>
            <param name="innerShaper"> An expression used to create individual elements of the collection. </param>
            <param name="navigation"> A navigation associated with this collection, if any. </param>
            <param name="elementType"> The clr type of individual elements in the collection. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.CollectionId">
            <summary>
                A unique id for this collection shaper.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.ParentIdentifier">
            <summary>
                The identifier for the parent element.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.OuterIdentifier">
            <summary>
                The identifier for the outer element.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.SelfIdentifier">
            <summary>
                The identifier for the element in the collection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.ParentIdentifierValueComparers">
            <summary>
                The list of value comparers to compare parent identifier.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.OuterIdentifierValueComparers">
            <summary>
                The list of value comparers to compare outer identifier.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.SelfIdentifierValueComparers">
            <summary>
                The list of value comparers to compare self identifier.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.InnerShaper">
            <summary>
                The expression to create inner elements.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.Navigation">
            <summary>
                The navigation if associated with the collection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.ElementType">
            <summary>
                The clr type of elements of the collection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.NodeType">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="parentIdentifier"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.ParentIdentifier" /> property of the result. </param>
            <param name="outerIdentifier"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.OuterIdentifier" /> property of the result. </param>
            <param name="selfIdentifier"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.SelfIdentifier" /> property of the result. </param>
            <param name="innerShaper"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.InnerShaper" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator">
            <summary>
                <para>
                    Creates keys that uniquely identifies a query. This is used to store and lookup
                    compiled versions of a query in a cache.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.#ctor(Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGeneratorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.RelationalDependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.GenerateCacheKey(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                Generates the cache key for the given query.
            </summary>
            <param name="query"> The query to get the cache key for. </param>
            <param name="async"> A value indicating whether the query will be executed asynchronously. </param>
            <returns> The cache key. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.GenerateCacheKeyCore(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                Generates the cache key for the given query.
            </summary>
            <param name="query"> The query to get the cache key for. </param>
            <param name="async"> A value indicating whether the query will be executed asynchronously. </param>
            <returns> The cache key. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.RelationalCompiledQueryCacheKey">
            <summary>
                <para>
                    A key that uniquely identifies a query. This is used to store and lookup
                    compiled versions of a query in a cache.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.RelationalCompiledQueryCacheKey.#ctor(Microsoft.EntityFrameworkCore.Query.CompiledQueryCacheKeyGenerator.CompiledQueryCacheKey,System.Boolean,System.Nullable{Microsoft.EntityFrameworkCore.QuerySplittingBehavior},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.RelationalCompiledQueryCacheKey" /> class.
            </summary>
            <param name="compiledQueryCacheKey"> The non-relational cache key. </param>
            <param name="useRelationalNulls"> True to use relational null logic. </param>
            <param name="querySplittingBehavior"> <see cref="T:Microsoft.EntityFrameworkCore.QuerySplittingBehavior" /> to use when loading related collections. </param>
            <param name="shouldBuffer"> <see langword="true" /> if the query should be buffered. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.RelationalCompiledQueryCacheKey.Equals(System.Object)">
            <summary>
                Determines if this key is equivalent to a given object (i.e. if they are keys for the same query).
            </summary>
            <param name="obj">
                The object to compare this key to.
            </param>
            <returns>
                <see langword="true" /> if the object is a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.RelationalCompiledQueryCacheKey" /> and is for the same query,
                otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.RelationalCompiledQueryCacheKey.Equals(Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.RelationalCompiledQueryCacheKey)">
            <summary>
                Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">
                An object to compare with this object.
            </param>
            <returns>
                <see langword="true" /> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator.RelationalCompiledQueryCacheKey.GetHashCode">
            <summary>
                Gets the hash code for the key.
            </summary>
            <returns>
                The hash code for the key.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGenerator" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies.ContextOptions">
            <summary>
                Options for the current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalCompiledQueryCacheKeyGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="contextOptions"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression">
            <summary>
                <para>
                    An expression that represents creation of an entity instance for a relational provider in
                    <see cref="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ShaperExpression" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression" /> class.
            </summary>
            <param name="entityType"> The entity type to shape. </param>
            <param name="valueBufferExpression"> An expression of ValueBuffer to get values for properties of the entity. </param>
            <param name="nullable"> A bool value indicating whether this entity instance can be null. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.LambdaExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression" /> class.
            </summary>
            <param name="entityType"> The entity type to shape. </param>
            <param name="valueBufferExpression"> An expression of ValueBuffer to get values for properties of the entity. </param>
            <param name="nullable"> Whether this entity instance can be null. </param>
            <param name="materializationCondition">
                An expression of <see cref="T:System.Func`2" /> to determine which entity type to
                materialize.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression.GenerateMaterializationCondition(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression.WithEntityType(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression.MarkAsNullable">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalEntityShaperExpression.Update(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter">
            <summary>
                <para>
                    Represents a filter for evaluatable expressions.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter.#ctor(Microsoft.EntityFrameworkCore.Query.EvaluatableExpressionFilterDependencies,Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilterDependencies)">
            <summary>
                <para>
                    Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter" /> instance.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="dependencies"> The dependencies to use. </param>
            <param name="relationalDependencies"> The relational-specific dependencies to use. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter.RelationalDependencies">
            <summary>
                Dependencies used to create a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter.IsEvaluatableExpression(System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Checks whether the given expression can be evaluated.
            </summary>
            <param name="expression"> The expression. </param>
            <param name="model"> The model. </param>
            <returns> <see langword="true" /> if the expression can be evaluated; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilterDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilterDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalEvaluatableExpressionFilter" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProvider">
            <summary>
                <para>
                    Provides translations for LINQ <see cref="T:System.Linq.Expressions.MemberExpression" /> expressions by dispatching to multiple specialized member
                    translators.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProvider.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProvider" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProvider.Translate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MemberInfo,System.Type,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProvider.AddTranslators(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.IMemberTranslator})">
            <summary>
                Adds additional translators which will take priority over existing registered translators.
            </summary>
            <param name="translators"> Translators to add. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProvider" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.IMemberTranslatorPlugin})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProvider" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies.SqlExpressionFactory">
            <summary>
                The expression factory..
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies.Plugins">
            <summary>
                Registered plugins.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies.With(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlExpressionFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMemberTranslatorProviderDependencies.With(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.IMemberTranslatorPlugin})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="plugins"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProvider">
            <summary>
                <para>
                    Provides translations for LINQ <see cref="T:System.Linq.Expressions.MethodCallExpression" /> expressions by dispatching to multiple specialized
                    method call translators.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProvider.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProvider" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProvider.Translate(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Reflection.MethodInfo,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Query})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProvider.AddTranslators(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.IMethodCallTranslator})">
            <summary>
                Adds additional translators which will take priority over existing registered translators.
            </summary>
            <param name="translators"> Translators to add. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProvider" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorPlugin},Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProvider" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies.SqlExpressionFactory">
            <summary>
                The expression factory..
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies.Plugins">
            <summary>
                Registered plugins.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies.RelationalTypeMappingSource">
            <summary>
                Relational Type Mapping Source.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies.With(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlExpressionFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies.With(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorPlugin})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="plugins"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalMethodCallTranslatorProviderDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor">
            <summary>
                <para>
                    A class that processes the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />  after parementer values are known.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessor" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
            <param name="useRelationalNulls"> A bool value indicating if relational nulls should be used. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor.UseRelationalNulls">
            <summary>
                A bool value indicating if relational nulls should be used.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor.Optimize(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
                Optimizes the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> for given parameter values.
            </summary>
            <param name="selectExpression"> A select expression to optimize. </param>
            <param name="parametersValues"> A dictionary of parameter values to use. </param>
            <param name="canCache"> A bool value indicating if the select expression can be cached. </param>
            <returns> An optimized select expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor.ProcessSqlNullability(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
                Processes the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> based on nullability of nodes to apply null semantics in use and
                optimize it for given parameter values.
            </summary>
            <param name="selectExpression"> A select expression to optimize. </param>
            <param name="parametersValues"> A dictionary of parameter values to use. </param>
            <param name="canCache"> A bool value indicating if the select expression can be cached. </param>
            <returns> A processed select expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessor.ExpandFromSqlParameter(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
                Expands the parameters to <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" /> inside the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> for given parameter values.
            </summary>
            <param name="selectExpression"> A select expression to optimize. </param>
            <param name="parametersValues"> A dictionary of parameter values to use. </param>
            <param name="canCache"> A bool value indicating if the select expression can be cached. </param>
            <returns> A processed select expression. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalParameterBasedSqlProcessorFactory" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.Internal.RelationalParameterBasedSqlProcessorFactory" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies.SqlExpressionFactory">
            <summary>
                Sql expression factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies.TypeMappingSource">
            <summary>
                Relational type mapping souce.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies.ParameterNameGeneratorFactory">
            <summary>
                Parameter name generator factory.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies.With(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlExpressionFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="parameterNameGeneratorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this class. </param>
            <param name="queryCompilationContext"> The query compilation context object to use. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.RelationalDependencies">
            <summary>
                Parameter object containing relational service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor" /> class.
            </summary>
            <param name="parentVisitor"> A parent visitor to create subquery visitor for. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.CreateSubqueryVisitor">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.CreateShapedQueryExpression(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAll(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAny(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateAverage(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateCast(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateConcat(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateContains(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateDefaultIfEmpty(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateDistinct(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateElementAtOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateExcept(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateFirstOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateGroupBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateGroupJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateIntersect(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLeftJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLastOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateLongCount(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateMax(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateMin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateOfType(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateOrderBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateReverse(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelect(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSelectMany(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSingleOrDefault(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSkip(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSkipWhile(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateSum(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateTake(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateTakeWhile(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateThenBy(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateUnion(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor.TranslateWhere(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.LambdaExpression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies.#ctor(Microsoft.EntityFrameworkCore.Query.IRelationalSqlTranslatingExpressionVisitorFactory,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitor" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies.RelationalSqlTranslatingExpressionVisitorFactory">
            <summary>
                The SQL-translating expression visitor factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies.SqlExpressionFactory">
            <summary>
                The SQL expression factory.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.IRelationalSqlTranslatingExpressionVisitorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="relationalSqlTranslatingExpressionVisitorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryableMethodTranslatingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlExpressionFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext">
            <summary>
                <para>
                    The primary data structure representing the state/components used during relational query compilation.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext.#ctor(Microsoft.EntityFrameworkCore.Query.QueryCompilationContextDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContextDependencies,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this class. </param>
            <param name="async"> A bool value indicating whether it is for async query. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext.RelationalDependencies">
            <summary>
                Parameter object containing relational service dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext.QuerySplittingBehavior">
            <summary>
                A value indicating the <see cref="T:Microsoft.EntityFrameworkCore.QuerySplittingBehavior" /> configured for the query.
                If no value has been configured then <see cref="F:Microsoft.EntityFrameworkCore.QuerySplittingBehavior.SingleQuery" /> will be used.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContextDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContextDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryCompilationContext" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryContext">
            <summary>
                <para>
                    The principal data structure used by a compiled relational query during execution.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryContext.#ctor(Microsoft.EntityFrameworkCore.Query.QueryContextDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies)">
            <summary>
                <para>
                    Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" /> instance.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this class. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryContext.RelationalDependencies">
            <summary>
                Parameter object containing relational service dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryContext.RelationalQueryStringFactory">
            <summary>
                A factory for creating a readable query string from a <see cref="T:System.Data.Common.DbCommand" />
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryContext.Connection">
            <summary>
                Gets the active relational connection.
            </summary>
            <value>
                The connection.
            </value>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Query.IRelationalQueryStringFactory)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryContext" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies.RelationalConnection">
            <summary>
                The connection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies.RelationalQueryStringFactory">
            <summary>
                A factory for creating a readable query string from a <see cref="T:System.Data.Common.DbCommand" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="relationalConnection"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryContextDependencies.With(Microsoft.EntityFrameworkCore.Query.IRelationalQueryStringFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="relationalQueryStringFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this class. </param>
            <param name="queryCompilationContext"> The query compilation context object to use. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor.RelationalDependencies">
            <summary>
                Parameter object containing relational service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor.Process(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor.OptimizeSqlExpression(System.Linq.Expressions.Expression)">
            <summary>
                Optimizes the SQL expression.
            </summary>
            <param name="query"> An expression to optimize. </param>
            <returns> An expression which has SQL optimized. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessor" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies.SqlExpressionFactory">
            <summary>
                The SQL expression factory.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPostprocessorDependencies.With(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlExpressionFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor.#ctor(Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.QueryTranslationPreprocessor" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this class. </param>
            <param name="queryCompilationContext"> The query compilation context object to use. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor.RelationalDependencies">
            <summary>
                Parameter object containing relational service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor.NormalizeQueryableMethod(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor.Process(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessorDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalQueryTranslationPreprocessor" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryCompilingExpressionVisitor" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this class. </param>
            <param name="queryCompilationContext"> The query compilation context object to use. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.RelationalDependencies">
            <summary>
                Parameter object containing relational service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor.VisitShapedQuery(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.#ctor(Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory,Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory,Microsoft.EntityFrameworkCore.Infrastructure.ICoreSingletonOptions)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitor" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.QuerySqlGeneratorFactory">
            <summary>
                The SQL generator factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.SqlExpressionFactory">
            <summary>
                The SQL expression factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.ParameterNameGeneratorFactory">
            <summary>
                The parameter name-generator factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.RelationalParameterBasedSqlProcessorFactory">
            <summary>
                The SQL processor based on parameter values.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.CoreSingletonOptions">
            <summary>
                Core singleton options.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.IQuerySqlGeneratorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="querySqlGeneratorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlExpressionFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="parameterNameGeneratorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.IRelationalParameterBasedSqlProcessorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="relationalParameterBasedSqlProcessorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalShapedQueryCompilingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.ICoreSingletonOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="coreSingletonOptions"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression">
            <summary>
                <para>
                    An expression that represents creation of a collection during split query for relational provider in
                    <see cref="P:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression.ShaperExpression" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.#ctor(System.Int32,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.ChangeTracking.ValueComparer},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Type)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalCollectionShaperExpression" /> class.
            </summary>
            <param name="collectionId"> A unique id for the collection being shaped. </param>
            <param name="parentIdentifier"> An identifier for the parent element. </param>
            <param name="childIdentifier"> An identifier for the child element. </param>
            <param name="identifierValueComparers"> A list of value comparers to compare identifiers. </param>
            <param name="selectExpression"> A SQL query to get values for this collection from database. </param>
            <param name="innerShaper"> An expression used to create individual elements of the collection. </param>
            <param name="navigation"> A navigation associated with this collection, if any. </param>
            <param name="elementType"> The clr type of individual elements in the collection. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.CollectionId">
            <summary>
                A unique id for this collection shaper.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.ParentIdentifier">
            <summary>
                The identifier for the parent element.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.ChildIdentifier">
            <summary>
                The identifier for the child element.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.IdentifierValueComparers">
            <summary>
                The list of value comparers to compare identifiers.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.SelectExpression">
            <summary>
                The SQL query to get values for this collection from database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.InnerShaper">
            <summary>
                The expression to create inner elements.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.Navigation">
            <summary>
                The navigation if associated with the collection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.ElementType">
            <summary>
                The clr type of elements of the collection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.NodeType">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.Update(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Linq.Expressions.Expression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="parentIdentifier"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.ParentIdentifier" /> property of the result. </param>
            <param name="childIdentifier"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.ChildIdentifier" /> property of the result. </param>
            <param name="selectExpression"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.SelectExpression" /> property of the result. </param>
            <param name="innerShaper"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.InnerShaper" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSplitCollectionShaperExpression.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor">
            <summary>
                <para>
                    A class that translates expressions to corresponding SQL representation.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies,Microsoft.EntityFrameworkCore.Query.QueryCompilationContext,Microsoft.EntityFrameworkCore.Query.QueryableMethodTranslatingExpressionVisitor)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
            <param name="queryCompilationContext"> The query compilation context object to use. </param>
            <param name="queryableMethodTranslatingExpressionVisitor"> A parent queryable method translating expression visitor to translate subquery. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslationErrorDetails">
            <summary>
                Detailed information about errors encountered during translation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.AddTranslationErrorDetails(System.String)">
            <summary>
                Adds detailed information about error encountered during translation.
            </summary>
            <param name="details"> Detailed information about error encountered during translation. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.Translate(System.Linq.Expressions.Expression)">
            <summary>
                Translates an expression to an equivalent SQL representation.
            </summary>
            <param name="expression"> An expression to translate. </param>
            <returns> A SQL translation of the given expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateAverage(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Translates Average over an expression to an equivalent SQL representation.
            </summary>
            <param name="sqlExpression"> An expression to translate Average over. </param>
            <returns> A SQL translation of Average over the given expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateCount(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Translates Count over an expression to an equivalent SQL representation.
            </summary>
            <param name="sqlExpression"> An expression to translate Count over. </param>
            <returns> A SQL translation of Count over the given expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateLongCount(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Translates LongCount over an expression to an equivalent SQL representation.
            </summary>
            <param name="sqlExpression"> An expression to translate LongCount over. </param>
            <returns> A SQL translation of LongCount over the given expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateMax(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Translates Max over an expression to an equivalent SQL representation.
            </summary>
            <param name="sqlExpression"> An expression to translate Max over. </param>
            <returns> A SQL translation of Max over the given expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateMin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Translates Min over an expression to an equivalent SQL representation.
            </summary>
            <param name="sqlExpression"> An expression to translate Min over. </param>
            <returns> A SQL translation of Min over the given expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.TranslateSum(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Translates Sum over an expression to an equivalent SQL representation.
            </summary>
            <param name="sqlExpression"> An expression to translate Sum over. </param>
            <returns> A SQL translation of Sum over the given expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitListInit(System.Linq.Expressions.ListInitExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitTypeBinary(System.Linq.Expressions.TypeBinaryExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorFactory" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies.#ctor(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Query.IMemberTranslatorProvider,Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorProvider)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorFactory" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies.SqlExpressionFactory">
            <summary>
                The expression factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies.TypeMappingSource">
            <summary>
                The relational type mapping souce.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies.MemberTranslatorProvider">
            <summary>
                The member translation provider.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies.MethodCallTranslatorProvider">
            <summary>
                The method-call translation provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlExpressionFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.IMemberTranslatorProvider)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="memberTranslatorProvider"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.RelationalSqlTranslatingExpressionVisitorDependencies.With(Microsoft.EntityFrameworkCore.Query.IMethodCallTranslatorProvider)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="methodCallTranslatorProvider"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.ApplyDefaultTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.MakeBinary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Equal(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.NotEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.GreaterThan(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.GreaterThanOrEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.LessThan(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.LessThanOrEqual(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.AndAlso(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.OrElse(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Add(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Subtract(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Multiply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Divide(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Modulo(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.And(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Or(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Coalesce(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.MakeUnary(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.IsNull(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.IsNotNull(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Convert(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Not(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Negate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Case(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause[])">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Case(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Case(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Function(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.NiladicFunction(System.String,System.Boolean,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.NiladicFunction(System.String,System.String,System.Boolean,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.NiladicFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Boolean,System.Boolean,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Exists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.In(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Like(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Fragment(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Constant(System.Object,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.Select(Microsoft.EntityFrameworkCore.Metadata.IEntityType,System.String,System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.GetTypeMappingForValue(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory.FindMapping(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactory" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies.TypeMappingSource">
            <summary>
                The type mapping source.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionFactoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression">
            <summary>
                <para>
                    An expression that represents a CASE statement in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" /> class which represents a simple CASE expression.
            </summary>
            <param name="operand"> An expression to compare with <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause.Test" /> in <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.WhenClauses" />. </param>
            <param name="whenClauses"> A list of <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause" /> to compare and get result from. </param>
            <param name="elseResult"> A value to return if no <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.WhenClauses" /> matches, if any. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" /> class which represents a searched CASE expression.
            </summary>
            <param name="whenClauses"> A list of <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause" /> to evaluate condition and get result from. </param>
            <param name="elseResult"> A value to return if no <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.WhenClauses" /> matches, if any. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.Operand">
            <summary>
                The value to compare in <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.WhenClauses" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.WhenClauses">
            <summary>
                The list of <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause" /> to match <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.Operand" /> or evaluate condition to get result.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.ElseResult">
            <summary>
                The value to return if none of the <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.WhenClauses" /> matches.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="operand"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.Operand" /> property of the result. </param>
            <param name="whenClauses"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.WhenClauses" /> property of the result. </param>
            <param name="elseResult"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.ElseResult" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause">
            <summary>
                <para>
                    An expression that represents a WHEN...THEN... construct in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause" /> class.
            </summary>
            <param name="test"> A value to compare with <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.Operand" /> or condition to evaluate. </param>
            <param name="result"> A value to return if test succeeds. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause.Test">
            <summary>
                The value to compare with <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression.Operand" /> or the condition to evaluate.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause.Result">
            <summary>
                The value to return if <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause.Test" /> succeeds.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseWhenClause.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression">
            <summary>
                <para>
                    An expression that represents a COLLATE in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression" /> class.
            </summary>
            <param name="operand"> An expression on which collation is applied. </param>
            <param name="collation"> A collation value to use. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression.Operand">
            <summary>
                The expression on which collation is applied.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression.Collation">
            <summary>
                The collation value to use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="operand"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression.Operand" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression">
            <summary>
                <para>
                    An expression that represents a column in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    This class is not publicly constructable. If this is a problem for your application or provider, then please file
                    an issue at https://github.com/dotnet/efcore.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression.Name">
            <summary>
                The name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression.Table">
            <summary>
                The table from which column is being referenced.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression.IsNullable">
            <summary>
                The bool value indicating if this column can have null values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression.MakeNullable">
            <summary>
                Makes this column nullable.
            </summary>
            <returns> A new expression which has <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression.IsNullable" /> property set to true. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression">
            <summary>
                <para>
                    An expression that represents a CROSS APPLY in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression" /> class.
            </summary>
            <param name="table"> A table source to CROSS APPLY with. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="table"> The <see cref="P:Table" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression">
            <summary>
                <para>
                    An expression that represents a CROSS JOIN in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression" /> class.
            </summary>
            <param name="table"> A table source to CROSS JOIN with. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="table"> The <see cref="P:Table" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression">
            <summary>
                <para>
                    An expression that represents a DISTINCT in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression" /> class.
            </summary>
            <param name="operand"> An expression on which DISTINCT is applied. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression.Operand">
            <summary>
                The expression on which DISTINCT is applied.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="operand"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression.Operand" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression">
            <summary>
                <para>
                    An expression that represents an EXCEPT operation in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression.#ctor(System.String,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression" /> class.
            </summary>
            <param name="alias"> A string alias for the table source. </param>
            <param name="source1"> A table source which is first source in the set operation. </param>
            <param name="source2"> A table source which is second source in the set operation. </param>
            <param name="distinct"> A bool value indicating whether result will remove duplicate rows. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="source1"> The <see cref="P:Source1" /> property of the result. </param>
            <param name="source2"> The <see cref="P:Source2" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression">
            <summary>
                <para>
                    An expression that represents an EXISTS operation in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression" /> class.
            </summary>
            <param name="subquery"> A subquery to check existence of. </param>
            <param name="negated"> A value indicating if the existence check is negated. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression.Subquery">
            <summary>
                The subquery to check existence of.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression.IsNegated">
            <summary>
                The value indicating if the existence check is negated.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="subquery"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression.Subquery" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression">
            <summary>
                <para>
                    An expression that represents a subquery table source with user-provided custom SQL.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.#ctor(System.String,System.Linq.Expressions.Expression,System.String)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" /> class.
            </summary>
            <param name="sql"> A user-provided custom SQL for the table source. </param>
            <param name="arguments"> A user-provided parameters to pass to the custom SQL. </param>
            <param name="alias"> A string alias for the table source. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.#ctor(System.String,System.String,System.Linq.Expressions.Expression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" /> class.
            </summary>
            <param name="alias"> A string alias for the table source. </param>
            <param name="sql"> A user-provided custom SQL for the table source. </param>
            <param name="arguments"> A user-provided parameters to pass to the custom SQL. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Sql">
            <summary>
                The user-provided custom SQL for the table source.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Arguments">
            <summary>
                The user-provided parameters passed to the custom SQL.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Update(System.Linq.Expressions.Expression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="arguments"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Arguments" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression">
            <summary>
                <para>
                    An expression that represents an IN operation in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" /> class which represents a <paramref name="item" /> IN subquery expression.
            </summary>
            <param name="item"> An item to look into values. </param>
            <param name="negated"> A value indicating if the item should be present in the values or absent. </param>
            <param name="subquery"> A subquery in which item is searched. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" /> class which represents a <paramref name="item" /> IN values expression.
            </summary>
            <param name="item"> An item to look into values. </param>
            <param name="negated"> A value indicating if the item should be present in the values or absent. </param>
            <param name="values"> A list of values in which item is searched. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" /> class which represents a <paramref name="item" /> IN subquery expression.
            </summary>
            <param name="item"> An item to look into values. </param>
            <param name="subquery"> A subquery in which item is searched. </param>
            <param name="negated"> A value indicating if the item should be present in the values or absent. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" /> class which represents a <paramref name="item" /> IN values expression.
            </summary>
            <param name="item"> An item to look into values. </param>
            <param name="values"> A list of values in which item is searched. </param>
            <param name="negated"> A value indicating if the item should be present in the values or absent. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Item">
            <summary>
                The item to look into values.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.IsNegated">
            <summary>
                The value indicating if item should be present in the values or absent.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Values">
            <summary>
                The list of values to search item in.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Subquery">
            <summary>
                The subquery to search item in.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Negate">
            <summary>
                Negates this expression by changing presence/absence state indicated by <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.IsNegated" />.
            </summary>
            <returns> An expression which is negated form of this expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="item"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Item" /> property of the result. </param>
            <param name="values"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Values" /> property of the result. </param>
            <param name="subquery"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Subquery" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression">
            <summary>
                <para>
                    An expression that represents an INNER JOIN in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression" /> class.
            </summary>
            <param name="table"> A table source to INNER JOIN with. </param>
            <param name="joinPredicate"> A predicate to use for the join. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="table"> The <see cref="P:Table" /> property of the result. </param>
            <param name="joinPredicate"> The <see cref="P:JoinPredicate" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression">
            <summary>
                <para>
                    An expression that represents an INTERSECT operation in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression.#ctor(System.String,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression" /> class.
            </summary>
            <param name="alias"> A string alias for the table source. </param>
            <param name="source1"> A table source which is first source in the set operation. </param>
            <param name="source2"> A table source which is second source in the set operation. </param>
            <param name="distinct"> A bool value indicating whether result will remove duplicate rows. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="source1"> The <see cref="P:Source1" /> property of the result. </param>
            <param name="source2"> The <see cref="P:Source2" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.JoinExpressionBase">
            <summary>
                <para>
                    An expression that represents a JOIN in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.JoinExpressionBase.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.JoinExpressionBase" /> class.
            </summary>
            <param name="table"> A table source to join with. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.JoinExpressionBase.Table">
            <summary>
                Gets the underlying table source to join with.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.JoinExpressionBase.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.JoinExpressionBase.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression">
            <summary>
                <para>
                    An expression that represents a LEFT JOIN in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression" /> class.
            </summary>
            <param name="table"> A table source to LEFT JOIN with. </param>
            <param name="joinPredicate"> A predicate to use for the join. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="table"> The <see cref="P:Table" /> property of the result. </param>
            <param name="joinPredicate"> The <see cref="P:JoinPredicate" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression">
            <summary>
                <para>
                    An expression that represents a LIKE in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression" /> class.
            </summary>
            <param name="match"> An expression on which LIKE is applied. </param>
            <param name="pattern"> A pattern to search. </param>
            <param name="escapeChar"> An optional escape character to use in LIKE. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.Match">
            <summary>
                The expression on which LIKE is applied.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.Pattern">
            <summary>
                The pattern to search in <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.Match" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.EscapeChar">
            <summary>
                The escape chater to use in LIKE.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="match"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.Match" /> property of the result. </param>
            <param name="pattern"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.Pattern" /> property of the result. </param>
            <param name="escapeChar"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.EscapeChar" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression">
            <summary>
                <para>
                    An expression that represents an ordering in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression" /> class.
            </summary>
            <param name="expression"> An expression used for ordering. </param>
            <param name="ascending"> A value indicating if the ordering is ascending. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.Expression">
            <summary>
                The expression used for ordering.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.IsAscending">
            <summary>
                The value indicating if the ordering is ascending.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.NodeType">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.Type">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="expression"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.Expression" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression">
            <summary>
                <para>
                    An expression that represents an OUTER APPLY in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression" /> class.
            </summary>
            <param name="table"> A table source to OUTER APPLY with. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="table"> The <see cref="P:Table" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.PredicateJoinExpressionBase">
            <summary>
                <para>
                    An expression that represents a JOIN with a search condition in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.PredicateJoinExpressionBase.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.PredicateJoinExpressionBase" /> class.
            </summary>
            <param name="table"> A table source to join with. </param>
            <param name="joinPredicate"> A predicate to use for the join. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.PredicateJoinExpressionBase.JoinPredicate">
            <summary>
                The predicate used in join.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.PredicateJoinExpressionBase.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.PredicateJoinExpressionBase.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression">
            <summary>
                <para>
                    An expression that represents a projection in <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
                </para>
                <para>
                    This is a simple wrapper around a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> and an alias.
                    Instances of this type cannot be constructed by application or database provider code. If this is a problem for your
                    application or provider, then please file an issue at https://github.com/dotnet/efcore.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.Alias">
            <summary>
                The alias assigned to this projection, if any.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.Expression">
            <summary>
                The SQL value which is being projected.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.NodeType">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="expression"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.Expression" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression">
            <summary>
                <para>
                    An expression that represents a ROW_NUMBER operation in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression" /> class.
            </summary>
            <param name="partitions"> A list expressions to partition by. </param>
            <param name="orderings"> A list of ordering expressions to order by. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.Partitions">
            <summary>
                The list of expressions used in partitioning.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.Orderings">
            <summary>
                The list of ordering expressions used to order inside the given partition.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.Update(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression})">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="partitions"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.Partitions" /> property of the result. </param>
            <param name="orderings"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.Orderings" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression">
            <summary>
                <para>
                    An expression that represents projecting a scalar SQL value from a subquery.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression" /> class.
            </summary>
            <param name="subquery"> A subquery projecting single row with a single scalar projection. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression.Subquery">
            <summary>
                The subquery projecting single row with single scalar projection.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="subquery"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression.Subquery" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression">
            <summary>
                <para>
                    An expression that represents a SELECT in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    This class is not publicly constructable. If this is a problem for your application or provider, then please file
                    an issue at https://github.com/dotnet/efcore.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection">
            <summary>
                The list of expressions being projected out from the result set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables">
            <summary>
                The list of tables sources used to generate the result set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy">
            <summary>
                The SQL GROUP BY clause for the SELECT.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings">
            <summary>
                The list of orderings used to sort the result set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tags">
            <summary>
                The list of tags applied to this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate">
            <summary>
                The WHERE predicate for the SELECT.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having">
            <summary>
                The HAVING predicate for the SELECT when <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" /> clause exists.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit">
            <summary>
                The limit applied to the number of rows in the result set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset">
            <summary>
                The offset to skip rows from the result set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsDistinct">
            <summary>
                A bool value indicating if DISTINCT is applied to projection of this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyTags(System.Collections.Generic.ISet{System.String})">
            <summary>
                Applies a given set of tags.
            </summary>
            <param name="tags"> A list of tags to apply. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsNonComposedFromSql">
            <summary>
                Checks whether this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> representes a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" /> which is not composed upon.
            </summary>
            <returns> A bool value indicating a non-composed <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyProjection">
            <summary>
                Adds expressions from projection mapping to projection if not done already.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ClearProjection">
            <summary>
                Clears all existing projections.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ReplaceProjectionMapping(System.Collections.Generic.IDictionary{Microsoft.EntityFrameworkCore.Query.ProjectionMember,System.Linq.Expressions.Expression})">
            <summary>
                Replaces current projection mapping with a new one to change what is being projected out from this <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="projectionMapping"> A new projection mapping. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GetMappedProjection(Microsoft.EntityFrameworkCore.Query.ProjectionMember)">
            <summary>
                Gets the projection mapped to the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ProjectionMember" />.
            </summary>
            <param name="projectionMember"> A projection member to search in the mapping. </param>
            <returns> The mapped projection for given projection member. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddToProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Adds given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> to the projection.
            </summary>
            <param name="sqlExpression"> An expression to add. </param>
            <returns> An int value indicating the index at which the expression was added in the projection list. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddToProjection(Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression)">
            <summary>
                Adds given <see cref="T:Microsoft.EntityFrameworkCore.Query.EntityProjectionExpression" /> to the projection.
            </summary>
            <param name="entityProjection"> An entity projection to add. </param>
            <returns> A dictionary of <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> to int indicating properties and their corresponding indexes in the projection list. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.PrepareForAggregate">
            <summary>
                Prepares the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to apply aggregate operation over it.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyPredicate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Applies filter predicate to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="expression"> An expression to use for filtering. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyGrouping(System.Linq.Expressions.Expression)">
            <summary>
                Applies grouping from given key selector.
            </summary>
            <param name="keySelector"> An key selector expression for the GROUP BY. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)">
            <summary>
                Applies ordering to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />. This overwrites any previous ordering specified.
            </summary>
            <param name="orderingExpression"> An ordering expression to use for ordering. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AppendOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)">
            <summary>
                Appends ordering to the existing orderings of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="orderingExpression"> An ordering expression to use for ordering. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyLimit(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Applies limit to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to limit the number of rows returned in the result set.
            </summary>
            <param name="sqlExpression"> An expression representing limit row count. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyOffset(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Applies offset to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to skip the number of rows in the result set.
            </summary>
            <param name="sqlExpression"> An expression representing offset row count. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ReverseOrderings">
            <summary>
                Reverses the existing orderings on the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyDistinct">
            <summary>
                Applies DISTINCT operator to the projections of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyDefaultIfEmpty(Microsoft.EntityFrameworkCore.Query.ISqlExpressionFactory)">
            <summary>
                Applies <see cref="M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})" /> on the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="sqlExpressionFactory"> A factory to use for generating required sql expressions. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ClearOrdering">
            <summary>
                Clears existing orderings.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyExcept(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <summary>
                Applies EXCEPT operation to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="source2"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to perform the operation. </param>
            <param name="distinct"> A bool value indicating if resulting table source should remove duplicates. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyIntersect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <summary>
                Applies INTERSECT operation to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="source2"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to perform the operation. </param>
            <param name="distinct"> A bool value indicating if resulting table source should remove duplicates. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyUnion(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <summary>
                Applies UNION operation to the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="source2"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to perform the operation. </param>
            <param name="distinct"> A bool value indicating if resulting table source should remove duplicates. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.PushdownIntoSubquery">
            <summary>
                Pushes down the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> into a subquery.
            </summary>
            <returns> A mapping of projections before pushdown to <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression" />s after pushdown. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddSingleProjection(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression)">
            <summary>
                Adds a non-scalar single result to the projection of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="shapedQueryExpression"> A shaped query expression for the subquery producing single non-scalar result. </param>
            <returns> A shaper expression to shape the result of this projection. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCollectionProjection(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Type)">
            <summary>
                Adds a collection to the projection of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="shapedQueryExpression"> A shaped query expression for the subquery producing collection result. </param>
            <param name="navigation"> A navigation associated with this collection, if any. </param>
            <param name="elementType"> The type of the element in the collection. </param>
            <returns> A <see cref="T:Microsoft.EntityFrameworkCore.Query.CollectionShaperExpression" /> which represents shaping of this collection. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.ApplyCollectionJoin(System.Int32,System.Int32,System.Linq.Expressions.Expression,Microsoft.EntityFrameworkCore.Metadata.INavigationBase,System.Type,System.Boolean)">
            <summary>
                Applies previously added collection projection.
            </summary>
            <param name="collectionIndex"> An int value specifing which collection from pending collection to apply. </param>
            <param name="collectionId"> An int value of unique collection id associated with this collection projection. </param>
            <param name="innerShaper"> A shaper expression to use for shaping the elements of this collection. </param>
            <param name="navigation"> A navigation associated with this collection, if any. </param>
            <param name="elementType"> The type of the element in the collection. </param>
            <param name="splitQuery"> A value indicating whether the collection query would be run with a different DbCommand. </param>
            <returns> An expression which represents shaping of this collection. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using INNER JOIN.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
            <param name="joinPredicate"> A predicate to use for the join. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using LEFT JOIN.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
            <param name="joinPredicate"> A predicate to use for the join. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using CROSS JOIN.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using CROSS APPLY.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using OUTER APPLY.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Linq.Expressions.Expression)">
            <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using INNER JOIN and combine shapers.
            </summary>
            <param name="innerSource"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with. </param>
            <param name="joinPredicate"> A predicate to use for the join. </param>
            <param name="outerShaper"> An expression for outer shaper. </param>
            <returns> An expression which shapes the result of this join. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddLeftJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Linq.Expressions.Expression)">
            <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using LEFT JOIN and combine shapers.
            </summary>
            <param name="innerSource"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with. </param>
            <param name="joinPredicate"> A predicate to use for the join. </param>
            <param name="outerShaper"> An expression for outer shaper. </param>
            <returns> An expression which shapes the result of this join. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossJoin(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)">
            <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using CROSS JOIN and combine shapers.
            </summary>
            <param name="innerSource"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with. </param>
            <param name="outerShaper"> An expression for outer shaper. </param>
            <returns> An expression which shapes the result of this join. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossApply(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)">
            <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using CROSS APPLY and combine shapers.
            </summary>
            <param name="innerSource"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with. </param>
            <param name="outerShaper"> An expression for outer shaper. </param>
            <returns> An expression which shapes the result of this join. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddOuterApply(Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression,System.Linq.Expressions.Expression)">
            <summary>
                Adds the query expression of the given <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to table sources using OUTER APPLY and combine shapers.
            </summary>
            <param name="innerSource"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.ShapedQueryExpression" /> to join with. </param>
            <param name="outerShaper"> An expression for outer shaper. </param>
            <returns> An expression which shapes the result of this join. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using INNER JOIN.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
            <param name="joinPredicate"> A predicate to use for the join. </param>
            <param name="transparentIdentifierType"> The type of the result generated after performing the join. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using LEFT JOIN.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
            <param name="joinPredicate"> A predicate to use for the join. </param>
            <param name="transparentIdentifierType"> The type of the result generated after performing the join. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Type)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using CROSS JOIN.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
            <param name="transparentIdentifierType"> The type of the result generated after performing the join. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Type)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using CROSS APPLY.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
            <param name="transparentIdentifierType"> The type of the result generated after performing the join. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.AddOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Type)">
            <summary>
                Adds the given <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to table sources using OUTER APPLY.
            </summary>
            <param name="innerSelectExpression"> A <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to join with. </param>
            <param name="transparentIdentifierType"> The type of the result generated after performing the join. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Prune">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Update(System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.String)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="projections"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" /> property of the result. </param>
            <param name="tables"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" /> property of the result. </param>
            <param name="predicate"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" /> property of the result. </param>
            <param name="groupBy"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" /> property of the result. </param>
            <param name="having"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" /> property of the result. </param>
            <param name="orderings"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" /> property of the result. </param>
            <param name="limit"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" /> property of the result. </param>
            <param name="offset"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" /> property of the result. </param>
            <param name="distinct"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.IsDistinct" /> property of the result. </param>
            <param name="alias"> The <see cref="P:Alias" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Update(System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression},System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.List{Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression},Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="projections"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Projection" /> property of the result. </param>
            <param name="tables"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Tables" /> property of the result. </param>
            <param name="predicate"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Predicate" /> property of the result. </param>
            <param name="groupBy"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GroupBy" /> property of the result. </param>
            <param name="having"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Having" /> property of the result. </param>
            <param name="orderings"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Orderings" /> property of the result. </param>
            <param name="limit"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Limit" /> property of the result. </param>
            <param name="offset"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Offset" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase">
            <summary>
                <para>
                    An expression that represents a set operation between two table sources.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase.#ctor(System.String,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase" /> class.
            </summary>
            <param name="alias"> A string alias for the table source. </param>
            <param name="source1"> A table source which is first source in the set operation. </param>
            <param name="source2"> A table source which is second source in the set operation. </param>
            <param name="distinct"> A bool value indicating whether result will remove duplicate rows. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase.IsDistinct">
            <summary>
                The bool value indicating whether result will remove duplicate rows.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase.Source1">
            <summary>
                The first source of the set operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase.Source2">
            <summary>
                The second source of the set operation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SetOperationBase.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression">
            <summary>
                <para>
                    An expression that represents a binary operation in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.#ctor(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> class.
            </summary>
            <param name="operatorType"> The operator to apply. </param>
            <param name="left"> An expression which is left operand. </param>
            <param name="right"> An expression which is right operand. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.OperatorType">
            <summary>
                The operator of this SQL binary operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.Left">
            <summary>
                The left operand.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.Right">
            <summary>
                The right operand.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="left"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.Left" /> property of the result. </param>
            <param name="right"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.Right" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression">
            <summary>
                <para>
                    An expression that represents a constant in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression.#ctor(System.Linq.Expressions.ConstantExpression,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression" /> class.
            </summary>
            <param name="constantExpression"> A <see cref="T:System.Linq.Expressions.ConstantExpression" />. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression.Value">
            <summary>
                The constant value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Applies supplied type mapping to this expression.
            </summary>
            <param name="typeMapping"> A relational type mapping to apply. </param>
            <returns> A new expression which has supplied type mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression">
            <summary>
                <para>
                    An expression that represents a scalar value or a SQL token in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression.#ctor(System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> class.
            </summary>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression.TypeMapping">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with this expression.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression.NodeType">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                Creates a printable string representation of the given expression using <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" />.
            </summary>
            <param name="expressionPrinter"> The expression printer to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression">
            <summary>
                <para>
                    An expression that represents a SQL token.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression.#ctor(System.String)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression" /> class.
            </summary>
            <param name="sql"> A string token to print in SQL tree. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression.Sql">
            <summary>
                The string token to print in SQL tree.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression">
            <summary>
                <para>
                    An expression that represents a function call in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.#ctor(System.String,System.Boolean,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class which represents a built-in niladic function.
            </summary>
            <param name="functionName"> The name of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.#ctor(System.String,System.String,System.Boolean,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class which represents a niladic function.
            </summary>
            <param name="schema"> The schema in which the function is defined. </param>
            <param name="functionName"> The name of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Boolean,System.Boolean,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class which represents a niladic function which is invoked on an
                instance.
            </summary>
            <param name="instance"> An expression on which the function is defined. </param>
            <param name="functionName"> The name of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="instancePropagatesNullability"> A value indicating if instance propagates null to result. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.#ctor(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class which represents a built-in function.
            </summary>
            <param name="functionName"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="argumentsPropagateNullability"> A list of bool values indicating whether individual arguments propagate null to result. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class which represents a function.
            </summary>
            <param name="schema"> The schema in which the function is defined. </param>
            <param name="functionName"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="argumentsPropagateNullability"> A list of bool values indicating whether individual arguments propagate null to result. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.#ctor(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{System.Boolean},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class which represents a function which is invoked on an instance.
            </summary>
            <param name="instance"> An expression on which the function is applied. </param>
            <param name="functionName"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="nullable"> A bool value indicating whether this function can return null. </param>
            <param name="instancePropagatesNullability"> A value indicating if instance propagates null to result. </param>
            <param name="argumentsPropagateNullability"> A list of bool values indicating whether individual arguments propagate null to result. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Name">
            <summary>
                The name of the function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Schema">
            <summary>
                The schema in which the function is defined, if any.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.IsNiladic">
            <summary>
                A bool value indicating if the function is niladic.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.IsBuiltIn">
            <summary>
                A bool value indicating if the function is built-in.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Arguments">
            <summary>
                The list of arguments of this function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Instance">
            <summary>
                The instance on which this function is applied.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.IsNullable">
            <summary>
                A bool value indicating if the function can return null result.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.InstancePropagatesNullability">
            <summary>
                A bool value indicating if the instance propagates null to the result.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.ArgumentsPropagateNullability">
            <summary>
                A list of bool values indicating whether individual argument propagate null to the result.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Applies supplied type mapping to this expression.
            </summary>
            <param name="typeMapping"> A relational type mapping to apply. </param>
            <returns> A new expression which has supplied type mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="instance"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Instance" /> property of the result. </param>
            <param name="arguments"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Arguments" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.CreateNiladic(System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class.
            </summary>
            <param name="name"> The name of the function. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.CreateNiladic(System.String,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class.
            </summary>
            <param name="schema"> The schema in which the function is defined. </param>
            <param name="name"> The name of the function. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.CreateNiladic(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class.
            </summary>
            <param name="instance"> An expression on which the function is defined. </param>
            <param name="name"> The name of the function. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Create(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class.
            </summary>
            <param name="instance"> An expression on which the function is applied. </param>
            <param name="name"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Create(System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class.
            </summary>
            <param name="name"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression.Create(System.String,System.String,System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression},System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> class.
            </summary>
            <param name="schema"> The schema in which the function is defined. </param>
            <param name="name"> The name of the function. </param>
            <param name="arguments"> The arguments of the function. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression">
            <summary>
                <para>
                    An expression that represents a parameter in a SQL tree.
                </para>
                <para>
                    This is a simple wrapper around a <see cref="T:System.Linq.Expressions.ParameterExpression" /> in the SQL tree.
                    Instances of this type cannot be constructed by application or database provider code. If this is a problem for your
                    application or provider, then please file an issue at https://github.com/dotnet/efcore.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression.Name">
            <summary>
                The name of the parameter.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression.IsNullable">
            <summary>
                The bool value indicating if this parameter can have null values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression.ApplyTypeMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Applies supplied type mapping to this expression.
            </summary>
            <param name="typeMapping"> A relational type mapping to apply. </param>
            <returns> A new expression which has supplied type mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression">
            <summary>
                <para>
                    An expression that represents an unary operation in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression.#ctor(System.Linq.Expressions.ExpressionType,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Type,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" /> class.
            </summary>
            <param name="operatorType"> The operator to apply. </param>
            <param name="operand"> An expression on which operator is applied. </param>
            <param name="type"> The <see cref="T:System.Type" /> of the expression. </param>
            <param name="typeMapping"> The <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> associated with the expression. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression.OperatorType">
            <summary>
                The operator of this SQL unary operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression.Operand">
            <summary>
                The operand of this SQL unary operation.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="operand"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression.Operand" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression">
            <summary>
                <para>
                    An expression that represents a table or view in a SQL tree.
                </para>
                <para>
                    This is a simple wrapper around a table and schema name. Instances of this type cannot be constructed by
                    application or database provider code. If this is a problem for your application or provider, then please file
                    an issue at https://github.com/dotnet/efcore.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression.Name">
            <summary>
                The name of the table or view.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression.Schema">
            <summary>
                The schema of the table or view.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression.Table">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.ITableBase" /> associated with this table or view.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase">
            <summary>
                <para>
                    An expression that represents a table source in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.#ctor(System.String)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" /> class.
            </summary>
            <param name="alias"> A string alias for the table source. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.Alias">
            <summary>
                The alias assigned to this table source.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.Type">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.NodeType">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <summary>
                Creates a printable string representation of the given expression using <see cref="T:Microsoft.EntityFrameworkCore.Query.ExpressionPrinter" />.
            </summary>
            <param name="expressionPrinter"> The expression printer to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.Microsoft#EntityFrameworkCore#Query#IPrintableExpression#Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression">
            <summary>
                <para>
                    An expression that represents a table value function as a table source in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression.#ctor(Microsoft.EntityFrameworkCore.Metadata.IStoreFunction,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression" /> class.
            </summary>
            <param name="storeFunction"> The <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IStoreFunction" /> associated this function. </param>
            <param name="arguments"> The arguments of the function. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression.StoreFunction">
            <summary>
                The store function.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression.Arguments">
            <summary>
                The list of arguments of this function.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression.Update(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression})">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="arguments"> The <see cref="P:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression.Arguments" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression">
            <summary>
                <para>
                    An expression that represents a UNION operation in a SQL tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression.#ctor(System.String,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression" /> class.
            </summary>
            <param name="alias"> A string alias for the table source. </param>
            <param name="source1"> A table source which is first source in the set operation. </param>
            <param name="source2"> A table source which is second source in the set operation. </param>
            <param name="distinct"> A bool value indicating whether result will remove duplicate rows. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression.Update(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will
                return this expression.
            </summary>
            <param name="source1"> The <see cref="P:Source1" /> property of the result. </param>
            <param name="source2"> The <see cref="P:Source2" /> property of the result. </param>
            <returns> This expression if no children changed, or an expression with the updated children. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression.Print(Microsoft.EntityFrameworkCore.Query.ExpressionPrinter)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor">
            <summary>
                <para>
                    A class that visits a SQL expression tree.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitCase(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression)">
            <summary>
                Visits the children of the case expression.
            </summary>
            <param name="caseExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitCollate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression)">
            <summary>
                Visits the children of the collate expression.
            </summary>
            <param name="collateExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitColumn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression)">
            <summary>
                Visits the children of the column expression.
            </summary>
            <param name="columnExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitCrossApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossApplyExpression)">
            <summary>
                Visits the children of the cross apply expression.
            </summary>
            <param name="crossApplyExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitCrossJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CrossJoinExpression)">
            <summary>
                Visits the children of the cross join expression.
            </summary>
            <param name="crossJoinExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitDistinct(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression)">
            <summary>
                Visits the children of the distinct expression.
            </summary>
            <param name="distinctExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitExcept(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExceptExpression)">
            <summary>
                Visits the children of the except expression.
            </summary>
            <param name="exceptExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitExists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression)">
            <summary>
                Visits the children of the exists expression.
            </summary>
            <param name="existsExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitFromSql(Microsoft.EntityFrameworkCore.Query.SqlExpressions.FromSqlExpression)">
            <summary>
                Visits the children of the from sql expression.
            </summary>
            <param name="fromSqlExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitIn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression)">
            <summary>
                Visits the children of the in expression.
            </summary>
            <param name="inExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitIntersect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.IntersectExpression)">
            <summary>
                Visits the children of the intersect expression.
            </summary>
            <param name="intersectExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitLike(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression)">
            <summary>
                Visits the children of the like expression.
            </summary>
            <param name="likeExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitInnerJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InnerJoinExpression)">
            <summary>
                Visits the children of the inner join expression.
            </summary>
            <param name="innerJoinExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitLeftJoin(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LeftJoinExpression)">
            <summary>
                Visits the children of the left join expression.
            </summary>
            <param name="leftJoinExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitOrdering(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OrderingExpression)">
            <summary>
                Visits the children of the ordering expression.
            </summary>
            <param name="orderingExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitOuterApply(Microsoft.EntityFrameworkCore.Query.SqlExpressions.OuterApplyExpression)">
            <summary>
                Visits the children of the outer apply expression.
            </summary>
            <param name="outerApplyExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitProjection(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ProjectionExpression)">
            <summary>
                Visits the children of the projection expression.
            </summary>
            <param name="projectionExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitTableValuedFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableValuedFunctionExpression)">
            <summary>
                Visits the children of the table valued function expression.
            </summary>
            <param name="tableValuedFunctionExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitRowNumber(Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression)">
            <summary>
                Visits the children of the row number expression.
            </summary>
            <param name="rowNumberExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitScalarSubquery(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression)">
            <summary>
                Visits the children of the scalar subquery expression.
            </summary>
            <param name="scalarSubqueryExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitSelect(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Visits the children of the select expression.
            </summary>
            <param name="selectExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitSqlBinary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression)">
            <summary>
                Visits the children of the sql binary expression.
            </summary>
            <param name="sqlBinaryExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitSqlConstant(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression)">
            <summary>
                Visits the children of the sql constant expression.
            </summary>
            <param name="sqlConstantExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitSqlFragment(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression)">
            <summary>
                Visits the children of the sql fragent expression.
            </summary>
            <param name="sqlFragmentExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression)">
            <summary>
                Visits the children of the sql function expression.
            </summary>
            <param name="sqlFunctionExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitSqlParameter(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression)">
            <summary>
                Visits the children of the sql parameter expression.
            </summary>
            <param name="sqlParameterExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitSqlUnary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression)">
            <summary>
                Visits the children of the sql unary expression.
            </summary>
            <param name="sqlUnaryExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitTable(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpression)">
            <summary>
                Visits the children of the table expression.
            </summary>
            <param name="tableExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlExpressionVisitor.VisitUnion(Microsoft.EntityFrameworkCore.Query.SqlExpressions.UnionExpression)">
            <summary>
                Visits the children of the union expression.
            </summary>
            <param name="unionExpression"> The expression to visit. </param>
            <returns> The modified expression, if it or any subexpression was modified; otherwise, returns the original expression. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor">
            <summary>
                <para>
                    A class that processes a SQL tree based on nullability of nodes to apply null semantics in use and
                    optimize it based on parameter values.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.#ctor(Microsoft.EntityFrameworkCore.Query.RelationalParameterBasedSqlProcessorDependencies,System.Boolean)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this class. </param>
            <param name="useRelationalNulls"> A bool value indicating whether relational null semantics are in use. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.UseRelationalNulls">
            <summary>
                A bool value indicating whether relational null semantics are in use.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.ParameterValues">
            <summary>
                Dictionary of current parameter values in use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.Process(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Boolean@)">
            <summary>
                Processes a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" /> to apply null semantics and optimize it.
            </summary>
            <param name="selectExpression"> A select expression to process. </param>
            <param name="parameterValues"> A dictionary of parameter values in use. </param>
            <param name="canCache"> A bool value indicating whether the select expression can be cached. </param>
            <returns> An optimized select expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.DoNotCache">
            <summary>
                Marks the select expression being processed as cannot be cached.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.AddNonNullableColumn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression)">
            <summary>
                Adds a column to non nullable columns list to further optimizations can take the column as non-nullable.
            </summary>
            <param name="columnExpression"> A column expression to add. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.Visit(Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.TableExpressionBase" />.
            </summary>
            <param name="tableExpressionBase"> A table expression base to visit. </param>
            <returns> An optimized table expression base. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.Visit(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SelectExpression" />.
            </summary>
            <param name="selectExpression"> A select expression to visit. </param>
            <returns> An optimized select expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.Visit(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> and computes its nullability.
            </summary>
            <param name="sqlExpression"> A sql expression to visit. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.Visit(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> and computes its nullability.
            </summary>
            <param name="sqlExpression"> A sql expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitCustomSqlExpression(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a custom <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlExpression" /> added by providers and computes its nullability.
            </summary>
            <param name="sqlExpression"> A sql expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitCase(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CaseExpression" /> and computes its nullability.
            </summary>
            <param name="caseExpression"> A case expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitCollate(Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.CollateExpression" /> and computes its nullability.
            </summary>
            <param name="collateExpression"> A collate expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitColumn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ColumnExpression" /> and computes its nullability.
            </summary>
            <param name="columnExpression"> A column expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitDistinct(Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.DistinctExpression" /> and computes its nullability.
            </summary>
            <param name="distinctExpression"> A collate expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitExists(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits an <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ExistsExpression" /> and computes its nullability.
            </summary>
            <param name="existsExpression"> An exists expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitIn(Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits an <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.InExpression" /> and computes its nullability.
            </summary>
            <param name="inExpression"> An in expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitLike(Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.LikeExpression" /> and computes its nullability.
            </summary>
            <param name="likeExpression"> A like expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitRowNumber(Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.RowNumberExpression" /> and computes its nullability.
            </summary>
            <param name="rowNumberExpression"> A row number expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitScalarSubquery(Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.ScalarSubqueryExpression" /> and computes its nullability.
            </summary>
            <param name="scalarSubqueryExpression"> A scalar subquery expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitSqlBinary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlBinaryExpression" /> and computes its nullability.
            </summary>
            <param name="sqlBinaryExpression"> A sql binary expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitSqlConstant(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlConstantExpression" /> and computes its nullability.
            </summary>
            <param name="sqlConstantExpression"> A sql constant expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitSqlFragment(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFragmentExpression" /> and computes its nullability.
            </summary>
            <param name="sqlFragmentExpression"> A sql fragment expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitSqlFunction(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlFunctionExpression" /> and computes its nullability.
            </summary>
            <param name="sqlFunctionExpression"> A sql function expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitSqlParameter(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlParameterExpression" /> and computes its nullability.
            </summary>
            <param name="sqlParameterExpression"> A sql parameter expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Query.SqlNullabilityProcessor.VisitSqlUnary(Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression,System.Boolean,System.Boolean@)">
            <summary>
                Visits a <see cref="T:Microsoft.EntityFrameworkCore.Query.SqlExpressions.SqlUnaryExpression" /> and computes its nullability.
            </summary>
            <param name="sqlUnaryExpression"> A sql unary expression to visit. </param>
            <param name="allowOptimizedExpansion"> A bool value indicating if optimized expansion which considers null value as false value is allowed. </param>
            <param name="nullable"> A bool value indicating whether the sql expression is nullable. </param>
            <returns> An optimized sql expression. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactory">
            <summary>
                Base class used by database providers to reverse engineer a database into a <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactory.Create(System.String,Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions)">
            <summary>
                Connects to the database using the given connection string and creates a <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel" />
                for the database.
            </summary>
            <param name="connectionString"> The connection string for the database to reverse engineer. </param>
            <param name="options"> The options specifying which metadata to read. </param>
            <returns> The database model. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactory.Create(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions)">
            <summary>
                Connects to the database using the given connection and creates a <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel" />
                for the database.
            </summary>
            <param name="connection"> The connection to the database to reverse engineer. </param>
            <param name="options"> The options specifying which metadata to read. </param>
            <returns> The database model. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions">
            <summary>
                Specifies which metadata to read from the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions" /> class.
            </summary>
            <param name="tables"> A list of tables to include. Empty to include all tables. </param>
            <param name="schemas"> A list of schemas to include. Empty to include all schemas. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions.Tables">
            <summary>
                Gets the list of tables to include. If empty, include all tables.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions.Schemas">
            <summary>
                Gets the list of schemas to include. If empty, include all schemas.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.IDatabaseModelFactory">
            <summary>
                A service typically implemented by database providers to reverse engineer a database into
                a <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.IDatabaseModelFactory.Create(System.String,Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions)">
            <summary>
                Connects to the database using the given connection string and creates a <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel" />
                for the database.
            </summary>
            <param name="connectionString"> The connection string for the database to reverse engineer. </param>
            <param name="options"> The options specifying which metadata to read. </param>
            <returns> The database model. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.IDatabaseModelFactory.Create(System.Data.Common.DbConnection,Microsoft.EntityFrameworkCore.Scaffolding.DatabaseModelFactoryOptions)">
            <summary>
                Connects to the database using the given connection and creates a <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel" />
                for the database.
            </summary>
            <param name="connection"> The connection to the database to reverse engineer. </param>
            <param name="options"> The options specifying which metadata to read. </param>
            <returns> The database model. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.IProviderCodeGeneratorPlugin">
            <summary>
                Implemented by plugins to generate code fragments for reverse engineering.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.IProviderCodeGeneratorPlugin.GenerateProviderOptions">
            <summary>
                Generates a method chain used to configure provider-specific options.
            </summary>
            <returns> The method chain. May be null. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.IProviderCodeGeneratorPlugin.GenerateContextOptions">
            <summary>
                Generates a method chain to configure additional context options.
            </summary>
            <returns> The method chain. May be null. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.IProviderConfigurationCodeGenerator">
            <summary>
                A service typically implemented by database providers to generate code fragments
                for reverse engineering.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.IProviderConfigurationCodeGenerator.GenerateProviderOptions">
            <summary>
                Generates a method chain used to configure provider-specific options.
            </summary>
            <returns> The method chain. May be null. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.IProviderConfigurationCodeGenerator.GenerateUseProvider(System.String,Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment)">
            <summary>
                Generates a code fragment like <c>.UseSqlServer("Database=Foo")</c> which can be used in
                the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method of the generated DbContext.
            </summary>
            <param name="connectionString"> The connection string to include in the code fragment. </param>
            <param name="providerOptions"> The method chain used to configure provider options. </param>
            <returns> The code fragment. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.IProviderConfigurationCodeGenerator.GenerateContextOptions">
            <summary>
                Generates a method chain to configure additional context options.
            </summary>
            <returns> The method chain. May be null. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.IProviderConfigurationCodeGenerator.GenerateUseProvider(System.String)">
            <summary>
                Generates a code fragment like <c>.UseSqlServer("Database=Foo")</c> which can be used in
                the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method of the generated DbContext.
            </summary>
            <param name="connectionString"> The connection string to include in the code fragment. </param>
            <returns> The code fragment. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn">
            <summary>
                A simple model for a database column used when reverse engineering an existing database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.Table">
            <summary>
                The table that contains this column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.Name">
            <summary>
                The column name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.IsNullable">
            <summary>
                Indicates whether or not this column can contain <see langword="null" /> values.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.StoreType">
            <summary>
                The database/store type of the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.DefaultValueSql">
            <summary>
                The default constraint for the column, or <see langword="null" /> if none.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.ComputedColumnSql">
            <summary>
                Whether the value of the computed column this property is mapped to is stored in the database, or calculated when
                it is read.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.IsStored">
            <summary>
                Whether the value of the computed column this property is mapped to is stored in the database, or calculated when
                it is read.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.Comment">
            <summary>
                The column comment, or <see langword="null" /> if none is set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.Collation">
            <summary>
                The column collation, or <see langword="null" /> if none is set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.ValueGenerated">
            <summary>
                Indicates when values will be generated by the database for this column, or <see langword="null" /> if
                the database will not generate values.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseColumn.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey">
            <summary>
                A simple model for a database foreign key constraint used when reverse engineering an existing database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey.Table">
            <summary>
                The table that contains the foreign key constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey.PrincipalTable">
            <summary>
                The table to which the columns are constrained.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey.Columns">
            <summary>
                The ordered list of columns that are constrained.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey.PrincipalColumns">
            <summary>
                The ordered list of columns in the <see cref="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey.PrincipalTable" /> to which the <see cref="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey.Columns" />
                of the foreign key are constrained.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey.Name">
            <summary>
                The foreign key constraint name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey.OnDelete">
            <summary>
                The action performed by the database when a row constrained by this foreign key
                is deleted, or <see langword="null" /> if there is no action defined.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseForeignKey.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseIndex">
            <summary>
                A simple model for a database index used when reverse engineering an existing database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseIndex.Table">
            <summary>
                The table that contains the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseIndex.Name">
            <summary>
                The index name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseIndex.Columns">
            <summary>
                The ordered list of columns that make up the index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseIndex.IsUnique">
            <summary>
                Indicates whether or not the index constrains uniqueness.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseIndex.Filter">
            <summary>
                The filter expression, or <see langword="null" /> if the index has no filter.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseIndex.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel">
            <summary>
                A simple model for a database used when reverse engineering an existing database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel.DatabaseName">
            <summary>
                The database name, or <see langword="null" /> if none is set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel.DefaultSchema">
            <summary>
                The database schema, or <see langword="null" /> to use the default schema.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel.Collation">
            <summary>
                The database collation, or <see langword="null" /> if none is set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel.Tables">
            <summary>
                The list of tables in the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseModel.Sequences">
            <summary>
                The list of sequences in the database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabasePrimaryKey">
            <summary>
                A simple model for a database primary key used when reverse engineering an existing database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabasePrimaryKey.Table">
            <summary>
                The table on which the primary key is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabasePrimaryKey.Name">
            <summary>
                The name of the primary key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabasePrimaryKey.Columns">
            <summary>
                The ordered list of columns that make up the primary key.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabasePrimaryKey.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence">
            <summary>
                A simple model for a database sequence used when reverse engineering an existing database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.Database">
            <summary>
                The database that contains the sequence.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.Name">
            <summary>
                The sequence name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.Schema">
            <summary>
                The schema that contains the sequence, or <see langword="null" /> to use the default schema.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.StoreType">
            <summary>
                The database/store type of the sequence, or <see langword="null" /> if not set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.StartValue">
            <summary>
                The start value for the sequence, or <see langword="null" /> if not set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.IncrementBy">
            <summary>
                The amount to increment by to generate the next value in, the sequence, or <see langword="null" /> if not set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.MinValue">
            <summary>
                The minimum value supported by the sequence, or <see langword="null" /> if not set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.MaxValue">
            <summary>
                The maximum value supported by the sequence, or <see langword="null" /> if not set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.IsCyclic">
            <summary>
                Indicates whether or not the sequence will start over when the max value is reached, or <see langword="null" /> if not set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseSequence.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable">
            <summary>
                A simple model for a database table used when reverse engineering an existing database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.Database">
            <summary>
                The database that contains the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.Name">
            <summary>
                The table name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.Schema">
            <summary>
                The table schema, or <see langword="null" /> to use the default schema.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.Comment">
            <summary>
                The table comment, or <see langword="null" /> if none is set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.PrimaryKey">
            <summary>
                The primary key of the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.Columns">
            <summary>
                The ordered list of columns in the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.UniqueConstraints">
            <summary>
                The list of unique constraints defined on the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.Indexes">
            <summary>
                The list of indexes defined on the table.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.ForeignKeys">
            <summary>
                The list of foreign key constraints defined on the table.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseTable.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseUniqueConstraint">
            <summary>
                A simple model for a database unique constraint used when reverse engineering an existing database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseUniqueConstraint.Table">
            <summary>
                The table on which the unique constraint is defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseUniqueConstraint.Name">
            <summary>
                The name of the constraint.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseUniqueConstraint.Columns">
            <summary>
                The ordered list of columns that make up the constraint.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseUniqueConstraint.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.Metadata.DatabaseView">
            <summary>
                A simple model for a database view used when reverse engineering an existing database.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator">
            <summary>
                Generates provider-specific code fragments.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator.#ctor(Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator" /> class.
            </summary>
            <param name="dependencies"> The dependencies. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator.Dependencies">
            <summary>
                Parameter object containing dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator.GenerateProviderOptions">
            <summary>
                Generates a method chain used to configure provider-specific options.
            </summary>
            <returns> The method chain. May be null. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator.GenerateUseProvider(System.String,Microsoft.EntityFrameworkCore.Design.MethodCallCodeFragment)">
            <summary>
                Generates a code fragment like <c>.UseSqlServer("Database=Foo")</c> which can be used in
                the <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)" /> method of the generated DbContext.
            </summary>
            <param name="connectionString"> The connection string to include in the code fragment. </param>
            <param name="providerOptions"> The method chain used to configure provider options. </param>
            <returns> The code fragment. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator.GenerateContextOptions">
            <summary>
                Generates a method chain to configure additional context options.
            </summary>
            <returns> The method chain. May be null. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorDependencies.#ctor(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Scaffolding.IProviderCodeGeneratorPlugin})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGenerator" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorDependencies.Plugins">
            <summary>
                Gets the plugins.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorDependencies.With(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Scaffolding.IProviderCodeGeneratorPlugin})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="plugins"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorPlugin">
            <summary>
                Base class used by plugins to generate code fragments for reverse engineering.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorPlugin.GenerateContextOptions">
            <summary>
                Generates a method chain used to configure provider-specific options.
            </summary>
            <returns> The method chain. May be null. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Scaffolding.ProviderCodeGeneratorPlugin.GenerateProviderOptions">
            <summary>
                Generates a method chain to configure additional context options.
            </summary>
            <returns> The method chain. May be null. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.BoolTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Boolean" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.BoolTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.BoolTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.BoolTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.BoolTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.BoolTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.BoolTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ByteArrayTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Byte" /> array type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ByteArrayTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ByteArrayTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
            <param name="size"> The size of data the property is configured to store, or null if no size is configured. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ByteArrayTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ByteArrayTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ByteArrayTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ByteArrayTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ByteTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Byte" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ByteTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ByteTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ByteTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ByteTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ByteTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.CharTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Char" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CharTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CharTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CharTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CharTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CharTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.CharTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a non-null literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.DateTimeOffsetTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.DateTimeOffset" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DateTimeOffsetTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.DateTimeOffsetTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DateTimeOffsetTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.DateTimeOffsetTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DateTimeOffsetTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.DateTimeOffsetTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.DateTimeTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.DateTime" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DateTimeTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.DateTimeTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DateTimeTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.DateTimeTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DateTimeTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.DateTimeTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DbContextTransactionExtensions.GetDbTransaction(Microsoft.EntityFrameworkCore.Storage.IDbContextTransaction)">
            <summary>
                Gets the underlying <see cref="T:System.Data.Common.DbTransaction" /> for the given transaction. Throws if the database being targeted
                is not a relational database that uses <see cref="T:System.Data.Common.DbTransaction" />.
            </summary>
            <param name="dbContextTransaction"> The transaction to get the <see cref="T:System.Data.Common.DbTransaction" /> from. </param>
            <returns> The underlying <see cref="T:System.Data.Common.DbTransaction" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.DecimalTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Decimal" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DecimalTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.DecimalTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
            <param name="precision"> The precision of data the property is configured to store, or null if the default precision is required. </param>
            <param name="scale"> The scale of data the property is configured to store, or null if the default scale is required. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DecimalTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.DecimalTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DecimalTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.DecimalTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.DoubleTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Double" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DoubleTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.DoubleTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DoubleTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.DoubleTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DoubleTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.DoubleTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.FloatTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Single" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.FloatTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.FloatTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.FloatTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.FloatTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.FloatTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.FloatTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.GuidTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Guid" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.GuidTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.GuidTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.GuidTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.GuidTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.GuidTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.GuidTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.CompositeRelationalParameter">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.CompositeRelationalParameter.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.IRelationalParameter})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.CompositeRelationalParameter.InvariantName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.CompositeRelationalParameter.RelationalParameters">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.CompositeRelationalParameter.AddDbParameter(System.Data.Common.DbCommand,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions.FormatParameters(System.Data.Common.DbParameterCollection,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions.FormatParameter(System.Data.Common.DbParameter,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.DbParameterCollectionExtensions.FormatParameter(System.String,System.Object,System.Boolean,System.Data.ParameterDirection,System.Data.DbType,System.Boolean,System.Int32,System.Byte,System.Byte)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.DynamicRelationalParameter">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.DynamicRelationalParameter.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.DynamicRelationalParameter.InvariantName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.DynamicRelationalParameter.Name">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.DynamicRelationalParameter.AddDbParameter(System.Data.Common.DbCommand,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.INamedConnectionStringResolver">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.INamedConnectionStringResolver.ResolveConnectionString(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolver">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolver.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolver.ApplicationServiceProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolverBase">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolverBase.ApplicationServiceProvider">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.NamedConnectionStringResolverBase.ResolveConnectionString(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.RawRelationalParameter">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.RawRelationalParameter.#ctor(System.String,System.Data.Common.DbParameter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.RawRelationalParameter.InvariantName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.RawRelationalParameter.AddDbParameter(System.Data.Common.DbCommand,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.RawRelationalParameter.AddDbParameter(System.Data.Common.DbCommand,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.RawSqlCommandBuilder">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.RawSqlCommandBuilder.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.RawSqlCommandBuilder.Build(System.String)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.RawSqlCommandBuilder.Build(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalParameterBase">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalParameterBase.InvariantName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalParameterBase.AddDbParameter(System.Data.Common.DbCommand,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.RelationalParameterBase.AddDbParameter(System.Data.Common.DbCommand,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.TypedRelationalValueBufferFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.TypedRelationalValueBufferFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalValueBufferFactoryDependencies,System.Func{System.Data.Common.DbDataReader,System.Object[]})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.TypedRelationalValueBufferFactory.Create(System.Data.Common.DbDataReader)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedPropertyRelationalParameter">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedPropertyRelationalParameter.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedPropertyRelationalParameter.AddDbParameter(System.Data.Common.DbCommand,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedRelationalParameter">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedRelationalParameter.#ctor(System.String,System.String,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Nullable{System.Boolean})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedRelationalParameter.InvariantName">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedRelationalParameter.Name">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.Internal.TypeMappedRelationalParameter.AddDbParameter(System.Data.Common.DbCommand,System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IntTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Int32" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IntTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IntTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IntTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IntTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IntTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory">
            <summary>
                <para>
                    Creates instances of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory.Create">
            <summary>
                Gets a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator" />.
            </summary>
            <returns> The newly created <see cref="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder">
            <summary>
                <para>
                    Creates commands based on raw SQL command text.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder.Build(System.String)">
            <summary>
                Creates a new command based on SQL command text.
            </summary>
            <param name="sql"> The command text. </param>
            <returns> The newly created command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRawSqlCommandBuilder.Build(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
                Creates a new command based on SQL command text.
            </summary>
            <param name="sql"> The command text. </param>
            <param name="parameters"> Parameters for the command. </param>
            <returns> The newly created command. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand">
            <summary>
                <para>
                    A command to be executed against a relational database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.CommandText">
            <summary>
                Gets the command text to be executed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.Parameters">
            <summary>
                Gets the parameters for the command.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject)">
            <summary>
                Executes the command with no results.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <returns> The number of rows affected. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,System.Threading.CancellationToken)">
            <summary>
                Asynchronously executes the command with no results.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the number of rows affected.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject)">
            <summary>
                Executes the command with a single scalar result.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <returns> The result of the command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,System.Threading.CancellationToken)">
            <summary>
                Asynchronously executes the command with a single scalar result.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the result of the command.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject)">
            <summary>
                Executes the command with a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> result.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <returns> The result of the command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,System.Threading.CancellationToken)">
            <summary>
                Asynchronously executes the command with a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> result.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the result of the command.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand.CreateDbCommand(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,System.Guid,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod)">
            <summary>
                <para>
                    Called by the execute methods to create a <see cref="T:System.Data.Common.DbCommand" /> for the given <see cref="T:System.Data.Common.DbConnection" />
                    and configure timeouts and transactions.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <param name="commandId"> The command correlation ID. </param>
            <param name="commandMethod"> The method that will be called on the created command. </param>
            <returns> The created command. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder">
            <summary>
                <para>
                    Builds a command to be executed against a relational database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder.Parameters">
            <summary>
                The collection of parameters.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalParameter)">
            <summary>
                Adds the given parameter to this command.
            </summary>
            <param name="parameter"> The parameter. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder.TypeMappingSource">
            <summary>
                The source for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />s to use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder.Build">
            <summary>
                Creates the command.
            </summary>
            <returns> The newly created command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder.Append(System.String)">
            <summary>
                Appends an object to the command text.
            </summary>
            <param name="value"> The object to be written. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder.AppendLine">
            <summary>
                Appends a blank line to the command text.
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder.IncrementIndent">
            <summary>
                Increments the indent of subsequent lines.
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder.DecrementIndent">
            <summary>
                Decrements the indent of subsequent lines.
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder.CommandTextLength">
            <summary>
                Gets the length of the command text.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory">
            <summary>
                <para>
                    Creates instances of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" /> class.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory.Create">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />.
            </summary>
            <returns> The newly created builder. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection">
            <summary>
                <para>
                    Represents a connection with a relational database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ConnectionString">
            <summary>
                Gets or sets the connection string for the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.DbConnection">
            <summary>
                <para>
                    Gets or sets the underlying <see cref="T:System.Data.Common.DbConnection" /> used to connect to the database.
                </para>
                <para>
                    The connection can only be changed when the existing connection, if any, is not open.
                </para>
                <para>
                    Note that the connection must be disposed by application code since it was not created by Entity Framework.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Context">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently in use, or null if not known.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.ConnectionId">
            <summary>
                Gets the connection identifier.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.CommandTimeout">
            <summary>
                Gets the timeout for executing a command against the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Open(System.Boolean)">
            <summary>
                Opens the connection to the database.
            </summary>
            <param name="errorsExpected"> Indicate if the connection errors are expected and should be logged as debug message. </param>
            <returns> <see langword="true" /> if the underlying connection was actually opened; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.OpenAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
                Asynchronously opens the connection to the database.
            </summary>
            <param name="errorsExpected"> Indicate if the connection errors are expected and should be logged as debug message. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation, with a value of <see langword="true" /> if the connection
                was actually opened.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Close">
            <summary>
                Closes the connection to the database.
            </summary>
            <returns> <see langword="true" /> if the underlying connection was actually closed; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.CloseAsync">
            <summary>
                Closes the connection to the database.
            </summary>
            <returns>
                A task that represents the asynchronous operation, with a value of <see langword="true" /> if the connection
                was actually closed.
            </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.CurrentTransaction">
            <summary>
                Gets the current transaction.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection.Semaphore">
            <summary>
                Gets a semaphore used to serialize access to this connection.
            </summary>
            <value>
                The semaphore.
            </value>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator">
            <summary>
                <para>
                    Performs database/schema creation, and other related operations.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Exists">
            <summary>
                Determines whether the physical database exists. No attempt is made to determine if the database
                contains the schema for the current model.
            </summary>
            <returns>
                <see langword="true" /> if the database exists; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether the physical database exists. No attempt is made to determine if
                the database contains the schema for the current model.
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation. The task result contains
                <see langword="true" /> if the database exists; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.HasTables">
            <summary>
                Determines whether the database contains any tables. No attempt is made to determine if
                tables belong to the current model or not.
            </summary>
            <returns> A value indicating whether any tables are present in the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether the database contains any tables. No attempt is made to determine if
                tables belong to the current model or not.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains
                a value indicating whether any tables are present in the database.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Create">
            <summary>
                Creates the physical database. Does not attempt to populate it with any schema.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates the physical database. Does not attempt to populate it with any schema.
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.Delete">
            <summary>
                Deletes the physical database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously deletes the physical database.
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTables">
            <summary>
                Creates all tables for the current model in the database. No attempt is made
                to incrementally update the schema. It is assumed that none of the tables exist in the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates all tables for the current model in the database. No attempt is made
                to incrementally update the schema. It is assumed that none of the tables exist in the database.
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseCreator.GenerateCreateScript">
            <summary>
                Generates a script to create all tables for the current model.
            </summary>
            <returns>
                A SQL script.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseFacadeDependencies">
            <summary>
                <para>
                    Exposes dependencies needed by <see cref="T:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade" /> and its relational extension methods.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseFacadeDependencies.RelationalConnection">
            <summary>
                The relational connection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalDatabaseFacadeDependencies.RawSqlCommandBuilder">
            <summary>
                The raw SQL command builder.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter">
            <summary>
                <para>
                    A parameter in an <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommand" />. Note that this interface just represents a
                    placeholder for a parameter and not the actual value. This is because the same command can be
                    reused multiple times with different parameter values.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter.InvariantName">
            <summary>
                The name of the parameter.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter.AddDbParameter(System.Data.Common.DbCommand,System.Object)">
            <summary>
                Adds the parameter as a <see cref="T:System.Data.Common.DbParameter" /> to a <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
            <param name="command"> The command to add the parameter to. </param>
            <param name="value"> The value to be assigned to the parameter. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter.AddDbParameter(System.Data.Common.DbCommand,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                Adds the parameter as a <see cref="T:System.Data.Common.DbParameter" /> to a <see cref="T:System.Data.Common.DbCommand" />.
            </summary>
            <param name="command"> The command to add the parameter to. </param>
            <param name="parameterValues"> The map of parameter values </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionFactory">
            <summary>
                <para>
                    A factory for creating <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> instances.
                </para>
                <para>
                    This type is typically used by database providers It is generally not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionFactory.Create(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},System.Boolean)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> instance.
            </summary>
            <param name="connection"> The connection to the database. </param>
            <param name="transaction"> The underlying <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="transactionId"> The unique correlation ID for this transaction. </param>
            <param name="logger"> The logger to write to. </param>
            <param name="transactionOwned">
                A value indicating whether the transaction is owned by this class (i.e. if it can be disposed when this class is disposed).
            </param>
            <returns> A new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> instance. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager">
            <summary>
                <para>
                    Creates and manages the current transaction for a relational database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
                Begins a new transaction.
            </summary>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <returns> The newly created transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
                Asynchronously begins a new transaction.
            </summary>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A task that represents the asynchronous operation. The task result contains the newly created transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction(System.Data.Common.DbTransaction)">
            <summary>
                Specifies an existing <see cref="T:System.Data.Common.DbTransaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
            <returns> An instance of <see cref="T:System.Data.IDbTransaction" /> that wraps the provided transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransaction(System.Data.Common.DbTransaction,System.Guid)">
            <summary>
                Specifies an existing <see cref="T:System.Data.Common.DbTransaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
            <param name="transactionId"> The unique identifier for the transaction. </param>
            <returns> An instance of <see cref="T:System.Data.IDbTransaction" /> that wraps the provided transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransactionAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
                Specifies an existing <see cref="T:System.Data.Common.DbTransaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> An instance of <see cref="T:System.Data.IDbTransaction" /> that wraps the provided transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionManager.UseTransactionAsync(System.Data.Common.DbTransaction,System.Guid,System.Threading.CancellationToken)">
            <summary>
                Specifies an existing <see cref="T:System.Data.Common.DbTransaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
            <param name="transactionId"> The unique identifier for the transaction. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> An instance of <see cref="T:System.Data.IDbTransaction" /> that wraps the provided transaction. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource">
            <summary>
                <para>
                    The relational type mapping interface for EF Core, starting with version 2.1. Type mappings describe how a
                    provider maps CLR types/values to database types/values.
                </para>
                <para>
                    Warning: do not implement this interface directly. Instead, derive from <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
            </summary>
            <param name="property"> The property. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Reflection.MemberInfo)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Reflection.MemberInfo" /> representing
                    a field or a property of a CLR type.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                </para>
            </summary>
            <param name="member"> The field or property. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Type)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Type" />.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                    or <see cref="T:System.Reflection.MemberInfo" /> available, otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Reflection.MemberInfo)" />
                </para>
            </summary>
            <param name="type"> The CLR type. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.String)">
            <summary>
                <para>
                    Finds the type mapping for a given database type name.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                </para>
            </summary>
            <param name="storeTypeName"> The database type name. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(System.Type,System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Type" /> and additional facets.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                </para>
            </summary>
            <param name="type"> The CLR type. </param>
            <param name="storeTypeName"> The database type name. </param>
            <param name="keyOrIndex"> If <see langword="true" />, then a special mapping for a key or index may be returned. </param>
            <param name="unicode">
                Specify <see langword="true" /> for Unicode mapping, <see langword="false" /> for Ansi mapping or <see langword="null" /> for the
                default.
            </param>
            <param name="size"> Specifies a size for the mapping, or <see langword="null" /> for default. </param>
            <param name="rowVersion"> Specifies a row-version, or <see langword="null" /> for default. </param>
            <param name="fixedLength"> Specifies a fixed length mapping, or <see langword="null" /> for default. </param>
            <param name="precision"> Specifies a precision for the mapping, or <see langword="null" /> for default. </param>
            <param name="scale"> Specifies a scale for the mapping, or <see langword="null" /> for default. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSourcePlugin">
            <summary>
                <para>
                    Represents a plugin relational type mapping source.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" /> and multiple registrations
                    are allowed. This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" />
                    instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSourcePlugin.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)">
            <summary>
                Finds a type mapping for the given info.
            </summary>
            <param name="mappingInfo"> The mapping info to use to create the mapping. </param>
            <returns> The type mapping, or <see langword="null" /> if none could be found. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory">
            <summary>
                <para>
                    Creates instances of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" /> type. An <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" />
                    is tied to a particular result shape and will only create value buffers for that result shape. Instances
                    for different result shapes are created by <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory.Create(System.Data.Common.DbDataReader)">
            <summary>
                Creates a value buffer for the given <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
            <param name="dataReader"> The reader to create a value buffer for. </param>
            <returns> The newly created value buffer. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory">
            <summary>
                <para>
                    Creates instances of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" /> type. <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" />
                    instances are tied to a specific result shape. This factory is responsible for creating the
                    <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" /> for a given result shape.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory.Create(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" />.
            </summary>
            <param name="types"> Types and mapping for the values to be read. </param>
            <returns> The newly created <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory" />. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper">
            <summary>
                <para>
                    Provides services to help with generation of SQL commands.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.StatementTerminator">
            <summary>
                The terminator to be used for SQL statements.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.BatchTerminator">
            <summary>
                The terminator to be used for batches of SQL statements.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.StartTransactionStatement">
            <summary>
                Gets the SQL for a START TRANSACTION statement.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.CommitTransactionStatement">
            <summary>
                Gets the SQL for a COMMIT statement.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.SingleLineCommentToken">
            <summary>
                The default single-line comment prefix.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.GenerateParameterName(System.String)">
            <summary>
                Generates a valid parameter name for the given candidate name.
            </summary>
            <param name="name">
                The candidate name for the parameter.
            </param>
            <returns> A valid name based on the candidate name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.GenerateParameterName(System.Text.StringBuilder,System.String)">
            <summary>
                Writes a valid parameter name for the given candidate name.
            </summary>
            <param name="builder"> The <see cref="T:System.Text.StringBuilder" /> to write generated string to. </param>
            <param name="name">
                The candidate name for the parameter.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.GenerateParameterNamePlaceholder(System.String)">
            <summary>
                Generates a valid parameter placeholder name for the given candidate name.
            </summary>
            <param name="name">
                The candidate name for the parameter placeholder.
            </param>
            <returns> A valid placeholder name based on the candidate name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.GenerateParameterNamePlaceholder(System.Text.StringBuilder,System.String)">
            <summary>
                Writes a valid parameter placeholder name for the given candidate name.
            </summary>
            <param name="builder"> The <see cref="T:System.Text.StringBuilder" /> to write generated string to. </param>
            <param name="name">
                The candidate name for the parameter placeholder.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.DelimitIdentifier(System.String)">
            <summary>
                Generates the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="identifier"> The identifier to delimit. </param>
            <returns> The generated string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
                Writes the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="builder"> The <see cref="T:System.Text.StringBuilder" /> to write generated string to. </param>
            <param name="identifier"> The identifier to delimit. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.DelimitIdentifier(System.String,System.String)">
            <summary>
                Generates the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="name"> The identifier to delimit. </param>
            <param name="schema"> The schema of the identifier. </param>
            <returns> The generated string. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                Writes the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="builder"> The <see cref="T:System.Text.StringBuilder" /> to write generated string to. </param>
            <param name="name"> The identifier to delimit. </param>
            <param name="schema"> The schema of the identifier. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper.GenerateComment(System.String)">
            <summary>
                Generates a SQL comment.
            </summary>
            <param name="text"> The comment text. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.LongTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Int64" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.LongTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.LongTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.LongTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.LongTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.LongTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator">
            <summary>
                <para>
                    Generates unique names for parameters.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator.GenerateNext">
            <summary>
                Generates the next unique parameter name.
            </summary>
            <returns> The generated name. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator.Reset">
            <summary>
                Resets the generator, meaning it can reuse previously generated names.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorFactory" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
                    This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorFactory" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorFactory">
            <summary>
                <para>
                    Creates instances of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator" /> type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorFactory" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ParameterNameGeneratorFactory.Create">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.ParameterNameGenerator" />.
            </summary>
            <returns> The newly created generator. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RawSqlCommand">
            <summary>
                <para>
                    Represents a raw SQL command to be executed against a relational database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RawSqlCommand.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommand,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RawSqlCommand" /> class.
            </summary>
            <param name="relationalCommand"> The command to be executed. </param>
            <param name="parameterValues"> The values to be assigned to parameters. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RawSqlCommand.RelationalCommand">
            <summary>
                Gets the command to be executed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RawSqlCommand.ParameterValues">
            <summary>
                Gets the values to be assigned to parameters.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn">
            <summary>
                <para>
                    An expected column in the relational data reader.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ReaderColumn.#ctor(System.Type,System.Boolean,System.String)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn" /> class.
            </summary>
            <param name="type"> The CLR type of the column. </param>
            <param name="nullable"> A value indicating if the column is nullable. </param>
            <param name="name"> The name of the column. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ReaderColumn.#ctor(System.Type,System.Boolean,System.String,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn" /> class.
            </summary>
            <param name="type"> The CLR type of the column. </param>
            <param name="nullable"> A value indicating if the column is nullable. </param>
            <param name="name"> The name of the column. </param>
            <param name="property"> The property being read if any, null otherwise. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ReaderColumn.Type">
            <summary>
                The CLR type of the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ReaderColumn.IsNullable">
            <summary>
                A value indicating if the column is nullable.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ReaderColumn.Name">
            <summary>
                The name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ReaderColumn.Property">
            <summary>
                The property being read if any, null otherwise.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ReaderColumn.Create(System.Type,System.Boolean,System.String,System.Object)">
            <summary>
                Creates an instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1" />.
            </summary>
            <param name="type"> The type of the column. </param>
            <param name="nullable"> Whether the column can contain <see langword="null" /> values. </param>
            <param name="columnName"> The column name if it is used to access the column values, <see langword="null" /> otherwise.</param>
            <param name="readFunc">
                A <see cref="T:System.Func{DbDataReader, Int32[], T}" /> used to get the field value for this column.
            </param>
            <returns> An instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1" />.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ReaderColumn.Create(System.Type,System.Boolean,System.String,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Object)">
            <summary>
                Creates an instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1" />.
            </summary>
            <param name="type"> The type of the column. </param>
            <param name="nullable"> Whether the column can contain <see langword="null" /> values. </param>
            <param name="columnName"> The column name if it is used to access the column values, <see langword="null" /> otherwise.</param>
            <param name="property"> The property being read if any, null otherwise. </param>
            <param name="readFunc">
                A <see cref="T:System.Func{DbDataReader, Int32[], T}" /> used to get the field value for this column.
            </param>
            <returns> An instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1" />.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1">
            <summary>
                <para>
                    An expected column in the relational data reader.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1.#ctor(System.Boolean,System.String,System.Func{System.Data.Common.DbDataReader,System.Int32[],`0})">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1" /> class.
            </summary>
            <param name="nullable"> A value indicating if the column is nullable. </param>
            <param name="name"> The name of the column. </param>
            <param name="getFieldValue"> A function to get field value for the column from the reader. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1.#ctor(System.Boolean,System.String,Microsoft.EntityFrameworkCore.Metadata.IPropertyBase,System.Func{System.Data.Common.DbDataReader,System.Int32[],`0})">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1" /> class.
            </summary>
            <param name="nullable"> A value indicating if the column is nullable. </param>
            <param name="name"> The name of the column. </param>
            <param name="property"> The property being read if any, null otherwise. </param>
            <param name="getFieldValue"> A function to get field value for the column from the reader. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ReaderColumn`1.GetFieldValue">
            <summary>
                The function to get field value for the column from the reader.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommand">
            <summary>
                <para>
                    A command to be executed against a relational database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.IRelationalParameter})">
            <summary>
                <para>
                    Constructs a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommand" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="dependencies"> Service dependencies. </param>
            <param name="commandText"> The text of the command to be executed. </param>
            <param name="parameters"> Parameters for the command. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.Dependencies">
            <summary>
                Command building dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.CommandText">
            <summary>
                Gets the command text to be executed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.Parameters">
            <summary>
                Gets the parameters for the command.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQuery(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject)">
            <summary>
                Executes the command with no results.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <returns> The number of rows affected. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteNonQueryAsync(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,System.Threading.CancellationToken)">
            <summary>
                Asynchronously executes the command with no results.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the number of rows affected.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteScalar(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject)">
            <summary>
                Executes the command with a single scalar result.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <returns> The result of the command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteScalarAsync(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,System.Threading.CancellationToken)">
            <summary>
                Asynchronously executes the command with a single scalar result.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the result of the command.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject)">
            <summary>
                Executes the command with a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> result.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <returns> The result of the command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,System.Threading.CancellationToken)">
            <summary>
                Asynchronously executes the command with a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> result.
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the result of the command.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.CreateDbCommand(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,System.Guid,Microsoft.EntityFrameworkCore.Diagnostics.DbCommandMethod)">
            <summary>
                <para>
                    Called by the execute methods to
                    create a <see cref="T:System.Data.Common.DbCommand" /> for the given <see cref="T:System.Data.Common.DbConnection" /> and configure
                    timeouts and transactions.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="parameterObject"> Parameters for this method. </param>
            <param name="commandId"> The command correlation ID. </param>
            <param name="commandMethod"> The method that will be called on the created command. </param>
            <returns> The created command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.CreateRelationalDataReader(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Guid,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                <para>
                    Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> to be used by <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReader(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject)" /> and <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommand.ExecuteReaderAsync(Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject,System.Threading.CancellationToken)" />.
                </para>
                <para>
                    This method is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="connection">The connection, to pass to the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> constructor.</param>
            <param name="command">The command that was executed, to pass to the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> constructor.</param>
            <param name="reader">The underlying reader for the result set, to pass to the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> constructor.</param>
            <param name="commandId">
                A correlation ID that identifies the <see cref="T:System.Data.Common.DbCommand" /> instance being used, to pass to the
                <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> constructor.
            </param>
            <param name="logger">The diagnostic source, to pass to the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> constructor.</param>
            <returns>The created <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" />.</returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder">
            <summary>
                <para>
                    Builds a command to be executed against a relational database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies)">
            <summary>
                <para>
                    Constructs a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommand" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.TypeMappingSource">
            <summary>
                The source for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />s to use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.Build">
            <summary>
                Creates the command.
            </summary>
            <returns> The newly created command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.ToString">
            <summary>
                Gets the command text.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.Parameters">
            <summary>
                The collection of parameters.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalParameter)">
            <summary>
                Adds the given parameter to this command.
            </summary>
            <param name="parameter"> The parameter. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.Append(System.String)">
            <summary>
                Appends an object to the command text.
            </summary>
            <param name="value"> The object to be written. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.AppendLine">
            <summary>
                Appends a blank line to the command text.
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.IncrementIndent">
            <summary>
                Increments the indent of subsequent lines.
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.DecrementIndent">
            <summary>
                Decrements the indent of subsequent lines.
            </summary>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder.CommandTextLength">
            <summary>
                Gets the length of the command text.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies.TypeMappingSource">
            <summary>
                The source for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />s to use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource">A replacement for the current dependency of this type.</param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions">
            <summary>
                Extension methods for the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLine(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String)">
            <summary>
                Appends an object to the command text on a new line.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <param name="value"> The object to be written. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AppendLines(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.Boolean)">
            <summary>
                Appends an object, that contains multiple lines of text, to the command text.
                Each line read from the object is appended on a new line.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <param name="value"> The object to be written. </param>
            <param name="skipFinalNewline"> If <see langword="true" />, then the final newline character is skipped. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.Indent(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder)">
            <summary>
                Increases the indent of the command text.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String)">
            <summary>
                Adds a parameter.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
            <param name="name">
                The name to be used for the parameter when the command is executed against the database.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean)">
            <summary>
                Adds a parameter.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
            <param name="name">
                The name to be used for the parameter when the command is executed against the database.
            </param>
            <param name="typeMapping">
                The type mapping for the property that values for this parameter will come from.
            </param>
            <param name="nullable">
                A value indicating whether the parameter can contain null values.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Adds a parameter.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
            <param name="name">
                The name to be used for the parameter when the command is executed against the database.
            </param>
            <param name="property"> The property that the type for this parameter will come from. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Nullable{System.Boolean})">
            <summary>
                Adds a parameter.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
            <param name="name">
                The name to be used for the parameter when the command is executed against the database.
            </param>
            <param name="relationalTypeMapping"> The relational type mapping for this parameter. </param>
            <param name="nullable"> A value indicating whether the parameter could contain a null value. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddCompositeParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.IRelationalParameter})">
            <summary>
                Adds a parameter that is ultimately represented as multiple <see cref="T:System.Data.Common.DbParameter" />s in the
                final command.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
            <param name="subParameters"> The parameters to include in the composite. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddRawParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.Data.Common.DbParameter)">
            <summary>
                Adds a parameter.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
            <param name="dbParameter"> The DbParameter being added. </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderExtensions.AddPropertyParameter(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder,System.String,System.String,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Adds a parameter.
            </summary>
            <param name="commandBuilder"> The command builder. </param>
            <param name="invariantName">
                The key that identifies this parameter. Note that <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalParameter" /> just represents a
                placeholder for a parameter and not the actual value. This is because the same command can be
                reused multiple times with different parameter values.
            </param>
            <param name="name">
                The name to be used for the parameter when the command is executed against the database.
            </param>
            <param name="property">
                The property that values for this parameter will come from.
            </param>
            <returns> The same builder instance so that multiple calls can be chained. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderFactory">
            <summary>
                <para>
                    Factory for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilder" /> instances.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderDependencies)">
            <summary>
                <para>
                    Constructs a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommand" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderFactory.Dependencies">
            <summary>
                Dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandBuilderFactory.Create">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilder" />.
            </summary>
            <returns> The newly created builder. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject">
            <summary>
                <para>
                    A parameter object for the execution methods on <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalCommand" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                <para>
                    Creates a new parameter object for the given parameters.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="connection"> The connection on which the command will execute. </param>
            <param name="parameterValues"> The SQL parameter values to use, or null if none. </param>
            <param name="readerColumns"> The expected columns if the reader needs to be buffered, or null otherwise. </param>
            <param name="context"> The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance, or null if it is not known. </param>
            <param name="logger"> A logger, or null if no logger is available. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Collections.Generic.IReadOnlyDictionary{System.String,System.Object},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.ReaderColumn},Microsoft.EntityFrameworkCore.DbContext,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command},System.Boolean)">
            <summary>
                <para>
                    Creates a new parameter object for the given parameters.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
            <param name="connection"> The connection on which the command will execute. </param>
            <param name="parameterValues"> The SQL parameter values to use, or null if none. </param>
            <param name="readerColumns"> The expected columns if the reader needs to be buffered, or null otherwise. </param>
            <param name="context"> The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance, or null if it is not known. </param>
            <param name="logger"> A logger, or null if no logger is available. </param>
            <param name="detailedErrorsEnabled"> A value indicating if detailed errors are enabled. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject.Connection">
            <summary>
                The connection on which the command will execute.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject.ParameterValues">
            <summary>
                The SQL parameter values to use, or null if none.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject.ReaderColumns">
            <summary>
                The expected columns if the reader needs to be buffered, or null otherwise.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject.Context">
            <summary>
                The current <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance, or null if it is not known.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject.Logger">
            <summary>
                A logger, or null if no logger is available.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalCommandParameterObject.DetailedErrorsEnabled">
            <summary>
                A value indicating if detailed errors are enabled.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalConnection">
            <summary>
                <para>
                    Represents a connection with a relational database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalConnection" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ConnectionId">
            <summary>
                The unique identifier for this connection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Context">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently in use, or null if not known.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CreateDbConnection">
            <summary>
                Creates a <see cref="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection" /> to the database.
            </summary>
            <returns> The connection. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.ConnectionString">
            <summary>
                Gets or sets the connection string for the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.GetValidatedConnectionString">
            <summary>
                Returns the configured connection string only if it has been set or a valid <see cref="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection" /> exists.
            </summary>
            <returns> The connection string. </returns>
            <exception cref="T:System.InvalidOperationException"> when connection string cannot be obtained. </exception>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DbConnection">
            <summary>
                <para>
                    Gets or sets the underlying <see cref="T:System.Data.Common.DbConnection" /> used to connect to the database.
                </para>
                <para>
                    The connection can only be changed when the existing connection, if any, is not open.
                </para>
                <para>
                    Note that a connection set must be disposed by application code since it was not created by Entity Framework.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CurrentTransaction">
            <summary>
                Gets the current transaction.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.EnlistedTransaction">
            <summary>
                The currently enlisted transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.EnlistTransaction(System.Transactions.Transaction)">
            <summary>
                Specifies an existing <see cref="T:System.Transactions.Transaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.SupportsAmbientTransactions">
            <summary>
                Indicates whether the store connection supports ambient transactions
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommandTimeout">
            <summary>
                Gets the timeout for executing a command against the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction">
            <summary>
                Begins a new transaction.
            </summary>
            <returns> The newly created transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously begins a new transaction.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the newly created transaction.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
                Begins a new transaction.
            </summary>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <returns> The newly created transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
                Asynchronously begins a new transaction.
            </summary>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains the newly created transaction.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.UseTransaction(System.Data.Common.DbTransaction)">
            <summary>
                Specifies an existing <see cref="T:System.Data.Common.DbTransaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
            <returns> An instance of <see cref="T:System.Data.IDbTransaction" /> that wraps the provided transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.UseTransaction(System.Data.Common.DbTransaction,System.Guid)">
            <summary>
                Specifies an existing <see cref="T:System.Data.Common.DbTransaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
            <param name="transactionId"> The unique identifier for the transaction. </param>
            <returns> An instance of <see cref="T:System.Data.IDbTransaction" /> that wraps the provided transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.UseTransactionAsync(System.Data.Common.DbTransaction,System.Threading.CancellationToken)">
            <summary>
                Specifies an existing <see cref="T:System.Data.Common.DbTransaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns> An instance of <see cref="T:System.Data.IDbTransaction" /> that wraps the provided transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.UseTransactionAsync(System.Data.Common.DbTransaction,System.Guid,System.Threading.CancellationToken)">
            <summary>
                Specifies an existing <see cref="T:System.Data.Common.DbTransaction" /> to be used for database operations.
            </summary>
            <param name="transaction"> The transaction to be used. </param>
            <param name="transactionId"> The unique identifier for the transaction. </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
            <returns> An instance of <see cref="T:System.Data.IDbTransaction" /> that wraps the provided transaction. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommitTransaction">
            <summary>
                Commits all changes made to the database in the current transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CommitTransactionAsync(System.Threading.CancellationToken)">
            <summary>
                Commits all changes made to the database in the current transaction.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A Task representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.RollbackTransaction">
            <summary>
                Discards all changes made to the database in the current transaction.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.RollbackTransactionAsync(System.Threading.CancellationToken)">
            <summary>
                Discards all changes made to the database in the current transaction.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A Task representing the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Open(System.Boolean)">
            <summary>
                Opens the connection to the database.
            </summary>
            <param name="errorsExpected">
                Indicates if the connection errors are expected and should be logged as debug message.
            </param>
            <returns> <see langword="true" /> if the underlying connection was actually opened; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenAsync(System.Threading.CancellationToken,System.Boolean)">
            <summary>
                Asynchronously opens the connection to the database.
            </summary>
            <param name="errorsExpected"> Indicate if the connection errors are expected and should be logged as debug message. </param>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation, with a value of <see langword="true" /> if the connection
                was actually opened.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenDbConnection(System.Boolean)">
            <summary>
                Template method that by default calls <see cref="M:System.Data.Common.DbConnection.Open" /> but can be overriden
                by providers to make a different call instead.
            </summary>
            <param name="errorsExpected"> Indicates if the connection errors are expected and should be logged as debug message. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.OpenDbConnectionAsync(System.Boolean,System.Threading.CancellationToken)">
            <summary>
                Template method that by default calls <see cref="M:System.Data.Common.DbConnection.OpenAsync" /> but can be overriden
                by providers to make a different call instead.
            </summary>
            <param name="errorsExpected"> Indicates if the connection errors are expected and should be logged as debug message. </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Close">
            <summary>
                Closes the connection to the database.
            </summary>
            <returns> <see langword="true" /> if the underlying connection was actually closed; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.CloseAsync">
            <summary>
                Closes the connection to the database.
            </summary>
            <returns>
                A task that represents the asynchronous operation, with a value of <see langword="true" /> if the connection
                was actually closed.
            </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Semaphore">
            <summary>
                Gets a semaphore used to serialize access to this connection.
            </summary>
            <value>
                The semaphore used to serialize access to this connection.
            </value>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnection.DisposeAsync">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalConnection" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection},Microsoft.EntityFrameworkCore.Storage.Internal.INamedConnectionStringResolver,Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionFactory,Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalConnection" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.ContextOptions">
            <summary>
                The options for the current context instance.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.TransactionLogger">
            <summary>
                The logger to which transaction messages will be written.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.ConnectionLogger">
            <summary>
                The logger to which connection messages will be written.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.ConnectionStringResolver">
            <summary>
                A service for resolving a connection string from a name.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.RelationalTransactionFactory">
            <summary>
                A service for creating <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> instances.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.CurrentContext">
            <summary>
                Contains the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance currently in use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="contextOptions"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Connection})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="connectionLogger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="transactionLogger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.With(Microsoft.EntityFrameworkCore.Storage.Internal.INamedConnectionStringResolver)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="connectionStringResolver"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTransactionFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="relationalTransactionFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalConnectionDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="currentContext"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase">
            <summary>
                <para>
                    The main interaction point between a context and the database provider.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.#ctor(Microsoft.EntityFrameworkCore.Storage.DatabaseDependencies,Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for the base of this service. </param>
            <param name="relationalDependencies"> Parameter object containing relational dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.RelationalDependencies">
            <summary>
                Parameter object containing relational dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChanges(System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})">
            <summary>
                Persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <returns> The number of state entries persisted to the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase.SaveChangesAsync(System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},System.Threading.CancellationToken)">
            <summary>
                Asynchronously persists changes from the supplied entries to the database.
            </summary>
            <param name="entries"> Entries representing the changes to be persisted. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                number of entries persisted to the database.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator">
            <summary>
                <para>
                    Performs database/schema creation, and other related operations.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Exists">
            <summary>
                Determines whether the physical database exists. No attempt is made to determine if the database
                contains the schema for the current model.
            </summary>
            <returns>
                <see langword="true" /> if the database exists; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.ExistsAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether the physical database exists. No attempt is made to determine if
                the database contains the schema for the current model.
            </summary>
            <param name="cancellationToken">
                A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.
            </param>
            <returns>
                A task that represents the asynchronous operation. The task result contains
                <see langword="true" /> if the database exists; otherwise <see langword="false" />.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Create">
            <summary>
                Creates the physical database. Does not attempt to populate it with any schema.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates the physical database. Does not attempt to populate it with any schema.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.Delete">
            <summary>
                Deletes the physical database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.DeleteAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously deletes the physical database.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTables">
            <summary>
                Creates all tables for the current model in the database. No attempt is made
                to incrementally update the schema. It is assumed that none of the tables exist in the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CreateTablesAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously creates all tables for the current model in the database. No attempt is made
                to incrementally update the schema. It is assumed that none of the tables exist in the database.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GetCreateTablesCommands(Microsoft.EntityFrameworkCore.Migrations.MigrationsSqlGenerationOptions)">
            <summary>
                Gets the commands that will create all tables from the model.
            </summary>
            <param name="options"> The options to use when generating commands. </param>
            <returns> The generated commands. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTables">
            <summary>
                Determines whether the database contains any tables. No attempt is made to determine if
                tables belong to the current model or not.
            </summary>
            <returns> A value indicating whether any tables are present in the database. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.HasTablesAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously determines whether the database contains any tables. No attempt is made to determine if
                tables belong to the current model or not.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation. The task result contains
                a value indicating whether any tables are present in the database.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeleted">
            <summary>
                <para>
                    Ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
            </summary>
            <returns>
                <see langword="true" /> if the database is deleted, <see langword="false" /> if it did not exist.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureDeletedAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Asynchronously ensures that the database for the context does not exist. If it does not exist, no action is taken. If it does
                    exist then the database is deleted.
                </para>
                <para>
                    Warning: The entire database is deleted an no effort is made to remove just the database objects that are used by
                    the model for this context.
                </para>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains <see langword="true" />
                if the database is deleted, <see langword="false" /> if it did not exist.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreated">
            <summary>
                Ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
            <returns>
                <see langword="true" /> if the database is created, <see langword="false" /> if it already existed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.EnsureCreatedAsync(System.Threading.CancellationToken)">
            <summary>
                Asynchronously ensures that the database for the context exists. If it exists, no action is taken. If it does not
                exist then the database and all its schema are created. If the database exists, then no effort is made
                to ensure it is compatible with the model for this context.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains <see langword="true" />
                if the database is created, <see langword="false" /> if it already existed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.GenerateCreateScript">
            <summary>
                Generates a script to create all tables for the current model.
            </summary>
            <returns>
                A SQL script.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CanConnect">
            <summary>
                <para>
                    Determines whether or not the database is available and can be connected to.
                </para>
                <para>
                    Any exceptions thrown when attempting to connect are caught and not propagated to the application.
                </para>
                <para>
                    The configured connection string is used to create the connection in the normal way, so all
                    configured options such as timeouts are honored.
                </para>
                <para>
                    Note that being able to connect to the database does not mean that it is
                    up-to-date with regard to schema creation, etc.
                </para>
            </summary>
            <returns> <see langword="true" /> if the database is available; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator.CanConnectAsync(System.Threading.CancellationToken)">
            <summary>
                <para>
                    Determines whether or not the database is available and can be connected to.
                </para>
                <para>
                    Any exceptions thrown when attempting to connect are caught and not propagated to the application.
                </para>
                <para>
                    The configured connection string is used to create the connection in the normal way, so all
                    configured options such as timeouts are honored.
                </para>
                <para>
                    Note that being able to connect to the database does not mean that it is
                    up-to-date with regard to schema creation, etc.
                </para>
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> <see langword="true" /> if the database is available; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.#ctor(Microsoft.EntityFrameworkCore.Metadata.IModel,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer,Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator,Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory,Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreator" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.ModelDiffer">
            <summary>
                The model differ.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.MigrationsSqlGenerator">
            <summary>
                The Migrations SQL generator.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.Model">
            <summary>
                Gets the model for the context this creator is being used with.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.Connection">
            <summary>
                Gets the connection for the database.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.MigrationCommandExecutor">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor" /> to be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.SqlGenerationHelper">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper" /> to be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.ExecutionStrategyFactory">
            <summary>
                Gets the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory" /> to be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.CommandLogger">
            <summary>
                The command logger.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.CurrentContext">
            <summary>
                Contains the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently in use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.With(Microsoft.EntityFrameworkCore.Metadata.IModel)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="model"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="connection"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.With(Microsoft.EntityFrameworkCore.Migrations.IMigrationsModelDiffer)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="modelDiffer"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.With(Microsoft.EntityFrameworkCore.Migrations.IMigrationsSqlGenerator)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="migrationsSqlGenerator"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.With(Microsoft.EntityFrameworkCore.Migrations.IMigrationCommandExecutor)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="migrationCommandExecutor"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.With(Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlGenerationHelper"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategyFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="executionStrategyFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="currentContext"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseCreatorDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="commandLogger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies.#ctor(Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer,Microsoft.EntityFrameworkCore.Update.IBatchExecutor,Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDatabase" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies.BatchPreparer">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer" /> to be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies.BatchExecutor">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Update.IBatchExecutor" /> to be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies.Connection">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalConnection" /> to be used.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies.With(Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="batchPreparer">
                A replacement for the current dependency of this type.
            </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies.With(Microsoft.EntityFrameworkCore.Update.IBatchExecutor)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="batchExecutor">
                A replacement for the current dependency of this type.
            </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDatabaseDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="connection">
                A replacement for the current dependency of this type.
            </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader">
            <summary>
                <para>
                    Reads result sets from a relational database.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbCommand,System.Data.Common.DbDataReader,System.Guid,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader" /> class.
            </summary>
            <param name="connection"> The connection. </param>
            <param name="command"> The command that was executed. </param>
            <param name="reader"> The underlying reader for the result set. </param>
            <param name="commandId"> A correlation ID that identifies the <see cref="P:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader.DbCommand" /> instance being used. </param>
            <param name="logger"> The diagnostic source. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader.DbDataReader">
            <summary>
                Gets the underlying reader for the result set.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader.DbCommand">
            <summary>
                Gets the underlying command for the result set.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader.Read">
            <summary>
                Calls <see cref="M:System.Data.Common.DbDataReader.Read" /> on the underlying <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
            <returns> <see langword="true" /> if there are more rows; otherwise <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader.ReadAsync(System.Threading.CancellationToken)">
            <summary>
                Calls <see cref="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)" /> on the underlying
                <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
            <returns> <see langword="true" /> if there are more rows; otherwise <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalDataReader.DisposeAsync">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions">
            <summary>
                Extension methods for <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> that can only be used with a
                relational database provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Action,System.Func{System.Boolean},System.Data.IsolationLevel)">
            <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <param name="operation">
                A delegate representing an executable operation.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.Tasks.Task},System.Func{System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel)">
            <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <param name="operation">
                A function that returns a started task.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <param name="operation">
                A function that returns a started task.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{``0},System.Func{System.Boolean},System.Data.IsolationLevel)">
            <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
            <returns> The result from the operation. </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}},System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Action{``0},System.Func{``0,System.Boolean},System.Data.IsolationLevel)">
            <summary>
                Executes the specified operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A delegate representing an executable operation.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``1(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation in a transaction. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A function that returns a started task.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransaction``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,``1},System.Func{``0,System.Boolean},System.Data.IsolationLevel)">
            <summary>
                Executes the specified operation in a transaction and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A delegate representing an executable operation that returns the result of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The return type of <paramref name="operation" />. </typeparam>
            <returns> The result from the operation. </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyExtensions.ExecuteInTransactionAsync``2(Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy,``0,System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.CancellationToken,System.Threading.Tasks.Task{System.Boolean}},System.Data.IsolationLevel,System.Threading.CancellationToken)">
            <summary>
                Executes the specified asynchronous operation and returns the result. Allows to check whether
                the transaction has been rolled back if an error occurs during commit.
            </summary>
            <param name="strategy"> The strategy that will be used for the execution. </param>
            <param name="state"> The state that will be passed to the operation. </param>
            <param name="operation">
                A function that returns a started task of type <typeparamref name="TResult" />.
            </param>
            <param name="verifySucceeded">
                A delegate that tests whether the operation succeeded even though an exception was thrown when the
                transaction was being committed.
            </param>
            <param name="isolationLevel"> The isolation level to use for the transaction. </param>
            <param name="cancellationToken">
                A cancellation token used to cancel the retry operation, but not operations that are already in flight
                or that already completed successfully.
            </param>
            <typeparam name="TState"> The type of the state. </typeparam>
            <typeparam name="TResult"> The result type of the <see cref="T:System.Threading.Tasks.Task`1" /> returned by <paramref name="operation" />. </typeparam>
            <returns>
                A task that will run to completion if the original task completes successfully (either the
                first time or after retrying transient failures). If the task fails with a non-transient error or
                the retry limit is reached, the returned task will become faulted and the exception must be observed.
            </returns>
            <exception cref="T:Microsoft.EntityFrameworkCore.Storage.RetryLimitExceededException">
                The operation has not succeeded after the configured number of retries.
            </exception>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyFactory">
            <summary>
                <para>
                    Factory for creating <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> instances for use with relational
                    database providers.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                Creates a new instance of this class with the given service dependencies.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyFactory.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyFactory.CreateDefaultStrategy(Microsoft.EntityFrameworkCore.Storage.ExecutionStrategyDependencies)">
            <summary>
                Creates or returns a cached instance of the default <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> for the
                current database provider.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalExecutionStrategyFactory.Create">
            <summary>
                Creates an <see cref="T:Microsoft.EntityFrameworkCore.Storage.IExecutionStrategy" /> for the current database provider.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2">
            <summary>
                Base class for relation type mappings to NTS Geometry and derived types.
            </summary>
            <typeparam name="TGeometry"> The geometry type. </typeparam>
            <typeparam name="TProvider"> The native type of the database provider. </typeparam>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2.#ctor(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter{`0,`1},System.String)">
            <summary>
                Creates a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2" /> class.
            </summary>
            <param name="converter"> The converter to use when converting to and from database types. </param>
            <param name="storeType"> The store type name. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter{`0,`1})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> class.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <param name="converter"> The converter to use when converting to and from database types. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2.SpatialConverter">
            <summary>
                The underlying Geometry converter.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Nullable{System.Boolean})">
            <summary>
                Creates a <see cref="T:System.Data.Common.DbParameter" /> with the appropriate type information configured.
            </summary>
            <param name="command"> The command the parameter should be created on. </param>
            <param name="name"> The name of the parameter. </param>
            <param name="value"> The value to be assigned to the parameter. </param>
            <param name="nullable"> A value indicating whether the parameter should be a nullable type. </param>
            <returns> The newly created parameter. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2.CustomizeDataReaderExpression(System.Linq.Expressions.Expression)">
            <summary>
                Gets a custom expression tree for the code to convert from the database value
                to the model value.
            </summary>
            <param name="expression"> The input expression, containing the database value. </param>
            <returns> The expression with conversion added. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2.GenerateCodeLiteral(System.Object)">
            <summary>
                Creates a an expression tree that can be used to generate code for the literal value.
                Currently, only very basic expressions such as constructor calls and factory methods taking
                simple constants are supported.
            </summary>
            <param name="value"> The value for which a literal is needed. </param>
            <returns> An expression tree that can be used to generate code for the literal value. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2.WKTReaderType">
            <summary>
                The type of the NTS 'WKTReader'.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2.AsText(System.Object)">
            <summary>
                Returns the Well-Known-Text (WKT) representation of the given object.
            </summary>
            <param name="value"> The 'Geometry' value. </param>
            <returns> The WKT. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalGeometryTypeMapping`2.GetSrid(System.Object)">
            <summary>
                Returns the SRID representation of the given object.
            </summary>
            <param name="value"> The 'Geometry' value. </param>
            <returns> The SRID. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper">
            <summary>
                <para>
                    Provides services to help with generation of SQL commands.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelperDependencies)">
            <summary>
                Initializes a new instance of the this class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.StatementTerminator">
            <summary>
                The terminator to be used for SQL statements.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.BatchTerminator">
            <summary>
                The terminator to be used for batches of SQL statements.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.StartTransactionStatement">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.CommitTransactionStatement">
            <inheritdoc />
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.SingleLineCommentToken">
            <summary>
                The default single-line comment prefix.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.GenerateParameterName(System.String)">
            <summary>
                Generates a valid parameter name for the given candidate name.
            </summary>
            <param name="name">The candidate name for the parameter.</param>
            <returns>
                A valid name based on the candidate name.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.GenerateParameterName(System.Text.StringBuilder,System.String)">
            <summary>
                Writes a valid parameter name for the given candidate name.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to write generated string to.</param>
            <param name="name">The candidate name for the parameter.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.GenerateParameterNamePlaceholder(System.String)">
            <summary>
                Generates a valid parameter placeholder name for the given candidate name.
            </summary>
            <param name="name">The candidate name for the parameter placeholder.</param>
            <returns>
                A valid name based on the candidate name.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.GenerateParameterNamePlaceholder(System.Text.StringBuilder,System.String)">
            <summary>
                Writes a valid parameter placeholder name for the given candidate name.
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to write generated string to.</param>
            <param name="name">The candidate name for the parameter placeholder.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.EscapeIdentifier(System.String)">
            <summary>
                Generates the escaped SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="identifier">The identifier to be escaped.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.EscapeIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
                Writes the escaped SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to write generated string to.</param>
            <param name="identifier">The identifier to be escaped.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.DelimitIdentifier(System.String)">
            <summary>
                Generates the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="identifier">The identifier to delimit.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String)">
            <summary>
                Writes the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to write generated string to.</param>
            <param name="identifier">The identifier to delimit.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.DelimitIdentifier(System.String,System.String)">
            <summary>
                Generates the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="name">The identifier to delimit.</param>
            <param name="schema">The schema of the identifier.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.DelimitIdentifier(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                Writes the delimited SQL representation of an identifier (column name, table name, etc.).
            </summary>
            <param name="builder">The <see cref="T:System.Text.StringBuilder" /> to write generated string to.</param>
            <param name="name">The identifier to delimit.</param>
            <param name="schema">The schema of the identifier.</param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper.GenerateComment(System.String)">
            <summary>
                Generates a SQL comment.
            </summary>
            <param name="text"> The comment text. </param>
            <returns> The generated SQL. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelperDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
                    This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelperDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalSqlGenerationHelper" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction">
            <summary>
                <para>
                    A transaction against the database.
                </para>
                <para>
                    Instances of this class are typically obtained from <see cref="M:Microsoft.EntityFrameworkCore.Infrastructure.DatabaseFacade.BeginTransaction" /> and it is not designed
                    to be directly constructed in your application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> class.
            </summary>
            <param name="connection"> The connection to the database. </param>
            <param name="transaction"> The underlying <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="transactionId"> The correlation ID for the transaction. </param>
            <param name="logger"> The logger to write to. </param>
            <param name="transactionOwned">
                A value indicating whether the transaction is owned by this class (i.e. if it can be disposed when this class is disposed).
            </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Connection">
            <summary>
                The connection.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Logger">
            <summary>
                The logger.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.TransactionId">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Commit">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Rollback">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.CommitAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.RollbackAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.CreateSavepoint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.CreateSavepointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.GetCreateSavepointSql(System.String)">
            <summary>
                When implemented in a provider supporting transaction savepoints, this method should return an
                SQL statement which creates a savepoint with the given name.
            </summary>
            <param name="name"> The name of the savepoint to be created. </param>
            <returns> An SQL string to create the savepoint. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.RollbackToSavepoint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.RollbackToSavepointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.GetRollbackToSavepointSql(System.String)">
            <summary>
                When implemented in a provider supporting transaction savepoints, this method should return an
                SQL statement which rolls back a savepoint with the given name.
            </summary>
            <param name="name"> The name of the savepoint to be created. </param>
            <returns> An SQL string to create the savepoint. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.ReleaseSavepoint(System.String)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.ReleaseSavepointAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.GetReleaseSavepointSql(System.String)">
            <summary>
                <para>
                    When implemented in a provider supporting transaction savepoints, this method should return an
                    SQL statement which releases a savepoint with the given name.
                </para>
                <para>
                    If savepoint release isn't supported, <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.ReleaseSavepoint(System.String)" /> and <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.ReleaseSavepointAsync(System.String,System.Threading.CancellationToken)" /> should
                    be overridden to do nothing.
                </para>
            </summary>
            <param name="name"> The name of the savepoint to be created. </param>
            <returns> An SQL string to create the savepoint. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.SupportsSavepoints">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.DisposeAsync">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.ClearTransaction">
            <summary>
                Remove the underlying transaction from the connection
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction.ClearTransactionAsync(System.Threading.CancellationToken)">
            <summary>
                Remove the underlying transaction from the connection
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory">
            <summary>
                <para>
                    A factory for creating <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> instances.
                </para>
                <para>
                    This type is typically used by database providers It is generally not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactoryDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory.Dependencies">
            <summary>
                Parameter object containing dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory.Create(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Data.Common.DbTransaction,System.Guid,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Transaction},System.Boolean)">
            <summary>
                Creates a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> instance.
            </summary>
            <param name="connection"> The connection to the database. </param>
            <param name="transaction"> The underlying <see cref="T:System.Data.Common.DbTransaction" />. </param>
            <param name="transactionId"> The unique correlation ID for this transaction. </param>
            <param name="logger"> The logger to write to. </param>
            <param name="transactionOwned">
                A value indicating whether the transaction is owned by this class (i.e. if it can be disposed when this class is disposed).
            </param>
            <returns> A new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransaction" /> instance. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactoryDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
                    This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactoryDependencies.#ctor">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTransactionFactory" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters">
            <summary>
                Parameter object for use in the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> hierarchy.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.#ctor(Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping.CoreTypeMappingParameters,System.String,Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix,System.Nullable{System.Data.DbType},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters" /> parameter object.
            </summary>
            <param name="coreParameters"> Parameters for the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> base class. </param>
            <param name="storeType"> The name of the database type. </param>
            <param name="storeTypePostfix"> Indicates which values should be appended to the store type name. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
            <param name="unicode"> A value indicating whether the type should handle Unicode data or not. </param>
            <param name="size"> The size of data the property is configured to store, or null if no size is configured. </param>
            <param name="fixedLength"> A value indicating whether the type is constrained to fixed-length data. </param>
            <param name="precision"> The precision of data the property is configured to store, or null if no size is configured. </param>
            <param name="scale"> The scale of data the property is configured to store, or null if no size is configured. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.CoreParameters">
            <summary>
                Parameters for the <see cref="T:Microsoft.EntityFrameworkCore.Storage.CoreTypeMapping" /> base class.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.StoreType">
            <summary>
                The mapping store type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.DbType">
            <summary>
                The mapping DbType.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.Unicode">
            <summary>
                The mapping Unicode flag.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.Size">
            <summary>
                The mapping size.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.Precision">
            <summary>
                The mapping precision.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.Scale">
            <summary>
                The mapping scale.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.FixedLength">
            <summary>
                The mapping fixed-length flag.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.StoreTypePostfix">
            <summary>
                Indicates which values should be appended to the store type name.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.WithTypeMappingInfo(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters" /> parameter object with the given
                mapping info.
            </summary>
            <param name="mappingInfo"> The mapping info containing the facets to use. </param>
            <returns> The new parameter object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.WithStoreTypeAndSize(System.String,System.Nullable{System.Int32},System.Nullable{Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters" /> parameter object with the given
                store type and size.
            </summary>
            <param name="storeType"> The new store type name. </param>
            <param name="size"> The new size. </param>
            <param name="storeTypePostfix"> The new postfix, or null to leave unchanged. </param>
            <returns> The new parameter object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.WithPrecisionAndScale(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters" /> parameter object with the given precision and scale
            </summary>
            <param name="precision"> The precision of data the property is configured to store, or null if no size is configured. </param>
            <param name="scale"> The scale of data the property is configured to store, or null if no size is configured. </param>
            <returns> The new parameter object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.WithPrecision(System.Nullable{System.Int32})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters" /> parameter object with the given precision.
            </summary>
            <param name="precision"> The precision of data the property is configured to store, or null if no size is configured. </param>
            <returns> The new parameter object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.WithScale(System.Nullable{System.Int32})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters" /> parameter object with the given scale.
            </summary>
            <param name="scale"> The scale of data the property is configured to store, or null if no size is configured. </param>
            <returns> The new parameter object. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters.WithComposedConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters" /> parameter object with the given
                converter composed with any existing converter and set on the new parameter object.
            </summary>
            <param name="converter"> The converter. </param>
            <returns> The new parameter object. </returns>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.NullMapping">
            <summary>
                Gets the mapping to be used when the only piece of information is that there is a null value.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> class.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ProcessStoreType(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters,System.String,System.String)">
            <summary>
                Processes the store type name to add appropriate postfix/prefix text as needed.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <param name="storeType"> The specified store type name. </param>
            <param name="storeTypeNameBase"> The calculated based name</param>
            <returns> The store type name to use. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.#ctor(System.String,System.Type,System.Nullable{System.Data.DbType},System.Boolean,System.Nullable{System.Int32},System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="clrType"> The .NET type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
            <param name="unicode"> A value indicating whether the type should handle Unicode data or not. </param>
            <param name="size"> The size of data the property is configured to store, or null if no size is configured. </param>
            <param name="fixedLength"> A value indicating whether the type has fixed length data or not. </param>
            <param name="precision"> The precision of data the property is configured to store, or null if no precision is configured. </param>
            <param name="scale"> The scale of data the property is configured to store, or null if no scale is configured. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Parameters">
            <summary>
                Returns the parameters used to create this type mapping.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Clone(System.String,System.Nullable{System.Int32})">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="size"> The size of data the property is configured to store, or null if no size is configured. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Clone(System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="precision"> The precision of data the property is configured to store, or null if no size is configured. </param>
            <param name="scale"> The scale of data the property is configured to store, or null if no size is configured. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter)">
            <summary>
                Returns a new copy of this type mapping with the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />
                added.
            </summary>
            <param name="converter"> The converter to use. </param>
            <returns> A new type mapping </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)">
            <summary>
                Clones the type mapping to update facets from the mapping info, if needed.
            </summary>
            <param name="mappingInfo"> The mapping info containing the facets to use. </param>
            <returns> The cloned mapping, or the original mapping if no clone was needed. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.StoreTypePostfix">
            <summary>
                Gets the name of the database type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.StoreType">
            <summary>
                Gets the name of the database type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.StoreTypeNameBase">
            <summary>
                Gets the base name of the database type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.DbType">
            <summary>
                Gets the <see cref="T:System.Data.DbType" /> to be used.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.IsUnicode">
            <summary>
                Gets a value indicating whether the type should handle Unicode data or not.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Size">
            <summary>
                Gets the size of data the property is configured to store, or null if no size is configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Precision">
            <summary>
                Gets the precision of data the property is configured to store, or null if no precision is configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.Scale">
            <summary>
                Gets the scale of data the property is configured to store, or null if no scale is configured.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.IsFixedLength">
            <summary>
                Gets a value indicating whether the type is constrained to fixed-length data.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CreateParameter(System.Data.Common.DbCommand,System.String,System.Object,System.Nullable{System.Boolean})">
            <summary>
                Creates a <see cref="T:System.Data.Common.DbParameter" /> with the appropriate type information configured.
            </summary>
            <param name="command"> The command the parameter should be created on. </param>
            <param name="name"> The name of the parameter. </param>
            <param name="value"> The value to be assigned to the parameter. </param>
            <param name="nullable"> A value indicating whether the parameter should be a nullable type. </param>
            <returns> The newly created parameter. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.ConfigureParameter(System.Data.Common.DbParameter)">
            <summary>
                Configures type information of a <see cref="T:System.Data.Common.DbParameter" />.
            </summary>
            <param name="parameter"> The parameter to be configured. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.GenerateSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.GenerateProviderValueSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value without conversion.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a non-null literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.GetDataReaderMethod">
            <summary>
                The method to use when reading values of the given type. The method must be defined
                on <see cref="T:System.Data.Common.DbDataReader" /> or one of its subclasses.
            </summary>
            <returns> The method to use to read the value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.GetDataReaderMethod(System.Type)">
            <summary>
                The method to use when reading values of the given type. The method must be defined
                on <see cref="T:System.Data.Common.DbDataReader" />.
            </summary>
            <returns> The method to use to read the value. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.CustomizeDataReaderExpression(System.Linq.Expressions.Expression)">
            <summary>
                Gets a custom expression tree for reading the value from the input data reader
                expression that contains the database value.
            </summary>
            <param name="expression"> The input expression, containing the database value. </param>
            <returns> The expression with customization added. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo">
            <summary>
                Describes metadata needed to decide on a relational type mapping for
                a property, type, or provider-specific relational type name.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.#ctor(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo" />.
            </summary>
            <param name="property"> The property for which mapping is needed. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.#ctor(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Metadata.IProperty},System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo" />.
            </summary>
            <param name="principals"> The principal property chain for the property for which mapping is needed. </param>
            <param name="storeTypeName"> The provider-specific relational type name for which mapping is needed. </param>
            <param name="storeTypeNameBase"> The provider-specific relational type name, with any facets removed. </param>
            <param name="fallbackUnicode">
                Specifies a fallback Specifies Unicode or ANSI mapping for the mapping, in case one isn't found at the core
                level, or <see langword="null" /> for default.
            </param>
            <param name="fixedLength"> Specifies a fixed length mapping, or <see langword="null" /> for default. </param>
            <param name="fallbackSize">
                Specifies a fallback size for the mapping, in case one isn't found at the core level, or <see langword="null" /> for
                default.
            </param>
            <param name="fallbackPrecision">
                Specifies a fallback precision for the mapping, in case one isn't found at the core level, or <see langword="null" />
                for default.
            </param>
            <param name="fallbackScale">
                Specifies a fallback scale for the mapping, in case one isn't found at the core level, or <see langword="null" /> for
                default.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.#ctor(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo" />.
            </summary>
            <param name="storeTypeName"> The provider-specific relational type name for which mapping is needed. </param>
            <param name="storeTypeNameBase"> The provider-specific relational type name, with any facets removed. </param>
            <param name="unicode"> Specifies Unicode or ANSI mapping, or <see langword="null" /> for default. </param>
            <param name="size"> Specifies a size for the mapping, or <see langword="null" /> for default. </param>
            <param name="precision"> Specifies a precision for the mapping, or <see langword="null" /> for default. </param>
            <param name="scale"> Specifies a scale for the mapping, or <see langword="null" /> for default. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.#ctor(System.Reflection.MemberInfo,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo" />.
            </summary>
            <param name="member"> The property or field for which mapping is needed. </param>
            <param name="storeTypeName"> The provider-specific relational type name for which mapping is needed. </param>
            <param name="storeTypeNameBase"> The provider-specific relational type name, with any facets removed. </param>
            <param name="unicode"> Specifies Unicode or ANSI mapping, or <see langword="null" /> for default. </param>
            <param name="size"> Specifies a size for the mapping, or <see langword="null" /> for default. </param>
            <param name="precision"> Specifies a precision for the mapping, or <see langword="null" /> for default. </param>
            <param name="scale"> Specifies a scale for the mapping, or <see langword="null" /> for default. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@,Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo@)">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo" /> with the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo" />.
            </summary>
            <param name="source"> The source info. </param>
            <param name="converter"> The converter to apply. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.#ctor(System.Type,System.String,System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                Creates a new instance of <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" />.
            </summary>
            <param name="type"> The CLR type in the model for which mapping is needed. </param>
            <param name="storeTypeName"> The database type name. </param>
            <param name="storeTypeNameBase"> The provider-specific relational type name, with any facets removed. </param>
            <param name="keyOrIndex"> If <see langword="true" />, then a special mapping for a key or index may be returned. </param>
            <param name="unicode"> Specifies Unicode or ANSI mapping, or <see langword="null" /> for default. </param>
            <param name="size"> Specifies a size for the mapping, or <see langword="null" /> for default. </param>
            <param name="rowVersion"> Specifies a row-version, or <see langword="null" /> for default. </param>
            <param name="fixedLength"> Specifies a fixed length mapping, or <see langword="null" /> for default. </param>
            <param name="precision"> Specifies a precision for the mapping, or <see langword="null" /> for default. </param>
            <param name="scale"> Specifies a scale for the mapping, or <see langword="null" /> for default. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.StoreTypeName">
            <summary>
                The provider-specific relational type name for which mapping is needed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.StoreTypeNameBase">
            <summary>
                The provider-specific relational type name, with any facets removed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.Size">
            <summary>
                Indicates the store-size to use for the mapping, or null if none.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.Precision">
            <summary>
                The suggested precision of the mapped data type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.Scale">
            <summary>
                The suggested scale of the mapped data type.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.IsFixedLength">
            <summary>
                Whether or not the mapped data type is fixed length.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.IsKeyOrIndex">
            <summary>
                Indicates whether or not the mapping is part of a key or index.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.IsUnicode">
            <summary>
                Indicates whether or not the mapping supports Unicode, or null if not defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.IsRowVersion">
            <summary>
                Indicates whether or not the mapping will be used for a row version, or null if not defined.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.ClrType">
            <summary>
                The CLR type in the model.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.WithConverter(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverterInfo@)">
            <summary>
                Returns a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo" /> with the given converter applied.
            </summary>
            <param name="converterInfo"> The converter to apply. </param>
            <returns> The new mapping info. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.Equals(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo)">
            <summary>
                Compares this <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo" /> to another to check if they represent the same mapping.
            </summary>
            <param name="other"> The other object. </param>
            <returns> <see langword="true" /> if they represent the same mapping; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.Equals(System.Object)">
            <summary>
                Compares this <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo" /> to another to check if they represent the same mapping.
            </summary>
            <param name="obj"> The other object. </param>
            <returns> <see langword="true" /> if they represent the same mapping; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo.GetHashCode">
            <summary>
                Returns a hash code for this object.
            </summary>
            <returns> The hash code. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource">
            <summary>
                <para>
                    The base class for relational type mapping starting with version 2.1. Relational providers
                    should derive from this class and override <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.#ctor(Microsoft.EntityFrameworkCore.Storage.TypeMappingSourceDependencies,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies)">
            <summary>
                Initializes a new instance of the this class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
            <param name="relationalDependencies"> Parameter object containing relational-specific dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)">
            <summary>
                <para>
                    Overridden by relational database providers to find a type mapping for the given info.
                </para>
                <para>
                    The mapping info is populated with as much information about the required type mapping as
                    is available. Use all the information necessary to create the best mapping. Return <see langword="null" />
                    if no mapping is available.
                </para>
            </summary>
            <param name="mappingInfo"> The mapping info to use to create the mapping. </param>
            <returns> The type mapping, or <see langword="null" /> if none could be found. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.RelationalDependencies">
            <summary>
                Dependencies used to create this <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource" />
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.TypeMappingInfo@)">
            <summary>
                Call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingInfo@)" /> instead
            </summary>
            <param name="mappingInfo"> The mapping info to use to create the mapping. </param>
            <returns> The type mapping, or <see langword="null" /> if none could be found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />.
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="property"> The property. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.Type)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Type" />.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                    or <see cref="T:System.Reflection.MemberInfo" /> available, otherwise call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                    or <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.Reflection.MemberInfo)" />
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="type"> The CLR type. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.Reflection.MemberInfo)">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Reflection.MemberInfo" /> representing
                    a field or a property of a CLR type.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="member"> The field or property. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.String)">
            <summary>
                <para>
                    Finds the type mapping for a given database type name.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="storeTypeName"> The database type name. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(System.Type,System.String,System.Boolean,System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
                <para>
                    Finds the type mapping for a given <see cref="T:System.Type" /> and additional facets.
                </para>
                <para>
                    Note: Only call this method if there is no <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" /> available, otherwise
                    call <see cref="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)" />
                </para>
                <para>
                    Note: providers should typically not need to override this method.
                </para>
            </summary>
            <param name="type"> The CLR type. </param>
            <param name="storeTypeName"> The database type name. </param>
            <param name="keyOrIndex"> If <see langword="true" />, then a special mapping for a key or index may be returned. </param>
            <param name="unicode"> Specifies Unicode or ANSI mapping, or <see langword="null" /> for default. </param>
            <param name="size"> Specifies a size for the mapping, or <see langword="null" /> for default. </param>
            <param name="rowVersion"> Specifies a row-version, or <see langword="null" /> for default. </param>
            <param name="fixedLength"> Specifies a fixed length mapping, or <see langword="null" /> for default. </param>
            <param name="precision"> Specifies a precision for the mapping, or <see langword="null" /> for default. </param>
            <param name="scale"> Specifies a scale for the mapping, or <see langword="null" /> for default. </param>
            <returns> The type mapping, or <see langword="null" /> if none was found. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.Microsoft#EntityFrameworkCore#Storage#IRelationalTypeMappingSource#FindMapping(Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.Microsoft#EntityFrameworkCore#Storage#IRelationalTypeMappingSource#FindMapping(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.Microsoft#EntityFrameworkCore#Storage#IRelationalTypeMappingSource#FindMapping(System.Reflection.MemberInfo)">
            <inheritdoc />
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource.ParseStoreTypeName(System.String,System.Nullable{System.Boolean}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@,System.Nullable{System.Int32}@)">
            <summary>
                <para>
                    Parses a provider-specific store type name, extracting the standard facets
                    (e.g. size, precision) and returns the base store type name (without any facets).
                </para>
                <para>
                    The default implementation supports sometype(size), sometype(precision) and
                    sometype(precision, scale). Providers can override this to provide their own
                    logic.
                </para>
            </summary>
            <param name="storeTypeName"> A provider-specific relational type name, including facets. </param>
            <param name="unicode"> The Unicode or ANSI setting parsed from the type name, or <see langword="null" /> if none was specified. </param>
            <param name="size"> The size parsed from the type name, or <see langword="null" /> if none was specified. </param>
            <param name="precision"> The precision parsed from the type name, or <see langword="null" /> if none was specified. </param>
            <param name="scale"> The scale parsed from the type name, or <see langword="null" /> if none was specified. </param>
            <returns> The provider-specific relational type name, with any facets removed. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
                    This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies.#ctor(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSourcePlugin})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSource" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies.Plugins">
            <summary>
                Gets the plugins.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceDependencies.With(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSourcePlugin})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="plugins"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions">
            <summary>
                Extension methods for the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource" /> class.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMappingForValue(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.Object)">
            <summary>
                Gets the relational database type for a given object, throwing if no mapping is found.
            </summary>
            <param name="typeMappingSource"> The type mapping source. </param>
            <param name="value"> The object to get the mapping for. </param>
            <returns> The type mapping to be used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Metadata.IProperty)">
            <summary>
                Gets the relational database type for a given property, throwing if no mapping is found.
            </summary>
            <param name="typeMappingSource"> The type mapping source. </param>
            <param name="property"> The property to get the mapping for. </param>
            <returns> The type mapping to be used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.Type)">
            <summary>
                Gets the relational database type for a given .NET type, throwing if no mapping is found.
            </summary>
            <param name="typeMappingSource"> The type mapping source. </param>
            <param name="clrType"> The type to get the mapping for. </param>
            <returns> The type mapping to be used. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMappingSourceExtensions.GetMapping(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.String)">
            <summary>
                <para>
                    Gets the mapping that represents the given database type, throwing if no mapping is found.
                </para>
                <para>
                    Note that sometimes the same store type can have different mappings; this method returns the default.
                </para>
            </summary>
            <param name="typeMappingSource"> The type mapping source. </param>
            <param name="typeName"> The type to get the mapping for. </param>
            <returns> The type mapping to be used. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.RelationalValueBufferFactoryDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Storage.Internal.TypedRelationalValueBufferFactory" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
                    This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalValueBufferFactoryDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,Microsoft.EntityFrameworkCore.Infrastructure.ICoreSingletonOptions)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" />
                    implementations.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalValueBufferFactoryDependencies.TypeMappingSource">
            <summary>
                Gets the type mapping source.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.RelationalValueBufferFactoryDependencies.CoreOptions">
            <summary>
                Gets core options.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalValueBufferFactoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.RelationalValueBufferFactoryDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.ICoreSingletonOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="coreOptions"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.SByteTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.SByte" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.SByteTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.SByteTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.SByteTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.SByteTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.SByteTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ShortTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.Int16" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ShortTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ShortTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ShortTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ShortTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ShortTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix">
            <summary>
                Indicates which values should be appended to the store type name.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix.None">
            <summary>
                Append nothing.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix.Size">
            <summary>
                Append only the size.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix.Precision">
            <summary>
                Append only the precision.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.StoreTypePostfix.PrecisionAndScale">
            <summary>
                Append the precision and scale.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.StringTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.String" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.StringTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType},System.Boolean,System.Nullable{System.Int32})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.StringTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
            <param name="unicode"> A value indicating whether the type should handle Unicode data or not. </param>
            <param name="size"> The size of data the property is configured to store, or null if no size is configured. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.StringTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.StringTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.StringTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.StringTypeMapping.EscapeSqlLiteral(System.String)">
            <summary>
                Generates the escaped SQL representation of a literal value.
            </summary>
            <param name="literal">The value to be escaped.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.StringTypeMapping.GenerateNonNullSqlLiteral(System.Object)">
            <summary>
                Generates the SQL representation of a literal value.
            </summary>
            <param name="value">The literal value.</param>
            <returns>
                The generated string.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.TimeSpanTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.TimeSpan" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TimeSpanTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.TimeSpanTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TimeSpanTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.TimeSpanTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TimeSpanTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TimeSpanTypeMapping.SqlLiteralFormatString">
            <summary>
                Gets the string format to be used to generate SQL literals of this type.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.TypedRelationalValueBufferFactoryFactory">
            <summary>
                <para>
                    Creates instances of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" /> type. <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" />
                    instances are tied to a specific result shape. This factory is responsible for creating the
                    <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" /> for a given result shape.
                </para>
                <para>
                    This factory results in value buffers that use they strongly typed APIs to read back individual values from the
                    underlying <see cref="T:System.Data.Common.DbDataReader" />.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Storage.TypedRelationalValueBufferFactoryFactory.DataReaderParameter">
            <summary>
                The parameter representing the DbDataReader in generated expressions.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypedRelationalValueBufferFactoryFactory.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalValueBufferFactoryDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypedRelationalValueBufferFactoryFactory" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypedRelationalValueBufferFactoryFactory.Dependencies">
            <summary>
                Parameter object containing dependencies for this service.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypedRelationalValueBufferFactoryFactory.Create(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" />.
            </summary>
            <param name="types"> Types and mapping for the values to be read. </param>
            <returns> The newly created <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypedRelationalValueBufferFactoryFactory.CreateAssignmentExpressions(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo})">
            <summary>
                Creates value buffer assignment expressions for the given type information.
            </summary>
            <param name="types"> Types and mapping for the values to be read. </param>
            <returns> The value buffer assignment expressions. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo">
            <summary>
                Associates a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" /> with an optional <see cref="T:Microsoft.EntityFrameworkCore.Metadata.IProperty" />
                and an index into the data reader for use when reading and converting values from the database.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.Int32)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo" /> instance.
            </summary>
            <param name="modelClrType"> The type that is needed in the model after conversion. </param>
            <param name="property"> The property associated with the type, or <see langword="null" /> if none. </param>
            <param name="typeMappingSource"> The type mapping source to use to find a mapping if the property does not have one already bound. </param>
            <param name="index">
                The index of the underlying result set that should be used for this type,
                or -1 if no index mapping is needed.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.Nullable{System.Boolean},System.Int32)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo" /> instance.
            </summary>
            <param name="modelClrType"> The type that is needed in the model after conversion. </param>
            <param name="property"> The property associated with the type, or <see langword="null" /> if none. </param>
            <param name="typeMappingSource"> The type mapping source to use to find a mapping if the property does not have one already bound. </param>
            <param name="fromLeftOuterJoin"> Whether or not the value is coming from a LEFT OUTER JOIN operation. </param>
            <param name="index">
                The index of the underlying result set that should be used for this type,
                or -1 if no index mapping is needed.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Nullable{System.Boolean})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo" /> instance.
            </summary>
            <param name="modelClrType"> The type that is needed in the model after conversion. </param>
            <param name="property"> The property associated with the type, or <see langword="null" /> if none. </param>
            <param name="mapping"> The type mapping to use or <see langword="null" /> to infer one. </param>
            <param name="nullable"> A value indicating whether the value could be null. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.#ctor(System.Type,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource,System.Nullable{System.Boolean},System.Int32,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo" /> instance.
            </summary>
            <param name="modelClrType"> The type that is needed in the model after conversion. </param>
            <param name="property"> The property associated with the type, or <see langword="null" /> if none. </param>
            <param name="typeMappingSource"> The type mapping source to use to find a mapping if the property does not have one already bound. </param>
            <param name="fromLeftOuterJoin"> Whether or not the value is coming from a LEFT OUTER JOIN operation. </param>
            <param name="index">
                The index of the underlying result set that should be used for this type,
                or -1 if no index mapping is needed.
            </param>
            <param name="mapping"> The type mapping to use or <see langword="null" /> to infer one. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.ProviderClrType">
            <summary>
                The type that will be read from the database provider.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.ModelClrType">
            <summary>
                The type that is needed in the model after conversion.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.Mapping">
            <summary>
                The type mapping for the value to be read.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.Property">
            <summary>
                The property associated with the type, or <see langword="null" /> if none.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.Index">
            <summary>
                The index of the underlying result set that should be used for this type,
                or -1 if no index mapping is needed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.IsFromLeftOuterJoin">
            <summary>
                Whether or not the value is coming from a LEFT OUTER JOIN operation.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.IsNullable">
            <summary>
                Whether or not the value can be null.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.Equals(Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="other"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.Equals(System.Object)">
            <summary>
                Determines whether the specified object is equal to the current object.
            </summary>
            <param name="obj"> The object to compare with the current object. </param>
            <returns> <see langword="true" /> if the specified object is equal to the current object; otherwise, <see langword="false" />. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.TypeMaterializationInfo.GetHashCode">
            <summary>
                Serves as the default hash function.
            </summary>
            <returns> A hash code for the current object. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.UIntTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.UInt32" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.UIntTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.UIntTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.UIntTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.UIntTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.UIntTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ULongTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.UInt64" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ULongTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ULongTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ULongTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.ULongTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ULongTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.UShortTypeMapping">
            <summary>
                <para>
                    Represents the mapping between a .NET <see cref="T:System.UInt16" /> type and a database type.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.UShortTypeMapping.#ctor(System.String,System.Nullable{System.Data.DbType})">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.UShortTypeMapping" /> class.
            </summary>
            <param name="storeType"> The name of the database type. </param>
            <param name="dbType"> The <see cref="T:System.Data.DbType" /> to be used. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.UShortTypeMapping.#ctor(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.Storage.UShortTypeMapping" /> class.
            </summary>
            <param name="parameters"> Parameter object for <see cref="T:Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.UShortTypeMapping.Clone(Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping.RelationalTypeMappingParameters)">
            <summary>
                Creates a copy of this mapping.
            </summary>
            <param name="parameters"> The parameters for this mapping. </param>
            <returns> The newly created mapping. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.RelationalConverterMappingHints">
            <summary>
                Specifies hints used by the type mapper when mapping using a <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ValueConverter" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.RelationalConverterMappingHints.#ctor(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Func{Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType,Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints" /> instance. Any hint contained in the instance
                can be <see langword="null" /> to indicate it has not been specified.
            </summary>
            <param name="size"> The suggested size of the mapped data type.</param>
            <param name="precision"> The suggested precision of the mapped data type. </param>
            <param name="scale"> The suggested scale of the mapped data type. </param>
            <param name="unicode"> Whether or not the mapped data type should support Unicode. </param>
            <param name="fixedLength"> Whether or not the mapped data type is fixed length. </param>
            <param name="valueGeneratorFactory"> An optional factory for creating a specific <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.ValueGenerator" />. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Storage.ValueConversion.RelationalConverterMappingHints.With(Microsoft.EntityFrameworkCore.Storage.ValueConversion.ConverterMappingHints)">
            <summary>
                Adds hints from the given object to this one. Hints that are already specified are
                not overridden.
            </summary>
            <param name="hints"> The hints to add. </param>
            <returns> The combined hints. </returns>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Storage.ValueConversion.RelationalConverterMappingHints.IsFixedLength">
            <summary>
                Whether or not the mapped data type is fixed length.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch">
            <summary>
                <para>
                    A <see cref="T:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch" /> for providers which append an SQL query to find out
                    how many rows were affected (see <see cref="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendSelectAffectedCountCommand(System.Text.StringBuilder,System.String,System.String,System.Int32)" />).
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch" /> instance.
            </summary>
            <param name="dependencies"> Service dependencies. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.Consume(Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />.
            </summary>
            <param name="reader"> The data reader. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeAsync(Microsoft.EntityFrameworkCore.Storage.RelationalDataReader,System.Threading.CancellationToken)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />.
            </summary>
            <param name="reader"> The data reader. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetWithPropagation(System.Int32,Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />,
                propagating values back into the <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" />.
            </summary>
            <param name="commandIndex"> The ordinal of the command being consumed. </param>
            <param name="reader"> The data reader. </param>
            <returns> The ordinal of the next command that must be consumed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetWithPropagationAsync(System.Int32,Microsoft.EntityFrameworkCore.Storage.RelationalDataReader,System.Threading.CancellationToken)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />,
                propagating values back into the <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" />.
            </summary>
            <param name="commandIndex"> The ordinal of the command being consumed. </param>
            <param name="reader"> The data reader. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task contains the ordinal of the next command that must be consumed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetWithoutPropagation(System.Int32,Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />
                without propagating values back into the <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" />.
            </summary>
            <param name="commandIndex"> The ordinal of the command being consumed. </param>
            <param name="reader"> The data reader. </param>
            <returns> The ordinal of the next command that must be consumed. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ConsumeResultSetWithoutPropagationAsync(System.Int32,Microsoft.EntityFrameworkCore.Storage.RelationalDataReader,System.Threading.CancellationToken)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />
                without propagating values back into the <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" />.
            </summary>
            <param name="commandIndex"> The ordinal of the command being consumed. </param>
            <param name="reader"> The data reader. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous operation.
                The task contains the ordinal of the next command that must be consumed.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch.ThrowAggregateUpdateConcurrencyException(System.Int32,System.Int32,System.Int32)">
            <summary>
                Throws an exception indicating the command affected an unexpected number of rows.
            </summary>
            <param name="commandIndex"> The ordinal of the command. </param>
            <param name="expectedRowsAffected"> The expected number of rows affected. </param>
            <param name="rowsAffected"> The actual number of rows affected. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.ColumnModification">
            <summary>
                <para>
                    Represents an update, insert, or delete operation for a single column. <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" />s
                    contain lists of <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" />s.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ColumnModification.#ctor(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IColumn,System.Func{System.String},Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" /> instance.
            </summary>
            <param name="entry"> The <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" /> that represents the entity that is being modified. </param>
            <param name="property"> The property that maps to the column. </param>
            <param name="column"> The column to be modified. </param>
            <param name="generateParameterName"> A delegate for generating parameter names for the update SQL. </param>
            <param name="typeMapping"> The relational type mapping to be used for the command parameter. </param>
            <param name="isRead"> Indicates whether or not a value must be read from the database for the column. </param>
            <param name="isWrite"> Indicates whether or not a value must be written to the database for the column. </param>
            <param name="isKey"> Indicates whether or not the column part of a primary or alternate key.</param>
            <param name="isCondition"> Indicates whether or not the column is used in the <c>WHERE</c> clause when updating. </param>
            <param name="sensitiveLoggingEnabled"> Indicates whether or not potentially sensitive data (e.g. database values) can be logged. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ColumnModification.#ctor(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Func{System.String},System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" /> instance.
            </summary>
            <param name="entry"> The <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" /> that represents the entity that is being modified. </param>
            <param name="property"> The property that maps to the column. </param>
            <param name="generateParameterName"> A delegate for generating parameter names for the update SQL. </param>
            <param name="isRead"> Indicates whether or not a value must be read from the database for the column. </param>
            <param name="isWrite"> Indicates whether or not a value must be written to the database for the column. </param>
            <param name="isKey"> Indicates whether or not the column part of a primary or alternate key.</param>
            <param name="isCondition"> Indicates whether or not the column is used in the <c>WHERE</c> clause when updating. </param>
            <param name="isConcurrencyToken"> Indicates whether or not the column is acting as an optimistic concurrency token. </param>
            <param name="sensitiveLoggingEnabled"> Indicates whether or not potentially sensitive data (e.g. database values) can be logged. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ColumnModification.#ctor(System.String,System.Object,System.Object,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String,Microsoft.EntityFrameworkCore.Storage.RelationalTypeMapping,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Boolean})">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" /> instance.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <param name="originalValue"> The original value of the property mapped to this column. </param>
            <param name="value"> Gets or sets the current value of the property mapped to this column. </param>
            <param name="property"> The property that maps to the column. </param>
            <param name="columnType"> The database type of the column. </param>
            <param name="typeMapping"> The relational type mapping to be used for the command parameter. </param>
            <param name="isRead"> Indicates whether or not a value must be read from the database for the column. </param>
            <param name="isWrite"> Indicates whether or not a value must be written to the database for the column. </param>
            <param name="isKey"> Indicates whether or not the column part of a primary or alternate key.</param>
            <param name="isCondition"> Indicates whether or not the column is used in the <c>WHERE</c> clause when updating. </param>
            <param name="sensitiveLoggingEnabled"> Indicates whether or not potentially sensitive data (e.g. database values) can be logged. </param>
            <param name="isNullable"> A value indicating whether the value could be null. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ColumnModification.#ctor(System.String,System.Object,System.Object,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" /> instance.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <param name="originalValue"> The original value of the property mapped to this column. </param>
            <param name="value"> Gets or sets the current value of the property mapped to this column. </param>
            <param name="property"> The property that maps to the column. </param>
            <param name="columnType"> The database type of the column. </param>
            <param name="isRead"> Indicates whether or not a value must be read from the database for the column. </param>
            <param name="isWrite"> Indicates whether or not a value must be written to the database for the column. </param>
            <param name="isKey"> Indicates whether or not the column part of a primary or alternate key.</param>
            <param name="isCondition"> Indicates whether or not the column is used in the <c>WHERE</c> clause when updating. </param>
            <param name="sensitiveLoggingEnabled"> Indicates whether or not potentially sensitive data (e.g. database values) can be logged. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ColumnModification.#ctor(System.String,System.Object,System.Object,Microsoft.EntityFrameworkCore.Metadata.IProperty,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" /> instance.
            </summary>
            <param name="columnName"> The name of the column. </param>
            <param name="originalValue"> The original value of the property mapped to this column. </param>
            <param name="value"> Gets or sets the current value of the property mapped to this column. </param>
            <param name="property"> The property that maps to the column. </param>
            <param name="isRead"> Indicates whether or not a value must be read from the database for the column. </param>
            <param name="isWrite"> Indicates whether or not a value must be written to the database for the column. </param>
            <param name="isKey"> Indicates whether or not the column part of a primary or alternate key.</param>
            <param name="isCondition"> Indicates whether or not the column is used in the <c>WHERE</c> clause when updating. </param>
            <param name="sensitiveLoggingEnabled"> Indicates whether or not potentially sensitive data (e.g. database values) can be logged. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.Entry">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" /> that represents the entity that is being modified.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.Property">
            <summary>
                The property that maps to the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.TypeMapping">
            <summary>
                The relational type mapping for the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.IsNullable">
            <summary>
                A value indicating whether the column could contain a null value.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.IsRead">
            <summary>
                Indicates whether or not a value must be read from the database for the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.IsWrite">
            <summary>
                Indicates whether or not a value must be written to the database for the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.IsCondition">
            <summary>
                Indicates whether or not the column is used in the <c>WHERE</c> clause when updating.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.IsConcurrencyToken">
            <summary>
                Indicates whether or not the column is concurrency token.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.IsKey">
            <summary>
                Indicates whether or not the column is part of a primary or alternate key.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.UseOriginalValueParameter">
            <summary>
                Indicates whether the original value of the property must be passed as a parameter to the SQL
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.UseCurrentValueParameter">
            <summary>
                Indicates whether the current value of the property must be passed as a parameter to the SQL
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.ParameterName">
            <summary>
                The parameter name to use for the current value parameter (<see cref="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.UseCurrentValueParameter" />), if needed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.OriginalParameterName">
            <summary>
                The parameter name to use for the original value parameter (<see cref="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.UseOriginalValueParameter" />), if needed.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.ColumnName">
            <summary>
                The name of the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.ColumnType">
            <summary>
                The database type of the column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.OriginalValue">
            <summary>
                The original value of the property mapped to this column.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ColumnModification.Value">
            <summary>
                Gets or sets the current value of the property mapped to this column.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ColumnModification.AddSharedColumnModification(Microsoft.EntityFrameworkCore.Update.ColumnModification)">
            <summary>
                Adds a modification affecting the same database value.
            </summary>
            <param name="modification"> The modification for the shared column. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.IBatchExecutor">
            <summary>
                <para>
                    A service for executing one or more batches of insert/update/delete commands against a database.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IBatchExecutor.Execute(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                Executes the commands in the batches against the given database connection.
            </summary>
            <param name="commandBatches"> The batches to execute. </param>
            <param name="connection"> The database connection to use. </param>
            <returns> The total number of rows affected. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IBatchExecutor.ExecuteAsync(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)">
            <summary>
                Executes the commands in the batches against the given database connection.
            </summary>
            <param name="commandBatches"> The batches to execute. </param>
            <param name="connection"> The database connection to use. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns>
                A task that represents the asynchronous save operation. The task result contains the
                total number of rows affected.
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer">
            <summary>
                <para>
                    A service for preparing a list of <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch" />s for the entities
                    represented by the given list of <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />s.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ICommandBatchPreparer.BatchCommands(System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},Microsoft.EntityFrameworkCore.Update.IUpdateAdapter)">
            <summary>
                Creates the command batches needed to insert/update/delete the entities represented by the given
                list of <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />s.
            </summary>
            <param name="entries"> The entries that represent the entities to be modified. </param>
            <param name="updateAdapter"> The model data. </param>
            <returns> The list of batches to execute. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.IModificationCommandBatchFactory">
            <summary>
                <para>
                    A service for creating <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch" /> instances.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IModificationCommandBatchFactory.Create">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch" /> instance.
            </summary>
            <returns> The new instance. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.#ctor(Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.CurrentContext">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.UpdateLogger">
            <summary>
                The logger.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.Execute(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.BatchExecutor.ExecuteAsync(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch},Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.#ctor(Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.BatchCommands(System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},Microsoft.EntityFrameworkCore.Update.IUpdateAdapter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.CreateModificationCommands(System.Collections.Generic.IList{Microsoft.EntityFrameworkCore.Update.IUpdateEntry},Microsoft.EntityFrameworkCore.Update.IUpdateAdapter,System.Func{System.String})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer.TopologicalSort(System.Collections.Generic.IEnumerable{Microsoft.EntityFrameworkCore.Update.ModificationCommand})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.#ctor(Microsoft.EntityFrameworkCore.Update.IModificationCommandBatchFactory,Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory,System.Collections.Generic.IComparer{Microsoft.EntityFrameworkCore.Update.ModificationCommand},Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactorySource,Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update},Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparer" />.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.ModificationCommandBatchFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.ParameterNameGeneratorFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.ModificationCommandComparer">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.KeyValueIndexFactorySource">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.LoggingOptions">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.UpdateLogger">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.Options">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.With(Microsoft.EntityFrameworkCore.Update.IModificationCommandBatchFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="modificationCommandBatchFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.With(Microsoft.EntityFrameworkCore.Storage.IParameterNameGeneratorFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="parameterNameGeneratorFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.With(System.Collections.Generic.IComparer{Microsoft.EntityFrameworkCore.Update.ModificationCommand})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="modificationCommandComparer"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.With(Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactorySource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="keyValueIndexFactorySource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.ILoggingOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="loggingOptions"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Update})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="updateLogger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.CommandBatchPreparerDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.IDbContextOptions)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="options"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndex">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndex.WithOriginalValuesFlag">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactory">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactory.CreatePrincipalKeyValue(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactory.CreatePrincipalKeyValueFromOriginalValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactory.CreateDependentKeyValue(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactory.CreateDependentKeyValueFromOriginalValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactorySource">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.IKeyValueIndexFactorySource.GetKeyValueIndexFactory(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndex`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndex`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.IForeignKey,`0,System.Collections.Generic.IEqualityComparer{`0},System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndex`1.WithOriginalValuesFlag">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndex`1.Equals(System.Object)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndex`1.GetHashCode">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactory`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactory`1.#ctor(Microsoft.EntityFrameworkCore.ChangeTracking.IPrincipalKeyValueFactory{`0})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactory`1.CreatePrincipalKeyValue(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactory`1.CreatePrincipalKeyValueFromOriginalValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactory`1.CreateDependentKeyValue(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactory`1.CreateDependentKeyValueFromOriginalValues(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Metadata.IForeignKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactorySource">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactorySource.GetKeyValueIndexFactory(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.KeyValueIndexFactorySource.Create(Microsoft.EntityFrameworkCore.Metadata.IKey)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.ModificationCommandComparer">
            <summary>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.ModificationCommandComparer.Compare(Microsoft.EntityFrameworkCore.Update.ModificationCommand,Microsoft.EntityFrameworkCore.Update.ModificationCommand)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMap`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMap`1.#ctor(Microsoft.EntityFrameworkCore.Metadata.ITable,Microsoft.EntityFrameworkCore.Update.IUpdateAdapter)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMap`1.Values">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMap`1.GetOrAddValue(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryValueFactory{`0})">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMap`1.IsMainEntry(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMap`1.GetAllEntries(Microsoft.EntityFrameworkCore.Update.IUpdateEntry)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryMapFactory`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.Internal.SharedTableEntryValueFactory`1">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator">
            <summary>
                <para>
                    A service used to generate SQL for insert, update, and delete commands, and related SQL
                    operations needed for <see cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChanges" />
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator.GenerateNextSequenceValueOperation(System.String,System.String)">
            <summary>
                Generates SQL that will obtain the next value in the given sequence.
            </summary>
            <param name="name"> The name of the sequence. </param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
            <returns> The SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator.AppendNextSequenceValueOperation(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                Generates a SQL fragment that will get the next value from the given sequence and appends it to
                the full command being built by the given <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL fragment should be appended. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator.AppendBatchHeader(System.Text.StringBuilder)">
            <summary>
                Appends a SQL fragment for the start of a batch to
                the full command being built by the given <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL fragment should be appended. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator.AppendDeleteOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.ModificationCommand,System.Int32)">
            <summary>
                Appends a SQL command for deleting a row to the commands being built.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="command"> The command that represents the delete operation. </param>
            <param name="commandPosition"> The ordinal of this command in the batch. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" /> for the command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator.AppendInsertOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.ModificationCommand,System.Int32)">
            <summary>
                Appends a SQL command for inserting a row to the commands being built.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="command"> The command that represents the delete operation. </param>
            <param name="commandPosition"> The ordinal of this command in the batch. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" /> for the command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator.AppendUpdateOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.ModificationCommand,System.Int32)">
            <summary>
                Appends a SQL command for updating a row to the commands being built.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="command"> The command that represents the delete operation. </param>
            <param name="commandPosition"> The ordinal of this command in the batch. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" /> for the command. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand">
            <summary>
                <para>
                    Represents a conceptual command to the database to insert/update/delete a row.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommand.#ctor(System.String,System.String,System.Func{System.String},System.Boolean,System.Collections.Generic.IComparer{Microsoft.EntityFrameworkCore.Update.IUpdateEntry})">
            <summary>
                Initializes a new <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" /> instance.
            </summary>
            <param name="name"> The name of the table containing the data to be modified. </param>
            <param name="schema"> The schema containing the table, or <see langword="null" /> to use the default schema. </param>
            <param name="generateParameterName"> A delegate to generate parameter names. </param>
            <param name="sensitiveLoggingEnabled"> Indicates whether or not potentially sensitive data (e.g. database values) can be logged. </param>
            <param name="comparer"> A <see cref="T:System.Collections.Generic.IComparer`1" /> for <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />s. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommand.#ctor(System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification},System.Boolean)">
            <summary>
                Initializes a new <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" /> instance.
            </summary>
            <param name="name"> The name of the table containing the data to be modified. </param>
            <param name="schema"> The schema containing the table, or <see langword="null" /> to use the default schema. </param>
            <param name="columnModifications"> The list of <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" />s needed to perform the insert, update, or delete. </param>
            <param name="sensitiveLoggingEnabled"> Indicates whether or not potentially sensitive data (e.g. database values) can be logged. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommand.TableName">
            <summary>
                The name of the table containing the data to be modified.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommand.Schema">
            <summary>
                The schema containing the table, or <see langword="null" /> to use the default schema.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommand.Entries">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" />s that represent the entities that are mapped to the row
                to update.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommand.EntityState">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.EntityState" /> that indicates whether the row will be
                inserted (<see cref="F:Microsoft.EntityFrameworkCore.EntityState.Added" />),
                updated (<see cref="F:Microsoft.EntityFrameworkCore.EntityState.Modified" />),
                or deleted ((<see cref="F:Microsoft.EntityFrameworkCore.EntityState.Deleted" />).
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommand.ColumnModifications">
            <summary>
                The list of <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" />s needed to perform the insert, update, or delete.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommand.AssertColumnsNotInitialized">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommand.RequiresResultPropagation">
            <summary>
                Indicates whether or not the database will return values for some mapped properties
                that will then need to be propagated back to the tracked entities.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommand.AddEntry(Microsoft.EntityFrameworkCore.Update.IUpdateEntry,System.Boolean)">
            <summary>
                Adds an <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateEntry" /> to this command representing an entity to be inserted, updated, or deleted.
            </summary>
            <param name="entry"> The entry representing the entity to add. </param>
            <param name="mainEntry"> A value indicating whether this is the main entry for the row. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommand.PropagateResults(Microsoft.EntityFrameworkCore.Storage.ValueBuffer)">
            <summary>
                Reads values returned from the database in the given <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" /> and
                propagates them back to into the appropriate <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" />
                from which the values can be propagated on to tracked entities.
            </summary>
            <param name="valueBuffer"> The buffer containing the values read from the database. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommand.ToString">
            <inheritdoc />
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch">
            <summary>
                <para>
                    A base class for a collection of <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommand" />s that can be executed
                    as a batch.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch.ModificationCommands">
            <summary>
                The list of conceptual insert/update/delete <see cref="P:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch.ModificationCommands" />s in the batch.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch.AddCommand(Microsoft.EntityFrameworkCore.Update.ModificationCommand)">
            <summary>
                Adds the given insert/update/delete <see cref="P:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch.ModificationCommands" /> to the batch.
            </summary>
            <param name="modificationCommand"> The command to add. </param>
            <returns>
                <see langword="true" /> if the command was successfully added; <see langword="false" /> if there was no
                room in the current batch to add the command and it must instead be added to a new batch.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch.Execute(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                Sends insert/update/delete commands to the database.
            </summary>
            <param name="connection"> The database connection to use. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)">
            <summary>
                Sends insert/update/delete commands to the database.
            </summary>
            <param name="connection"> The database connection to use. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A task that represents the asynchronous save operation. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Update.IModificationCommandBatchFactory" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory,Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator,Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory,Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext,Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Update.IModificationCommandBatchFactory" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.Logger">
            <summary>
                A logger.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.CommandBuilderFactory">
            <summary>
                The command builder factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.SqlGenerationHelper">
            <summary>
                The SQL generator helper.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.UpdateSqlGenerator">
            <summary>
                The update SQL generator.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.ValueBufferFactoryFactory">
            <summary>
                The value buffer factory.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.CurrentContext">
            <summary>
                Contains the <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> currently in use.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.With(Microsoft.EntityFrameworkCore.Diagnostics.IDiagnosticsLogger{Microsoft.EntityFrameworkCore.DbLoggerCategory.Database.Command})">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="logger"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactoryFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="valueBufferFactoryFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalCommandBuilderFactory)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="commandBuilderFactory"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.With(Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlGenerationHelper"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.With(Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="updateSqlGenerator"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies.With(Microsoft.EntityFrameworkCore.Infrastructure.ICurrentDbContext)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="currentContext"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch">
            <summary>
                <para>
                    A base class for <see cref="T:Microsoft.EntityFrameworkCore.Update.ModificationCommandBatch" /> implementations that make use
                    of a data reader.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch" /> instance.
            </summary>
            <param name="dependencies"> Service dependencies. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Dependencies">
            <summary>
                Service dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.UpdateSqlGenerator">
            <summary>
                The update SQL generator.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.CachedCommandText">
            <summary>
                Gets or sets the cached command text for the commands in the batch.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.LastCachedCommandIndex">
            <summary>
                The ordinal of the last command for which command text was built.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ModificationCommands">
            <summary>
                The list of conceptual insert/update/delete <see cref="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ModificationCommands" />s in the batch.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.CommandResultSet">
            <summary>
                The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" />s for each command in <see cref="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ModificationCommands" />.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.AddCommand(Microsoft.EntityFrameworkCore.Update.ModificationCommand)">
            <summary>
                Adds the given insert/update/delete <see cref="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ModificationCommands" /> to the batch.
            </summary>
            <param name="modificationCommand"> The command to add. </param>
            <returns>
                <see langword="true" /> if the command was successfully added; <see langword="false" /> if there was no
                room in the current batch to add the command and it must instead be added to a new batch.
            </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ResetCommandText">
            <summary>
                Resets the builder to start building a new batch.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.CanAddCommand(Microsoft.EntityFrameworkCore.Update.ModificationCommand)">
            <summary>
                Checks whether or not a new command can be added to the batch.
            </summary>
            <param name="modificationCommand"> The command to potentially add. </param>
            <returns> <see langword="true" /> if the command can be added; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.IsCommandTextValid">
            <summary>
                Checks whether or not the command text is valid.
            </summary>
            <returns> <see langword="true" /> if the command text is valid; <see langword="false" /> otherwise. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.GetCommandText">
            <summary>
                Gets the command text for all the commands in the current batch and also caches it
                on <see cref="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.CachedCommandText" />.
            </summary>
            <returns> The command text. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.UpdateCachedCommandText(System.Int32)">
            <summary>
                Updates the command text for the command at the given position in the
                <see cref="P:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ModificationCommands" /> list.
            </summary>
            <param name="commandPosition"> The position of the command to generate command text for. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.GetParameterCount">
            <summary>
                Gets the total number of parameters needed for the batch.
            </summary>
            <returns> The total parameter count. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.CreateStoreCommand">
            <summary>
                Generates a <see cref="T:Microsoft.EntityFrameworkCore.Storage.RawSqlCommand" /> for the batch.
            </summary>
            <returns> The command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)">
            <summary>
                Executes the command generated by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.CreateStoreCommand" /> against a
                database using the given connection.
            </summary>
            <param name="connection"> The connection to the database to update. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)">
            <summary>
                Executes the command generated by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.CreateStoreCommand" /> against a
                database using the given connection.
            </summary>
            <param name="connection"> The connection to the database to update. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Consume(Microsoft.EntityFrameworkCore.Storage.RelationalDataReader)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.Execute(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection)" />.
            </summary>
            <param name="reader"> The data reader. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ConsumeAsync(Microsoft.EntityFrameworkCore.Storage.RelationalDataReader,System.Threading.CancellationToken)">
            <summary>
                Consumes the data reader created by <see cref="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.ExecuteAsync(Microsoft.EntityFrameworkCore.Storage.IRelationalConnection,System.Threading.CancellationToken)" />.
            </summary>
            <param name="reader"> The data reader. </param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken" /> to observe while waiting for the task to complete.</param>
            <returns> A task that represents the asynchronous operation. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.ReaderModificationCommandBatch.CreateValueBufferFactory(System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Creates the <see cref="T:Microsoft.EntityFrameworkCore.Storage.IRelationalValueBufferFactory" /> that will be used for creating a
                <see cref="T:Microsoft.EntityFrameworkCore.Storage.ValueBuffer" /> to consume the data reader.
            </summary>
            <param name="columnModifications">
                The list of <see cref="T:Microsoft.EntityFrameworkCore.Update.ColumnModification" />s for all the columns
                being modified such that a ValueBuffer with appropriate slots can be created.
            </param>
            <returns> The factory. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping">
            <summary>
                <para>
                    Indicates what kind of impact on the result set a given command will have.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Update.ResultSetMapping.NoResultSet">
            <summary>
                The command does not have any result set mapping.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Update.ResultSetMapping.NotLastInResultSet">
            <summary>
                The command maps to a result in the result set, but this is not the last result.
            </summary>
        </member>
        <member name="F:Microsoft.EntityFrameworkCore.Update.ResultSetMapping.LastInResultSet">
            <summary>
                The command maps to the last result in the result set.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.SingularModificationCommandBatch">
            <summary>
                <para>
                    An implementation of <see cref="T:Microsoft.EntityFrameworkCore.Update.AffectedCountModificationCommandBatch" /> that does not
                    support batching by limiting the number of commands in the batch to one.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.SingularModificationCommandBatch.#ctor(Microsoft.EntityFrameworkCore.Update.ModificationCommandBatchFactoryDependencies)">
            <summary>
                Creates a new <see cref="T:Microsoft.EntityFrameworkCore.Update.SingularModificationCommandBatch" /> instance.
            </summary>
            <param name="dependencies"> Service dependencies. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.SingularModificationCommandBatch.CanAddCommand(Microsoft.EntityFrameworkCore.Update.ModificationCommand)">
            <summary>
                Only returns <see langword="true" /> if the no command has already been added.
            </summary>
            <param name="modificationCommand"> The command to potentially add. </param>
            <returns> <see langword="true" /> if no command has already been added. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.SingularModificationCommandBatch.IsCommandTextValid">
            <summary>
                Returns <see langword="true" /> since only a single command is generated so the command text must be valid.
            </summary>
            <returns>
                <see langword="true" />
            </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator">
            <summary>
                <para>
                    A base class for the <see cref="T:Microsoft.EntityFrameworkCore.Update.IUpdateSqlGenerator" /> service that is typically inherited from
                    by database providers.
                </para>
                <para>
                    This type is typically used by database providers; it is generally not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />. This means a single instance
                    is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances. The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.#ctor(Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies)">
            <summary>
                Initializes a new instance of the this class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.Dependencies">
            <summary>
                Parameter object containing service dependencies.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.SqlGenerationHelper">
            <summary>
                Helpers for generating update SQL.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendInsertOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.ModificationCommand,System.Int32)">
            <summary>
                Appends a SQL command for inserting a row to the commands being built.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="command"> The command that represents the delete operation. </param>
            <param name="commandPosition"> The ordinal of this command in the batch. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" /> for the command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendUpdateOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.ModificationCommand,System.Int32)">
            <summary>
                Appends a SQL command for updating a row to the commands being built.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="command"> The command that represents the delete operation. </param>
            <param name="commandPosition"> The ordinal of this command in the batch. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" /> for the command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendDeleteOperation(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.ModificationCommand,System.Int32)">
            <summary>
                Appends a SQL command for deleting a row to the commands being built.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="command"> The command that represents the delete operation. </param>
            <param name="commandPosition"> The ordinal of this command in the batch. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" /> for the command. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendInsertCommand(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends a SQL command for inserting a row to the commands being built.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
            <param name="writeOperations"> The operations for each column. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendUpdateCommand(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends a SQL command for updating a row to the commands being built.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
            <param name="writeOperations"> The operations for each column. </param>
            <param name="conditionOperations"> The operations used to generate the <c>WHERE</c> clause for the update. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendDeleteCommand(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends a SQL command for deleting a row to the commands being built.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
            <param name="conditionOperations"> The operations used to generate the <c>WHERE</c> clause for the delete. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendSelectAffectedCountCommand(System.Text.StringBuilder,System.String,System.String,System.Int32)">
            <summary>
                Appends a SQL command for selecting the number of rows affected.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
            <param name="commandPosition"> The ordinal of the command for which rows affected it being returned. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" /> for this command.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendSelectAffectedCommand(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification},System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification},System.Int32)">
            <summary>
                Appends a SQL command for selecting affected data.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
            <param name="readOperations"> The operations representing the data to be read. </param>
            <param name="conditionOperations"> The operations used to generate the <c>WHERE</c> clause for the select. </param>
            <param name="commandPosition"> The ordinal of the command for which rows affected it being returned. </param>
            <returns> The <see cref="T:Microsoft.EntityFrameworkCore.Update.ResultSetMapping" /> for this command.</returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendInsertCommandHeader(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends a SQL fragment for starting an <c>INSERT</c>.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
            <param name="operations"> The operations representing the data to be inserted. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendDeleteCommandHeader(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                Appends a SQL fragment for starting an <c>DELETE</c>.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendUpdateCommandHeader(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends a SQL fragment for starting an <c>UPDATE</c>.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
            <param name="operations"> The operations representing the data to be updated. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendSelectCommandHeader(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends a SQL fragment for starting an <c>SELECT</c>.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="operations"> The operations representing the data to be read. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendFromClause(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                Appends a SQL fragment for starting an <c>FROM</c> clause.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendValuesHeader(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends a SQL fragment for a <c>VALUES</c>.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="operations"> The operations for which there are values. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendValues(System.Text.StringBuilder,System.String,System.String,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends values after a <see cref="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendValuesHeader(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})" /> call.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="name"> The name of the table. </param>
            <param name="schema"> The table schema, or <see langword="null" /> to use the default schema. </param>
            <param name="operations"> The operations for which there are values. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendWhereClause(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends a <c>WHERE</c> clause.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="operations"> The operations from which to build the conditions. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendWhereAffectedClause(System.Text.StringBuilder,System.Collections.Generic.IReadOnlyList{Microsoft.EntityFrameworkCore.Update.ColumnModification})">
            <summary>
                Appends a <c>WHERE</c> clause involving rows affected.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="operations"> The operations from which to build the conditions. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendRowsAffectedWhereCondition(System.Text.StringBuilder,System.Int32)">
            <summary>
                Appends a <c>WHERE</c> condition checking rows affected.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="expectedRowsAffected"> The expected number of rows affected. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendWhereCondition(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.ColumnModification,System.Boolean)">
            <summary>
                Appends a <c>WHERE</c> condition for the given column.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="columnModification"> The column for which the condition is being generated. </param>
            <param name="useOriginalValue">
                If <see langword="true" />, then the original value will be used in the condition, otherwise the current value will be used.
            </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendIdentityWhereCondition(System.Text.StringBuilder,Microsoft.EntityFrameworkCore.Update.ColumnModification)">
            <summary>
                Appends a <c>WHERE</c> condition for the identity (i.e. key value) of the given column.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
            <param name="columnModification"> The column for which the condition is being generated. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendBatchHeader(System.Text.StringBuilder)">
            <summary>
                Appends SQL text that defines the start of a batch.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL should be appended. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.GenerateNextSequenceValueOperation(System.String,System.String)">
            <summary>
                Generates SQL that will obtain the next value in the given sequence.
            </summary>
            <param name="name"> The name of the sequence. </param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
            <returns> The SQL. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator.AppendNextSequenceValueOperation(System.Text.StringBuilder,System.String,System.String)">
            <summary>
                Generates a SQL fragment that will get the next value from the given sequence and appends it to
                the full command being built by the given <see cref="T:System.Text.StringBuilder" />.
            </summary>
            <param name="commandStringBuilder"> The builder to which the SQL fragment should be appended. </param>
            <param name="name"> The name of the sequence. </param>
            <param name="schema"> The schema that contains the sequence, or <see langword="null" /> to use the default schema. </param>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies">
            <summary>
                <para>
                    Service dependencies parameter class for <see cref="T:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator" />
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    Do not construct instances of this class directly from either provider or application code as the
                    constructor signature may change as new dependencies are added. Instead, use this type in
                    your constructor so that an instance will be created and injected automatically by the
                    dependency injection container. To create an instance with some dependent services replaced,
                    first resolve the object from the dependency injection container, then replace selected
                    services using the 'With...' methods. Do not call the constructor at any point in this process.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.
                    This means a single instance of each service is used by many <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instances.
                    The implementation must be thread-safe.
                    This service cannot depend on services registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies.#ctor(Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper,Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                <para>
                    Creates the service dependencies parameter object for a <see cref="T:Microsoft.EntityFrameworkCore.Update.UpdateSqlGenerator" />.
                </para>
                <para>
                    Do not call this constructor directly from either provider or application code as it may change
                    as new dependencies are added. Instead, use this type in your constructor so that an instance
                    will be created and injected automatically by the dependency injection container. To create
                    an instance with some dependent services replaced, first resolve the object from the dependency
                    injection container, then replace selected services using the 'With...' methods. Do not call
                    the constructor at any point in this process.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
                <para>
                    This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                    the same compatibility standards as public APIs. It may be changed or removed without notice in
                    any release. You should only use it directly in your code with extreme caution and knowing that
                    doing so can result in application failures when updating to a new Entity Framework Core release.
                </para>
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies.SqlGenerationHelper">
            <summary>
                Helpers for generating update SQL.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies.TypeMappingSource">
            <summary>
                The type mapping source.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Storage.ISqlGenerationHelper)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="sqlGenerationHelper"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.Update.UpdateSqlGeneratorDependencies.With(Microsoft.EntityFrameworkCore.Storage.IRelationalTypeMappingSource)">
            <summary>
                Clones this dependency parameter object with one service replaced.
            </summary>
            <param name="typeMappingSource"> A replacement for the current dependency of this type. </param>
            <returns> A new parameter object with the given service replaced. </returns>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryBinaryValueGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryBinaryValueGenerator.GeneratesTemporaryValues">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryBinaryValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeOffsetValueGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeOffsetValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeOffsetValueGenerator.GeneratesTemporaryValues">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeValueGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryDateTimeValueGenerator.GeneratesTemporaryValues">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryStringValueGenerator">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="P:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryStringValueGenerator.GeneratesTemporaryValues">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.Internal.TemporaryStringValueGenerator.Next(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
        <member name="T:Microsoft.EntityFrameworkCore.ValueGeneration.RelationalValueGeneratorSelector">
            <summary>
                <para>
                    Selects value generators to be used to generate values for properties of entities.
                </para>
                <para>
                    This type is typically used by database providers (and other extensions). It is generally
                    not used in application code.
                </para>
                <para>
                    The service lifetime is <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Scoped" />. This means that each
                    <see cref="T:Microsoft.EntityFrameworkCore.DbContext" /> instance will use its own instance of this service.
                    The implementation may depend on other services registered with any lifetime.
                    The implementation does not need to be thread-safe.
                </para>
            </summary>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.RelationalValueGeneratorSelector.#ctor(Microsoft.EntityFrameworkCore.ValueGeneration.ValueGeneratorSelectorDependencies)">
            <summary>
                Initializes a new instance of the <see cref="T:Microsoft.EntityFrameworkCore.ValueGeneration.RelationalValueGeneratorSelector" /> class.
            </summary>
            <param name="dependencies"> Parameter object containing dependencies for this service. </param>
        </member>
        <member name="M:Microsoft.EntityFrameworkCore.ValueGeneration.RelationalValueGeneratorSelector.Create(Microsoft.EntityFrameworkCore.Metadata.IProperty,Microsoft.EntityFrameworkCore.Metadata.IEntityType)">
            <summary>
                Creates a new value generator for the given property.
            </summary>
            <param name="property"> The property to get the value generator for. </param>
            <param name="entityType">
                The entity type that the value generator will be used for. When called on inherited properties on derived entity types,
                this entity type may be different from the declared entity type on <paramref name="property" />
            </param>
            <returns> The newly created value generator. </returns>
        </member>
        <member name="M:System.SharedTypeExtensions.DisplayName(System.Type,System.Boolean)">
            <summary>
                This is an internal API that supports the Entity Framework Core infrastructure and not subject to
                the same compatibility standards as public APIs. It may be changed or removed without notice in
                any release. You should only use it directly in your code with extreme caution and knowing that
                doing so can result in application failures when updating to a new Entity Framework Core release.
            </summary>
        </member>
    </members>
</doc>
